---
title: "Pipeline for functional assignation from eDNA data"
output:
  pdf_document: default
html_document: default
date: ""
---
  
  # 0. Preparations
  
  ## Load packages
  
  ```{r}
library(readr)
library(dplyr)
library(tidyr)
library(readxl)
library(janitor)
library(stringr)
library(rebus)
library(taxize)
library(rgbif)
library(GratinNavigatoR)
library(ggplot2)
library(phyloseq)
library(microbiome)
library(metagMisc)
library(vegan)
library(cowplot)
library(microViz)
library(MiscMetabar)
library(svglite)
library(RColorBrewer)
library(ggpubr)
library(scales)
library(psadd)
library(jsonlite)
library(networkD3)
library(webshot2)
```

## Order factors

```{r}
order_level = c("kingdom", "phylum", "class", "order", "family", "genus", "species", "any_level")
order_community = c("nematodes", "microeukaryotes", "bacteria", "fungi", "archae")
order_date = c('2022','2023','2024')
order_uh = c("PP", "TP-P", "TP-C")
order_traitment = c('C', 'T')
order_plantcover = c('PP', 'TP')
order_consumer = c("primary", "secondary", "untargeted")
order_potential = c("bioag", "auxil", "bioag and auxil", "any")
order_interaction = c("observed", "not observed")
order_resource = c("Poaceae or Fabaceae", "adventice", "(Poaceae or Fabaceae) + adventice", "other resource", "no match")
```

## Set colors and frames

```{r}
## samples

uh_color = c("MC_C"="#b0923b","AF_C"="#56ae6c","AF_T"="#8960b3","TP_T"="#ba495b")
fill_manual_uh <- scale_fill_manual(values = uh_color)
color_manual_uh <- scale_color_manual(values = uh_color)

cp_color = c("-config. +cereal"="#b0923b", "-config. +tree"="#ba495b", "+config. +cereal"="#56ae6c", "+config. +tree"="#8960b3")
fill_manual_cp <- scale_fill_manual(values = cp_color)
color_manual_cp <- scale_color_manual(values = cp_color)

config_color = c("-config."="#B56E4B","+config."="#708790")
color_manual_config <- scale_color_manual(values = config_color)
fill_manual_config <- scale_fill_manual(values = config_color)

plantcover_color = c("+cereal"="#83A054","+tree"="#A25587")
fill_manual_plant_cover <- scale_fill_manual(values = plantcover_color)
color_manual_plant_cover <- scale_color_manual(values = plantcover_color)

## taxo

#unique(PO@tax_table@.Data[,1]) # To list the kingdoms once the phyloseq object is created
kingdom_color = c("Bacteria"="#ed938b", "Eukaryota"="#d200be", "Fungi"="#ad9400", "Nematoda"="#00aae3", "Archae" = "Black")
fill_manual_kingdom <- scale_fill_manual(values = kingdom_color)
color_manual_kingdom <- scale_color_manual(values = kingdom_color)

#unique(PO@tax_table@.Data[,2]) # To list the phyla once the phyloseq object is created
phylum_color = c("Acidobacteriota"="#5d8a00", "Actinobacteriota"="#7549bd", "Annelida"="#bad143", "Apicomplexa"="#0051bd", "Arthropoda"="#1c9b32", "Ascomycota"="#e681f5", "Bacteroidota"="#006617", "Basidiomycota"="#af2c98", "Bdellovibrionota"="#96e6a4", "Cercozoa" ="#710072", "Chloroflexi"="#bae086", "Chytridiomycota"="#00236e", "Cyanobacteria"="#ffad59", "Dependentiae"="#018cde", "Desulfobacterota"="#be5e00", "Entotheonellaeota"="#73adff", "Fibrobacterota"="#b02f0d", "Firmicutes"="#413b7a", "Gemmatimonadota"="#ff8748", "Glomeromycota"="#004d11", "Methylomirabilota"="#b7057a", "Mollusca"="#3c5100", "Mucoromycota"="#fda7ff", "Myxococcota"="#715d00", "Nematoda"="#ff84c9", "Nitrospirota"="#62000b", "Patescibacteria"="#bb97dd", "Proteobacteria"="#ff765f", "RCP2-54"="#63194b", "Rozellomycota"="#ad5162", "Verrucomicrobiota"="#850024", "WPS-2"="#d3206c", "unassigned"="black")
fill_manual_phylum <- scale_fill_manual(values = phylum_color)

order_color = c("Araneae"="#1B9E77", "Coleoptera"="#D95F02", "Diptera"="#7570B3", "Hemiptera"="#E7298A", "Hymenoptera"="#66A61E", "Lepidoptera"="#E6AB02", "Orthoptera"="#A6761D", "Thysanoptera"="#E5C494", "unassigned"="#666666", "Isopoda"="#89C5DA", "Geophilomorpha"="#CE50CA", "Embioptera"="#3F4921", "Zygentoma"="#C0717C",
                "Blattodea"="#CBD588", "Opiliones"="#5F7FC7", "Pseudoscorpiones"="#D3D93E", "Ixodida"="#CD9BCD", "Trichoptera"="#6DDE88",
                "Enchytraeida"="#652926", "Julida"="#7FDCC0", "Psocoptera"="#C84248", "Stylommatophora"="#5E738F", "Dermaptera"="#D1A33D")
fill_manual_order <- scale_fill_manual(values = order_color)

consumer_color = c("primary"="#274e13", "secondary"="#783f04", "untargeted"="#fff2ccff")
fill_manual_consumer <- scale_fill_manual(values = consumer_color)

potential_color = c("bioag."="#e6b8af","auxil."="#cfe2f3","any"="#fff2ccff", "bioag. and auxil."="#DBCDD1")
fill_manual_potential <- scale_fill_manual(values = potential_color)

interaction_color = c("observed"="#a64c69","not observed"="#424242")
fill_manual_interaction <- scale_fill_manual(values = interaction_color)

resource_color = c("Poaceae or Fabaceae"="#937B6E", "adventice"="#6574bd", "(Poaceae or Fabaceae) + adventice"="#7C7896", "other resource"="#bf5d39", "no match"="#424242")
fill_manual_resource <- scale_fill_manual(values = resource_color)
```
These tools can be useful to chose colors : http://medialab.github.io/iwanthue/ and https://meyerweb.com/eric/tools/color-blend/#:::hex
  
  ```{r}
frame_simple <- theme_bw() +
  theme(axis.text = element_text(size=8),
        axis.title = element_text(size=9,face="bold"),
        title = element_text(size=10, face="bold"))

frame_bigger <- theme_bw() +
  theme(axis.text = element_text(size=9),
        axis.title = element_text(size=9,face="bold"),
        title = element_text(size=10, face="bold"))
```

## Import raw data

suffix "_0" = raw data

```{r message=FALSE, warning=FALSE}
metadata_mo_0 <- read.csv(file = "data/raw-data/codes_ech.csv", h = T, sep = ";")

fungi0 <- read.csv(file = "data/raw-data/fungi.csv", h = T, sep = ";")
nematode0 <- read.csv(file = "data/raw-data/nematode.csv", h = T, sep = ";")
#...

```
These raw data are heterogeneous (different file formats and structures, different annotations, etc).

# A. tidy_data

Files generated in this section:
  prefix "tidy_"
suffix "_1" = homogenized format, structure and annotations
suffix "_2" = with minimal information
suffix "_ALL" = all communities combined

Minimal information we want in the final tidy data files: abundance, finest_name and code_uhbr
finest_name = taxa name of organisms at finest level (attached to the cluster number for OTUs)
code_uhbr = short code including factors land use, habitat type, block and replicate abbreviations (code_uhbr can be easily manipulated and modified later)
Additional information: date, method, community

## Fungi

```{r}
tidy_fungi_1 <- fungi0 %>%
  group_by(Kingdom, Phylum, Class, Order, Family) %>%
  summarise(across(matches("MET"), sum)) %>%
  filter(!Kingdom %in%  "no data",
         !Family %in% c("unidentified", "Multi-affiliation")) %>%
  pivot_longer(cols = starts_with("MET"),
               names_to = "code",
               values_to = "Abundance") %>%
  ungroup() %>%
  select(Family, code, Abundance) %>%
  pivot_wider(names_from = Family,
              values_from = Abundance,
              values_fill = 0)%>%
  mutate(code = sub("_.*", "", code)) %>%
  left_join(codes) %>%
  relocate(141:149, .after = code) %>%
  filter(!is.na(os))

```

```{r}
# Check raw data
test <- tidy_bacteria_0 # We have 3557700 rows
test_OTU <- unique(test[c("observation_name")]) # that correspond to 59295 OTUs (number of rows * 60 samples)
test_blast <- unique(test[c("blast_taxonomy")]) # that correspond to 3715 blast_taxonomy assignations
test_rdp <- unique(test[c("rdp_tax_and_bootstrap")]) # that correspond to 32968 rdp_tax_and_bootstrap assignations
test_abund <- sum(test$abundance) # that make a total abundance of 3858868

tracking_raw_data <- tibble(community='bacteria', step='raw data', observation_number=nrow(test), OTU_number=nrow(test_OTU), blast_number=nrow(test_blast), rdp_number=nrow(test_rdp), total_abundance=sum(test$abundance))

# cleaning step 1 = remove "no data"
## Some OTUs have no blast taxonomy results ("no data") supposedly because the match between their sequence and the NCBI database is not strong enough.
test <- subset(tidy_bacteria_0, blast_taxonomy == "no data")

tracking_no_blast_results <- tibble(community='bacteria', step='no blast data', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

tidy_bacteria_1a <- tidy_bacteria_0 %>% mutate(full_name = blast_taxonomy)
tidy_bacteria_1a$full_name <- str_replace(tidy_bacteria_1a$full_name, "no data", "unassigned")
test_final <- subset(tidy_bacteria_1a, full_name == "no data")  # OK (no more "no data")

test <- tidy_bacteria_1a
tracking_1a <- tibble(community='bacteria', step='blast results', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

# cleaning step 2 = taxo names
## full_names have to be separated and cleaned to keep only assigned taxa full_names (remove "Multi-affiliation", "unidentified" in species, "unknown class/order/family/genus/species" and "*metagenome")

tidy_bacteria_2a <- tidy_bacteria_1a

tidy_bacteria_2a <- tidy_bacteria_2a %>% 
  separate(col = full_name, into = c("kingdom","phylum","class","order", "family", "genus", "species"), sep = ";")

tidy_bacteria_2a <- tidy_bacteria_2a %>% replace(is.na(.), "unassigned")

tidy_bacteria_2a <- tidy_bacteria_2a %>% mutate(across(c(everything()), ~ sub("Multi-affiliation|^unidentified.*|^unknown.*|metagenome", "unassigned", .)))

tidy_bacteria_2a <- tidy_bacteria_2a %>%  mutate(species = str_replace_all(species, ".*bacterium$|.*sp.$|.*Micromonosporaceae.*|.*soil unassigned.*", "unassigned"))

tidy_bacteria_2a$full_name_cleaned <- paste(tidy_bacteria_2a$kingdom, tidy_bacteria_2a$phylum, tidy_bacteria_2a$class, tidy_bacteria_2a$order, tidy_bacteria_2a$family, tidy_bacteria_2a$genus, tidy_bacteria_2a$species, sep = ";")

test_final <- filter(tidy_bacteria_2a, grepl("Multi-affiliation|unknown|unidentified|metagenome", full_name_cleaned)) # OK (no remaining uncleaned taxa)

tidy_bacteria_2a$abundance <- as.numeric(tidy_bacteria_2a$abundance)
test <- tidy_bacteria_2a
tracking_2a <- tibble(community='bacteria', step='blast results_cleaned_taxo', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

# cleaning step 3 = filtering

tidy_bacteria_3a <- tidy_bacteria_2a 

### Filter 1.1 = keep Bacteria
tidy_bacteria_3a.1.1 <- tidy_bacteria_3a[!(tidy_bacteria_3a$kingdom != 'Bacteria'),] # to keep only Bacteria

diff <- anti_join(tidy_bacteria_3a, tidy_bacteria_3a.1.1) 
test_final <- unique(diff[c("full_name_cleaned")]) # They correspond to Archeae or totally unassigned

test <- tidy_bacteria_3a.1.1
tracking_3a.1.1 <- tibble(community='bacteria', step='blast results_cleaned_filter 1.1 (keep Bacteria)', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

### Filter 1.2 = remove Chloroplasts
tidy_bacteria_3a.1.2 <- tidy_bacteria_3a.1.1[(tidy_bacteria_3a.1.1$order != 'Chloroplast'),] # to remove Chloroplasts

diff <- anti_join(tidy_bacteria_3a.1.1, tidy_bacteria_3a.1.2) 
test_final <- unique(diff[c("full_name_cleaned")]) # Many correspond to plant species

test <- tidy_bacteria_3a.1.2
tracking_3a.1.2 <- tibble(community='bacteria', step='blast results_cleaned_filter 1.2 (remove Chloroplasts)', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

### Filter 2 = remove low abundant (cf Ogier et al., 2019)
total_abundance_per_sample <- aggregate(abundance ~ code_uhbr, data = tidy_bacteria_3a.1.2, FUN = sum)
colnames(total_abundance_per_sample)[2] <- "total_abondance"
tidy_bacteria_3a.2 <- merge(tidy_bacteria_3a.1.2, total_abundance_per_sample, by = "code_uhbr")
tidy_bacteria_3a.2$threshold <- tidy_bacteria_3a.2$total_abondance * 0.001
tidy_bacteria_3a.2 <- tidy_bacteria_3a.2[tidy_bacteria_3a.2$abundance >= tidy_bacteria_3a.2$threshold, ]

diff <- anti_join(tidy_bacteria_3a.1.2, tidy_bacteria_3a.2) 
test_final <- unique(diff[c("full_name_cleaned")])

test <- tidy_bacteria_3a.2
tracking_3a.2 <- tibble(community='bacteria', step='blast results_cleaned_filter 2 (remove low abundant)', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

# Rename the last assigned level to "finest_name"

tidy_bacteria_4a <- tidy_bacteria_3a.2

tidy_bacteria_4a$finest_name <- apply(tidy_bacteria_4a[,c("species", "genus", "family", "order", "class", "phylum", "kingdom")], 1, function(x) {
  finest_name <- x[x != "unassigned"]
  if (length(finest_name) > 0) {
    return(finest_name[1])
  } else {
    return("unassigned")
  }
})

test <- tidy_bacteria_4a
tracking_4a <- tibble(community='bacteria', step='blast results_cleaned_filtered_finest_name', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

# Exporting tracking and taxonomy (cf 2. Taxonomy table)
tracking_bacteria <- rbind(tracking_raw_data, tracking_no_blast_results, tracking_1a, tracking_2a, tracking_3a.1.1, tracking_3a.1.2, tracking_3a.2, tracking_4a)
#write.csv(tracking_bacteria, "analyses/tracking/tracking_step_B_bacteria_2024-10-21.csv", row.names = FALSE)

tidy_bacteria_1 <- tidy_bacteria_4a
tidy_bacteria_1$finest_name <- paste(tidy_bacteria_1$finest_name, tidy_bacteria_1$observation_name, sep = "::")
```

### fungi

```{r}
# Tidy metadata
tidy_fungi_0 <- fungi_0

tidy_fungi_0 <- pivot_longer(tidy_fungi_0, cols = c(13:72), names_to =  "Reference_ADNid", values_to = "abundance", names_repair = "minimal")

tidy_fungi_0$Reference_ADNid <- str_replace(tidy_fungi_0$Reference_ADNid, '_.+_.+', "")

tidy_fungi_0 <- left_join(tidy_fungi_0, metadata_mo_1, by = "Reference_ADNid")

tidy_fungi_0 <- tidy_fungi_0 %>% mutate(community = "fungi")
```

```{r}
# Check raw data
test <- tidy_fungi_0 # We have 202500 rows
test_OTU <- unique(test[c("observation_name")]) # that correspond to 3375 OTUs (number of rows * 60 samples)
test_blast <- unique(test[c("blast_taxonomy")]) # that correspond to 960 blast_taxonomy assignations
test_rdp <- unique(test[c("rdp_tax_and_bootstrap")]) # that correspond to 2833 rdp_tax_and_bootstrap assignations
test_abund <- sum(test$abundance) # that make a total abundance of 1263924

tracking_raw_data <- tibble(community='fungi', step='raw data', observation_number=nrow(test), OTU_number=nrow(test_OTU), blast_number=nrow(test_blast), rdp_number=nrow(test_rdp), total_abundance=sum(test$abundance))

# cleaning step 1 = remove "no data"
## Some OTUs have no blast taxonomy results ("no data") supposedly because the match between their sequence and the NCBI database is not strong enough.
test <- subset(tidy_fungi_0, blast_taxonomy == "no data")

tracking_no_blast_results <- tibble(community='fungi', step='no blast data', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

tidy_fungi_1a <- tidy_fungi_0 %>% mutate(full_name = blast_taxonomy)
tidy_fungi_1a$full_name <- str_replace(tidy_fungi_1a$full_name, "no data", "unassigned")
test_final <- subset(tidy_fungi_1a, full_name == "no data")  # OK (no more "no data")

test <- tidy_fungi_1a
tracking_1a <- tibble(community='fungi', step='blast results', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

# cleaning step 2 = taxo names
## full_names have to be separated and cleaned to keep only assigned taxa full_names (remove "Multi-affiliation", "unidentified" in species, "unknown class/order/family/genus/species" and "*metagenome")

tidy_fungi_2a <- tidy_fungi_1a

tidy_fungi_2a <- tidy_fungi_2a %>% 
  separate(col = full_name, into = c("kingdom","phylum","class","order", "family", "genus", "species"), sep = ";")

tidy_fungi_2a[] <- lapply(tidy_fungi_2a, gsub, pattern='.__', replacement='')

tidy_fungi_2a <- tidy_fungi_2a %>% replace(is.na(.), "unassigned")

tidy_fungi_2a <- tidy_fungi_2a %>% mutate(across(c(everything()), ~ sub("Multi-affiliation|^unidentified.*|^unknown.*|metagenome|.*_sp$", "unassigned", .)))

tidy_fungi_2a <- tidy_fungi_2a %>% mutate(across(24:30, ~ sub("_", " ", .)))

tidy_fungi_2a$full_name_cleaned <- paste(tidy_fungi_2a$kingdom, tidy_fungi_2a$phylum, tidy_fungi_2a$class, tidy_fungi_2a$order, tidy_fungi_2a$family, tidy_fungi_2a$genus, tidy_fungi_2a$species, sep = ";")

test_final <- filter(tidy_fungi_2a, grepl("Multi-affiliation|unknown|unidentified|metagenome", full_name_cleaned)) # OK (no remaining uncleaned taxa)

tidy_fungi_2a$abundance <- as.numeric(tidy_fungi_2a$abundance)
test <- tidy_fungi_2a
tracking_2a <- tibble(community='fungi', step='blast results_cleaned_taxo', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

# cleaning step 3 = filtering

tidy_fungi_3a <- tidy_fungi_2a 

### Filter 1 = keep Fungi
tidy_fungi_3a.1 <- tidy_fungi_3a[!(tidy_fungi_3a$kingdom != 'Fungi'),] # to keep only Fungi

diff <- anti_join(tidy_fungi_3a, tidy_fungi_3a.1) 
test_final <- unique(diff[c("full_name_cleaned")]) # They correspond to totally unassigned

tidy_fungi_3a.1$abundance <- as.numeric(tidy_fungi_3a.1$abundance)
test <- tidy_fungi_3a.1
tracking_3a.1 <- tibble(community='fungi', step='blast results_cleaned_filter 1 (keep Fungi)', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

### Filter 2 = remove low abundant (cf Ogier et al., 2019)
total_abundance_per_sample <- aggregate(abundance ~ code_uhbr, data = tidy_fungi_3a.1, FUN = sum)
colnames(total_abundance_per_sample)[2] <- "total_abondance"
tidy_fungi_3a.2 <- merge(tidy_fungi_3a.1, total_abundance_per_sample, by = "code_uhbr")
tidy_fungi_3a.2$threshold <- tidy_fungi_3a.2$total_abondance * 0.001
tidy_fungi_3a.2 <- tidy_fungi_3a.2[tidy_fungi_3a.2$abundance >= tidy_fungi_3a.2$threshold, ]

diff <- anti_join(tidy_fungi_3a.1, tidy_fungi_3a.2)
test_final <- unique(diff[c("full_name_cleaned")]) # They correspond mainly to Ascomycota

test <- tidy_fungi_3a.2
tracking_3a.2 <- tibble(community='fungi', step='blast results_cleaned_filter 2 (remove low abundant)', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

# Rename the last assigned level to "finest_name"

tidy_fungi_4a <- tidy_fungi_3a.2

tidy_fungi_4a$finest_name <- apply(tidy_fungi_4a[,c("species", "genus", "family", "order", "class", "phylum", "kingdom")], 1, function(x) {
  finest_name <- x[x != "unassigned"]
  if (length(finest_name) > 0) {
    return(finest_name[1])
  } else {
    return("unassigned")
  }
})

test <- tidy_fungi_4a
tracking_4a <- tibble(community='fungi', step='blast results_cleaned_filtered_finest_name', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

# Exporting tracking and taxonomy (cf 2. Taxonomy table)
tracking_fungi <- rbind(tracking_raw_data, tracking_no_blast_results, tracking_1a, tracking_2a, tracking_3a.1, tracking_3a.2, tracking_4a)
#write.csv(tracking_fungi, "analyses/tracking/tracking_step_B_fungi_2024-10-21.csv", row.names = FALSE)

tidy_fungi_1 <- tidy_fungi_4a
tidy_fungi_1$finest_name <- paste(tidy_fungi_1$finest_name, tidy_fungi_1$observation_name, sep = "::")
```

### protists

```{r}
# Tidy metadata
tidy_protists_0 <- protists_0

tidy_protists_0 <- pivot_longer(tidy_protists_0, cols = c(13:72), names_to =  "Reference_ADNid", values_to = "abundance", names_repair = "minimal")

tidy_protists_0$Reference_ADNid <- str_replace(tidy_protists_0$Reference_ADNid, '_.+_.+', "")

tidy_protists_0 <- left_join(tidy_protists_0, metadata_mo_1, by = "Reference_ADNid")

tidy_protists_0 <- tidy_protists_0 %>% mutate(community = "protists")
```

```{r}
# Check raw data
test <- tidy_protists_0 # We have 581820 rows
test_OTU <- unique(test[c("observation_name")]) # that correspond to 9697 OTUs (number of rows * 60 samples)
test_blast <- unique(test[c("blast_taxonomy")]) # that correspond to 252 blast_taxonomy assignations
test_rdp <- unique(test[c("rdp_tax_and_bootstrap")]) # that correspond to 6221 rdp_tax_and_bootstrap assignations
test_abund <- sum(test$abundance) # that make a total abundance of 1383974

tracking_raw_data <- tibble(community='protists', step='raw data', observation_number=nrow(test), OTU_number=nrow(test_OTU), blast_number=nrow(test_blast), rdp_number=nrow(test_rdp), total_abundance=sum(test$abundance))

# cleaning step 1 = remove "no data"
## Some OTUs have no blast taxonomy results ("no data") supposedly because the match between their sequence and the NCBI database is not strong enough.
test <- subset(tidy_protists_0, blast_taxonomy == "no data")

tracking_no_blast_results <- tibble(community='protists', step='no blast data', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

tidy_protists_1a <- tidy_protists_0 %>% mutate(full_name = blast_taxonomy)
tidy_protists_1a$full_name <- str_replace(tidy_protists_1a$full_name, "no data", "unassigned")
test_final <- subset(tidy_protists_1a, full_name == "no data")  # OK (no more "no data")

test <- tidy_protists_1a
tracking_1a <- tibble(community='protists', step='blast results', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

# cleaning step 2 = taxo names
## full_names have to be separated and cleaned to keep only assigned taxa full_names (remove "Multi-affiliation", "unidentified" in species, "unknown class/order/family/genus/species" and "*metagenome")

tidy_protists_2a <- tidy_protists_1a

tidy_protists_2a <- tidy_protists_2a %>% 
  separate(col = full_name, into = c("kingdom","phylum","class","order", "family", "genus", "species"), sep = ";")

tidy_protists_2a <- tidy_protists_2a %>% replace(is.na(.), "unassigned")

tidy_protists_2a <- tidy_protists_2a %>% mutate(across(c(everything()), ~ sub("Multi-affiliation|^unidentified.*|^unknown.*|metagenome", "unassigned", .)))

tidy_protists_2a <- tidy_protists_2a %>%  mutate(species = str_replace_all(species, "Cercomonas sp.|Cercozoa sp.|Eocercomonas sp.|Heteromita sp.|Paracercomonas sp.|Thaumatomastix sp.", "unassigned")) # These species names with sp. are replaced because they already have the info in genus column. The others, that don't have it, are kept.

tidy_protists_2a$full_name_cleaned <- paste(tidy_protists_2a$kingdom, tidy_protists_2a$phylum, tidy_protists_2a$class, tidy_protists_2a$order, tidy_protists_2a$family, tidy_protists_2a$genus, tidy_protists_2a$species, sep = ";")

test_final <- filter(tidy_protists_2a, grepl("Multi-affiliation|unknown|unidentified|metagenome", full_name_cleaned)) # OK (no remaining uncleaned taxa)

tidy_protists_2a$abundance <- as.numeric(tidy_protists_2a$abundance)
test <- tidy_protists_2a
tracking_2a <- tibble(community='protists', step='blast results_cleaned_taxo', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

# cleaning step 3 = filtering

tidy_protists_3a <- tidy_protists_2a 

### Filter 1 = keep Cercozoa
tidy_protists_3a.1 <- tidy_protists_3a[!(tidy_protists_3a$phylum != 'Cercozoa'),] # to keep only Cercozoa

diff <- anti_join(tidy_protists_3a, tidy_protists_3a.1) 
test_final <- unique(diff[c("full_name_cleaned")]) # They correspond mainly to Nematozoa

test <- tidy_protists_3a.1
tracking_3a.1 <- tibble(community='protists', step='blast results_cleaned_filter 1 (keep Cercozoa)', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

### Filter 2 = remove low abundant (cf Ogier et al., 2019)
total_abundance_per_sample <- aggregate(abundance ~ code_uhbr, data = tidy_protists_3a.1, FUN = sum)
colnames(total_abundance_per_sample)[2] <- "total_abondance"
tidy_protists_3a.2 <- merge(tidy_protists_3a.1, total_abundance_per_sample, by = "code_uhbr")
tidy_protists_3a.2$threshold <- tidy_protists_3a.2$total_abondance * 0.001
tidy_protists_3a.2 <- tidy_protists_3a.2[tidy_protists_3a.2$abundance >= tidy_protists_3a.2$threshold, ]

diff <- anti_join(tidy_protists_3a.1, tidy_protists_3a.2) 
test_final <- unique(diff[c("full_name_cleaned")])

test <- tidy_protists_3a.2
tracking_3a.2 <- tibble(community='protists', step='blast results_cleaned_filter 2 (remove low abundant)', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

# Rename the last assigned level to "finest_name"

tidy_protists_4a <- tidy_protists_3a.2

tidy_protists_4a$finest_name <- apply(tidy_protists_4a[,c("species", "genus", "family", "order", "class", "phylum", "kingdom")], 1, function(x) {
  finest_name <- x[x != "unassigned"]
  if (length(finest_name) > 0) {
    return(finest_name[1])
  } else {
    return("unassigned")
  }
})

test <- tidy_protists_4a
tracking_4a <- tibble(community='protists', step='blast results_cleaned_filtered_finest_name', observation_number=nrow(test), OTU_number=nrow(unique(test[c("observation_name")])), blast_number=nrow(unique(test[c("blast_taxonomy")])), rdp_number=nrow(unique(test[c("rdp_tax_and_bootstrap")])), total_abundance=sum(test$abundance))

# Exporting tracking and taxonomy (cf 2. Taxonomy table)
tracking_protists <- rbind(tracking_raw_data, tracking_no_blast_results, tracking_1a, tracking_2a, tracking_3a.1, tracking_3a.2, tracking_4a)
#write.csv(tracking_protists, "analyses/tracking/tracking_step_B_protists_2024-10-21.csv", row.names = FALSE)

tidy_protists_1 <- tidy_protists_4a
tidy_protists_1$finest_name <- paste(tidy_protists_1$finest_name, tidy_protists_1$observation_name, sep = "::")
```

## Export files

```{r}
# Select minimal data to export tidy_data

tidy_macrofauna_surface_2 <- tidy_macrofauna_surface_1 %>% 
  select(code_uhbr, finest_name, abundance, date, method, community)
# stade and mass can be used for traits later
# fullName, genusName, familyName, orderName, className, phylumName will be regenerated in homogenized format during the tax_table section
#write.csv(tidy_macrofauna_surface_2, "data/derived_data/tidy_data/tidy_macrofauna_surface_2024-10-21.csv", row.names = FALSE)

tidy_macrofauna_aerial_2 <- tidy_macrofauna_aerial_1 %>% 
  select(code_uhbr, finest_name, abundance, date, method, community)
# INat can be used for ID and stade can be used for traits later
# fullName, genusName, familyName, orderName, className, phylumName will be regenerated in homogenized format during the tax_table section
#write.csv(tidy_macrofauna_aerial_2, "data/derived_data/tidy_data/tidy_macrofauna_aerial_2024-10-21.csv", row.names = FALSE)

tidy_macrofauna_foliar_2 <- tidy_macrofauna_foliar_1 %>% 
  select(code_uhbr, finest_name, abundance, date, method, community)
# fullName, genusName, familyName, orderName, className, phylumName will be regenerated in homogenized format during the tax_table section
#write.csv(tidy_macrofauna_foliar_2, "data/derived_data/tidy_data/tidy_macrofauna_foliar_2024-10-21.csv", row.names = FALSE)

tidy_nematodes_2 <- tidy_nematodes_1 %>% select(code_uhbr, finest_name, abundance, date, method, community)
tidy_nematodes_2$abundance = as.numeric(tidy_nematodes_2$abundance)
#write.csv(tidy_nematodes_2, "data/derived_data/tidy_data/tidy_nematodes_2024-10-21.csv", row.names = FALSE)

tidy_micro_arthropodes_2 <- tidy_micro_arthropodes_1 %>% select(code_uhbr, finest_name, abundance, date, method, community)
# stade can be used for traits
# higher.level and lower.level will be regenerated in homogenized format during the tax_table section
#write.csv(tidy_micro_arthropodes_2, "data/derived_data/tidy_data/tidy_micro_arthropodes_2024-10-21.csv", row.names = FALSE)

tidy_bacteria_2 <- tidy_bacteria_1 %>% 
  select(code_uhbr, finest_name, abundance, date, method, community)
#write.csv(tidy_bacteria_1, "data/derived_data/tidy_data/tidy_bacteria_blast_cleaned_filtered_2024-10-21.csv", row.names = FALSE)
#saveRDS(tidy_bacteria_1, "data/derived_data/tidy_data/tidy_bacteria_blast_cleaned_filtered_2024-10-21.rds")

tidy_fungi_2 <- tidy_fungi_1 %>% 
  select(code_uhbr, finest_name, abundance, date, method, community)
#write.csv(tidy_fungi_1, "data/derived_data/tidy_data/tidy_fungi_blast_cleaned_filtered_2024-10-21.csv", row.names = FALSE)
#saveRDS(tidy_fungi_1, "data/derived_data/tidy_data/tidy_fungi_blast_cleaned_filtered_2024-10-21.rds")

tidy_protists_2 <- tidy_protists_1 %>% 
  select(code_uhbr, finest_name, abundance, date, method, community)
#write.csv(tidy_protists_1, "data/derived_data/tidy_data/tidy_protists_blast_cleaned_filtered_2024-10-21.csv", row.names = FALSE)
#saveRDS(tidy_protists_1, "data/derived_data/tidy_data/tidy_protists_blast_cleaned_filtered_2024-10-21.rds")
```

```{r}
# Re-import tidy_data files to check and bind them

tidy_macrofauna_surface <- read.csv("data/derived_data/tidy_data/tidy_macrofauna_surface_2024-10-21.csv")
tidy_macrofauna_aerial <- read.csv("data/derived_data/tidy_data/tidy_macrofauna_aerial_2024-10-21.csv")
tidy_macrofauna_foliar <- read.csv("data/derived_data/tidy_data/tidy_macrofauna_foliar_2024-10-21.csv")
tidy_micro_arthropodes <- read.csv("data/derived_data/tidy_data/tidy_micro_arthropodes_2024-10-21.csv")
tidy_nematodes <- read.csv("data/derived_data/tidy_data/tidy_nematodes_2024-10-21.csv")
tidy_bacteria <- read.csv("data/derived_data/tidy_data/tidy_bacteria_blast_cleaned_filtered_2024-10-21.csv")
tidy_fungi <- read.csv("data/derived_data/tidy_data/tidy_fungi_blast_cleaned_filtered_2024-10-21.csv")
tidy_protists <- read.csv("data/derived_data/tidy_data/tidy_protists_blast_cleaned_filtered_2024-10-21.csv")
```

```{r}
tidy_ALL <- bind_rows(tidy_macrofauna_surface, tidy_macrofauna_aerial, tidy_macrofauna_foliar, tidy_nematodes, tidy_micro_arthropodes, tidy_bacteria, tidy_fungi, tidy_protists) # bind all communities in one file

tidy_ALL <- aggregate(tidy_ALL$abundance, by=list(code_uhbr=tidy_ALL$code_uhbr, finest_name=tidy_ALL$finest_name, date=tidy_ALL$date, method=tidy_ALL$method, community=tidy_ALL$community), FUN=sum) %>% rename(abundance = x) # aggregate abundances by code_uhbr, finest_name, date, method and community

tidy_ALL <- filter(tidy_ALL, abundance != 0) # remove rows with abundance = 0 (especially needed for amplicon barcoding since each sample has a row for all OTUs in the initial tables)

#write.csv(tidy_ALL, "data/derived_data/tidy_data/tidy_all_2024-10-21.csv", row.names=F)
#saveRDS(tidy_ALL, "data/derived_data/tidy_data/tidy_all_2024-10-21.rds")
```

## Check tracking

### microorganismes

```{r}
# Import and bind track results
tracking_bacteria <- read.csv("analyses/tracking/tracking_step_B_bacteria_2024-10-21.csv")
tracking_fungi <- read.csv("analyses/tracking/tracking_step_B_fungi_2024-10-21.csv")
tracking_protists <- read.csv("analyses/tracking/tracking_step_B_protists_2024-10-21.csv")

tracking <- rbind(tracking_bacteria, tracking_fungi, tracking_protists)
#write.csv(tracking, "analyses/tracking/tracking_step_A_microorganisms_long_2024-10-21.csv", row.names = FALSE)

# Keep minimal cleaning and filtering steps
tracking <- filter(tracking, grepl("raw data|blast results_cleaned_filter 1|blast results_cleaned_filter 2", step))

# Keep last taxo filter step for bacteria
tracking$step <- gsub("blast results_cleaned_filter 1.2", "blast results_cleaned_filter 1", tracking$step)
tracking <- filter(tracking, !grepl("1.1", step))

# Remove filter details in step name to homogeneize x axis
tracking$step <- gsub(" \\(.*?\\)", "", tracking$step)

# Rename x label to make them shorter
tracking <- tracking %>%
  mutate(step = case_when(
    step == "blast results_cleaned_filter 1" ~ "after filter 1",
    step == "blast results_cleaned_filter 2" ~ "after filter 2",
    step == "raw data" ~ "raw data"))

#write.csv(tracking, "analyses/tracking/tracking_step_A_microorganisms_short_2024-10-21.csv", row.names = FALSE)

# Order x axis
order_step = c("raw data", "after filter 1", "after filter 2")
tracking$step <- ordered(tracking$step, order_step)
```

```{r}
# Draw graphs
C1 <- ggplot(tracking, aes(step, OTU_number, fill=community)) + frame_simple + geom_bar(stat="identity", position="dodge") + theme(axis.text.x = element_text(angle = 45, hjust=1)) + theme(axis.text=element_text(size=8)) + labs(title="Number of distinct OTUs") + scale_y_continuous(labels = scales::comma)
C1
#ggsave("analyses/tracking/tracking_step_A_OTU_number_2024-10-21.png", width=4, height=4)

C2 <- ggplot(tracking, aes(step, total_abundance, fill=community)) + frame_simple + geom_bar(stat="identity", position="dodge") + theme(axis.text.x = element_text(angle = 45, hjust=1)) + theme(axis.text=element_text(size=8)) + labs(title="Total abundance of OTUs") + scale_y_continuous(labels = scales::comma)
C2
#ggsave("analyses/tracking/tracking_step_A_total_abundance_2024-10-21.png", width=4, height=4)

C3 <- ggplot(tracking, aes(step, blast_number, fill=community)) + frame_simple + geom_bar(stat="identity", position="dodge") + theme(axis.text.x = element_text(angle = 45, hjust=1)) + theme(axis.text=element_text(size=8)) + labs(title="Number of distinct BLAST assignations") + scale_y_continuous(labels = scales::comma)
C3
#ggsave("analyses/tracking/tracking_step_A_blast_number_2024-10-21.png", width=4, height=4)
```

### all

```{r}
tidy_ALL <- read.csv("data/derived_data/tidy_data/tidy_all_2024-10-21.csv")
## Filter date if needed
#tidy_ALL <- tidy_ALL[which(tidy_ALL$date == "17/04/2023"),] ##

# Summarise by community
step_A <- tidy_ALL %>% group_by(community) %>% summarise(total_abundance = sum(abundance), n_distinct_finest_name = n_distinct(finest_name), n_distinct_date = n_distinct(date), n_distinct_method = n_distinct(method))

step_A$community <- ordered(step_A$community, order_community)

step_A <- as.data.frame(step_A)
#write.csv(step_A, "analyses/tracking/tracking_step_A_all_2024-10-21.csv", row.names = F)

SA <- ggplot(step_A, aes(n_distinct_finest_name, total_abundance)) + frame_simple + geom_point(aes(color = community, size = 4)) + labs(title="Total abundance of organisms = f(number of distinct taxa names at finest level)", subtitle = "") + scale_y_continuous(labels = scales::comma) + scale_x_continuous(labels = scales::comma) + scale_colour_brewer(palette = "Set2") + guides(size = F)
SA
#ggsave("analyses/tracking/tracking_step_A_all_2024-10-21.png", width=7.1, height=4.5)

step_A_zoom <- filter(step_A, !grepl("bacteria|fungi|protists|nematodes", community))

SAz <- ggplot(step_A_zoom, aes(n_distinct_finest_name, total_abundance)) + frame_simple + geom_point(aes(color = community, size = 4)) + labs(title="Total abundance of organisms = f(number of distinct taxa names at finest level)", subtitle = "Zoom on macrofauna and micro-arthropodes") + scale_y_continuous(labels = scales::comma) + scale_x_continuous(labels = scales::comma) + scale_colour_brewer(palette = "Set2") + guides(size = F)
SAz
#ggsave("analyses/tracking/tracking_step_A_all_zoom_2024-10-21.png", width=7.1, height=4.5)
```

# B. tax_table

Files generated in this section:
  prefix "tax_"
suffix "_1" = file to use for taxize input (query)
suffix "_2" = raw taxize output (ITIS and NCBI results)
suffix "_3" = cleaned taxonomy
suffix "_ALL" = all communities combined

To go faster while generating the taxonomy, use a NCBI entrez key.
First, generate a key (cf https://ncbiinsights.ncbi.nlm.nih.gov/2017/11/02/new-api-keys-for-the-e-utilities/)
Then, set your environment by doing once:
  usethis::edit_r_environ()
ENTREZ_KEY='youractualkey' # To write in the environment

NB: Even with the key, error (400) appears but can be solved by using a loop.

## macrofauna_surface

```{r}
tax_macrofauna_surface_1 <- tidy_macrofauna_surface_2 %>% distinct(finest_name)
temp <- gnr_resolve(tax_macrofauna_surface_1$finest_name, preferred_data_sources = c(1,3,4,11,12), best_match_only = T) # 1 = CLC, 3 = ITIS, 4 = NCBI, 11 = GBIF, 12 = EOL (https://resolver.globalnames.org/data_sources)
diff <- setdiff(tax_macrofauna_surface_1$finest_name, temp$user_supplied_name) 
print(diff)
# Manual cleaning
## Pezottetix not found because wrong spelling
tax_macrofauna_surface_1$finest_name[tax_macrofauna_surface_1$finest_name == "Pezottetix"] <- "Pezotettix"
# Run again from temp... and check diff = 0 (OK now)

#write.csv(tax_macrofauna_surface_1, "data/derived_data/tax_table/intermediate_files/tax_macrofauna_surface_taxizeinput_2024-10-21.csv", row.names = F)
```

```{r, echo=FALSE}
tax_macrofauna_surface_2 = NULL
for (i in 1: nrow(tax_macrofauna_surface_1)) {
  classes_i <- try(tax_name(sci = tax_macrofauna_surface_1$finest_name[i], get = c("kingdom", "phylum", "class", "order", "family", "genus", "species"), db = "both", ask = FALSE))
  if (class(classes_i)=="try-error") {
    Sys.sleep(10)
    classes_i <- try(tax_name(sci = tax_macrofauna_surface_1$finest_name[i], get = c("kingdom", "phylum", "class", "order", "family", "genus", "species"), db = "both", ask = FALSE))}
  tax_macrofauna_surface_2 <- rbind(tax_macrofauna_surface_2, classes_i)
}

tax_macrofauna_surface_2 <- tax_macrofauna_surface_2[- grep("Error", tax_macrofauna_surface_2$query),] # remove the rows with errors

#write.csv(tax_macrofauna_surface_2, "data/derived_data/tax_table/intermediate_files/tax_macrofauna_surface_taxizeoutput.csv")
```

```{r, echo=FALSE}
tax_macrofauna_surface_2 <- read.csv("data/derived_data/tax_table/intermediate_files/tax_macrofauna_surface_taxizeoutput.csv")
taxnotfoundanydb <- tax_macrofauna_surface_2[!complete.cases(tax_macrofauna_surface_2$kingdom),]
taxnotfoundthisdb <- taxnotfoundanydb %>% group_by(query) %>% filter(n() == 1) # These are the taxa found in only one database (not found in the database in this object = found in the other database in macrofauna_foliar_2). Therefore, if we filter NCBI (by default) results in macrofauna_foliar_2, we must also keep ITIS results for the taxa with no NCBI results in this objects. These taxa to keep are saved in the following vector :
keepitis <- c(subset(taxnotfoundthisdb, db == 'ncbi')$query)
taxnotfoundbothdb <- subset(taxnotfoundanydb,duplicated(query)) # These are the taxa not found in both database. We will export the list, fill it manually and reimport it.
#write.csv(taxnotfoundbothdb[,-1], "data/derived_data/tax_table/intermediate_files/tax_macrofauna_surface_taxnotfound_ncbianditis.csv") # Fill cells with info found on internet, save it to x_mod and import it
taxfound_manually <- read.csv("data/derived_data/tax_table/intermediate_files/tax_macrofauna_surface_taxnotfound_ncbianditis_mod.csv", sep = ";")
taxfound_manually <- taxfound_manually[complete.cases(taxfound_manually$kingdom),-c(9,10)]

# Keep NCBI results in macrofauna_surface_tax and add ITIS results and manual taxonomy
taxfound_ncbi <- tax_macrofauna_surface_2[tax_macrofauna_surface_2$db == 'ncbi' & complete.cases(tax_macrofauna_surface_2$kingdom), -1]
taxfound_itisonly <- tax_macrofauna_surface_2[tax_macrofauna_surface_2$db == 'itis' & tax_macrofauna_surface_2$query %in% keepitis, ]
tax_macrofauna_surface_3 <- bind_rows(taxfound_ncbi, taxfound_itisonly[,-1], taxfound_manually) %>% mutate(community = "macrofauna_surface")

# Replace Animalia (ITIS) par Metazoa (NCBI)
tax_macrofauna_surface_3[tax_macrofauna_surface_3 == "Animalia"] <- "Metazoa"

# Replace NA by "unassigned"
tax_macrofauna_surface_3 <- tax_macrofauna_surface_3 %>% replace(is.na(.), "unassigned")

# Rename "query" by "finest_name"
tax_macrofauna_surface_3 <- tax_macrofauna_surface_3[,-1] %>% rename(finest_name=query)
```

## macrofauna_aerial

```{r}
tax_macrofauna_aerial_1 <- tidy_macrofauna_aerial_2 %>% distinct(finest_name)
temp <- gnr_resolve(tax_macrofauna_aerial_1$finest_name, preferred_data_sources = c(1,3,4,11,12), best_match_only = T) # 1 = CLC, 3 = ITIS, 4 = NCBI, 11 = GBIF, 12 = EOL (https://resolver.globalnames.org/data_sources)
diff <- setdiff(tax_macrofauna_aerial_1$finest_name, temp$user_supplied_name) 
print(diff)
# Manual cleaning
## Belytini not found because its a tribu of Belytinae
tax_macrofauna_aerial_1$finest_name[tax_macrofauna_aerial_1$finest_name == "Belytini"] <- "Belytinae"
# Run again from temp... and check diff = 0 (OK now)

#write.csv(tax_macrofauna_aerial_1, "data/derived_data/tax_table/intermediate_files/tax_macrofauna_aerial_taxizeinput_2024-10-21.csv", row.names = F)
```

```{r, echo=FALSE}
tax_macrofauna_aerial_2 = NULL
for (i in 1: nrow(tax_macrofauna_aerial_1)) {
  classes_i <- try(tax_name(sci = tax_macrofauna_aerial_1$finest_name[i], get = c("kingdom", "phylum", "class", "order", "family", "genus", "species"), db = "both", ask = FALSE))
  if (class(classes_i)=="try-error") {
    Sys.sleep(10)
    classes_i <- try(tax_name(sci = tax_macrofauna_aerial_1$finest_name[i], get = c("kingdom", "phylum", "class", "order", "family", "genus", "species"), db = "both", ask = FALSE))}
  tax_macrofauna_aerial_2 <- rbind(tax_macrofauna_aerial_2, classes_i)
}

#write.csv(tax_macrofauna_aerial_2, "data/derived_data/tax_table/intermediate_files/tax_macrofauna_aerial_taxizeoutput.csv")
```

```{r, echo=FALSE}
tax_macrofauna_aerial_2 <- read.csv("data/derived_data/tax_table/intermediate_files/tax_macrofauna_aerial_taxizeoutput.csv")
taxnotfoundanydb <- tax_macrofauna_aerial_2[!complete.cases(tax_macrofauna_aerial_2$kingdom),]
taxnotfoundthisdb <- taxnotfoundanydb %>% group_by(query) %>% filter(n() ==1) # These are the taxa found in only one database (not found in the database in this object = found in the other database in macrofauna_foliar_2). Therefore, if we filter NCBI (by default) results in macrofauna_foliar_2, we must also keep ITIS results for the taxa with no NCBI results in this objects. These taxa to keep are saved in the following vector :
keepitis <- c(subset(taxnotfoundthisdb, db == 'ncbi')$query)
taxnotfoundbothdb <- subset(taxnotfoundanydb,duplicated(query)) # These are the taxa not found in any database. We will export the list, fill it manually and reimport it.
#write.csv(taxnotfoundbothdb[,-1], "data/derived_data/tax_table/intermediate_files/tax_macrofauna_aerial_taxnotfound_ncbianditis.csv") # Fill cells with info found on internet, save it to x_mod and import it
taxfound_manually <- read.csv("data/derived_data/tax_table/intermediate_files/tax_macrofauna_aerial_taxnotfound_ncbianditis_mod.csv", sep = ";")
taxfound_manually <- taxfound_manually[complete.cases(taxfound_manually$kingdom),-c(9,10)]

# Keep NCBI results in macrofauna_aerial_tax and add ITIS results and manual taxonomy
taxfound_ncbi <- tax_macrofauna_aerial_2[tax_macrofauna_aerial_2$db == 'ncbi' & complete.cases(tax_macrofauna_aerial_2$kingdom), -1]
taxfound_itisonly <- tax_macrofauna_aerial_2[tax_macrofauna_aerial_2$db == 'itis' & tax_macrofauna_aerial_2$query %in% keepitis, ]
tax_macrofauna_aerial_3 <- bind_rows(taxfound_ncbi, taxfound_itisonly[,-1], taxfound_manually) %>% mutate(community = "macrofauna_aerial")

# Replace Animalia (ITIS) par Metazoa (NCBI)
tax_macrofauna_aerial_3[tax_macrofauna_aerial_3 == "Animalia"] <- "Metazoa"

# Replace NA by "unassigned"
tax_macrofauna_aerial_3 <- tax_macrofauna_aerial_3 %>% replace(is.na(.), "unassigned")

# Rename "query" by "finest_name"
tax_macrofauna_aerial_3 <- tax_macrofauna_aerial_3[,-1] %>% rename(finest_name=query)
```

## macrofauna_foliar

```{r}
tax_macrofauna_foliar_1 <- tidy_macrofauna_foliar_2 %>% distinct(finest_name)
temp <- gnr_resolve(tax_macrofauna_foliar_1$finest_name, preferred_data_sources = c(1,3,4,11,12), best_match_only = T) # 1 = CLC, 3 = ITIS, 4 = NCBI, 11 = GBIF, 12 = EOL (https://resolver.globalnames.org/data_sources)
diff <- setdiff(tax_macrofauna_foliar_1$finest_name, temp$user_supplied_name) 
print(diff)
# Manual cleaning
## Phonognathidae not found because wrong spelling
tax_macrofauna_foliar_1$finest_name[tax_macrofauna_foliar_1$finest_name == "Phonognathidae"] <- "Phonognathinae"
## vide should be removed
tax_macrofauna_foliar_1 <- tax_macrofauna_foliar_1[!(tax_macrofauna_foliar_1$finest_name %in% "vide"),]
# Run again from temp... and check diff = 0 (OK now)

#write.csv(tax_macrofauna_foliar_1, "data/derived_data/tax_table/intermediate_files/tax_macrofauna_foliar_taxizeinput_2024-10-21.csv")
```

```{r, echo=FALSE}
tax_macrofauna_foliar_2 = NULL
for (i in 1: nrow(tax_macrofauna_foliar_1)) {
  classes_i <- try(tax_name(sci = tax_macrofauna_foliar_1$finest_name[i], get = c("kingdom", "phylum", "class", "order", "family", "genus", "species"), db = "both", ask = FALSE))
  if (class(classes_i)=="try-error") {
    Sys.sleep(10)
    classes_i <- try(tax_name(sci = tax_macrofauna_foliar_1$finest_name[i], get = c("kingdom", "phylum", "class", "order", "family", "genus", "species"), db = "both", ask = FALSE))}
  tax_macrofauna_foliar_2 <- rbind(tax_macrofauna_foliar_2, classes_i)
}

tax_macrofauna_foliar_2 <- tax_macrofauna_foliar_2[- grep("Error", tax_macrofauna_foliar_2$query),] # remove the rows with errors

#write.csv(tax_macrofauna_foliar_2, "data/derived_data/tax_table/intermediate_files/tax_macrofauna_foliar_taxizeoutput.csv")
```

```{r, echo=FALSE}
tax_macrofauna_foliar_2 <- read.csv("data/derived_data/tax_table/intermediate_files/tax_macrofauna_foliar_taxizeoutput.csv")
taxnotfoundanydb <- tax_macrofauna_foliar_2[!complete.cases(tax_macrofauna_foliar_2$kingdom),]
taxnotfoundthisdb <- taxnotfoundanydb %>% group_by(query) %>% filter(n() ==1) # These are the taxa found in only one database (not found in the database in this object = found in the other database in macrofauna_foliar_2). Therefore, if we filter NCBI (by default) results in macrofauna_foliar_2, we must also keep ITIS results for the taxa with no NCBI results in this objects. These taxa to keep are saved in the following vector :
keepitis <- c(subset(taxnotfoundthisdb, db == 'ncbi')$query)
taxnotfoundbothdb <- subset(taxnotfoundanydb,duplicated(query)) # These are the taxa not found in any database. We will export the list, fill it manually and reimport it.
#write.csv(taxnotfoundbothdb[,-1], "data/derived_data/tax_table/intermediate_files/tax_macrofauna_foliar_taxnotfound_ncbianditis.csv") # Fill cells with info found on internet, save it to x_mod and import it
taxfound_manually <- read.csv("data/derived_data/tax_table/intermediate_files/tax_macrofauna_foliar_taxnotfound_ncbianditis_mod.csv", sep = ";")
taxfound_manually <- taxfound_manually[complete.cases(taxfound_manually$kingdom),-c(9,10)]

# Keep NCBI results in macrofauna_foliar_tax and add ITIS results and manual taxonomy
taxfound_ncbi <- tax_macrofauna_foliar_2[tax_macrofauna_foliar_2$db == 'ncbi' & complete.cases(tax_macrofauna_foliar_2$kingdom), -1]
taxfound_itisonly <- tax_macrofauna_foliar_2[tax_macrofauna_foliar_2$db == 'itis' & tax_macrofauna_foliar_2$query %in% keepitis, ]
tax_macrofauna_foliar_3 <- bind_rows(taxfound_ncbi, taxfound_itisonly[,-1], taxfound_manually) %>% mutate(community = "macrofauna_foliar")

# Replace Animalia (ITIS) par Metazoa (NCBI)
tax_macrofauna_foliar_3[tax_macrofauna_foliar_3 == "Animalia"] <- "Metazoa"

# Replace NA by "unassigned"
tax_macrofauna_foliar_3 <- tax_macrofauna_foliar_3 %>% replace(is.na(.), "unassigned")

# Rename "query" by "finest_name"
tax_macrofauna_foliar_3 <- tax_macrofauna_foliar_3[,-1] %>% rename(finest_name=query)
```                   

## nematodes

```{r}
tax_nematodes_1 <- tidy_nematodes_2 %>% distinct(finest_name)
temp <- gnr_resolve(tax_nematodes_1$finest_name, preferred_data_sources = c(1,3,4,11,12), best_match_only = T) # 1 = CLC, 3 = ITIS, 4 = NCBI, 11 = GBIF, 12 = EOL (https://resolver.globalnames.org/data_sources)
diff <- setdiff(tax_nematodes_1$finest_name, temp$user_supplied_name) 
print(diff)
# diff = 0 so no need for manual cleaning

#write.csv(tax_nematodes_1, "data/derived_data/tax_table/intermediate_files/tax_nematodes_taxizeinput_2024-10-21.csv")
```

```{r, echo=FALSE}
tax_nematodes_2 = NULL
for (i in 1: nrow(tax_nematodes_1)) {
  classes_i <- try(tax_name(sci = tax_nematodes_1$finest_name[i], get = c("kingdom", "phylum", "class", "order", "family", "genus", "species"), db = "both", ask = FALSE))
  if (class(classes_i)=="try-error") {
    Sys.sleep(10)
    classes_i <- try(tax_name(sci = tax_nematodes_1$finest_name[i], get = c("kingdom", "phylum", "class", "order", "family", "genus", "species"), db = "both", ask = FALSE))}
  tax_nematodes_2 <- rbind(tax_nematodes_2, classes_i)
}

#write.csv(tax_nematodes_2, "data/derived_data/tax_table/intermediate_files/tax_nematodes_taxizeoutput.csv")
```

```{r, echo=FALSE}
tax_nematodes_2 <- read.csv("data/derived_data/tax_table/intermediate_files/tax_nematodes_taxizeoutput.csv")
taxnotfoundanydb <- tax_nematodes_2[!complete.cases(tax_nematodes_2$kingdom),] 
taxnotfoundbothdb <- subset(taxnotfoundanydb,duplicated(query)) # All taxa are found with NCBI or ITIS.

# Keep NCBI results in nematodes_tax and add ITIS results and manual taxonomy
tax_nematodes_3 <- tax_nematodes_2[tax_nematodes_2$db == 'ncbi' & complete.cases(tax_nematodes_2$kingdom), -1] %>% mutate(community = "nematodes")

# Replace Animalia (ITIS) par Metazoa (NCBI)
tax_nematodes_3[tax_nematodes_3 == "Animalia"] <- "Metazoa"

# Replace NA by "unassigned"
tax_nematodes_3 <- tax_nematodes_3 %>% replace(is.na(.), "unassigned")

# Rename "query" by "finest_name"
tax_nematodes_3 <- tax_nematodes_3[,-1] %>% rename(finest_name=query)
```

## micro_arthropodes

```{r}
tax_micro_arthropodes_1 <- tidy_micro_arthropodes_2 %>% distinct(finest_name)
temp <- gnr_resolve(tax_micro_arthropodes_1$finest_name, preferred_data_sources = c(1,3,4,11,12), best_match_only = T) # 1 = CLC, 3 = ITIS, 4 = NCBI, 11 = GBIF, 12 = EOL (https://resolver.globalnames.org/data_sources)
diff <- setdiff(tax_micro_arthropodes_1$finest_name, temp$user_supplied_name) 
print(diff)
# Manual cleaning
## NA should be removed
tax_micro_arthropodes_1 <- tax_micro_arthropodes_1[!(tax_micro_arthropodes_1$finest_name %in% "NA"),]
tax_micro_arthropodes_1 <- data.frame(tax_micro_arthropodes_1)
# diff = 0 (OK now)

#write.csv(tax_micro_arthropodes_1, "data/derived_data/tax_table/intermediate_files/tax_micro_arthropodes_taxizeinput_2024-10-21.csv", row.names = F)
```

```{r, echo=FALSE}
tax_micro_arthropodes_2 = NULL
for (i in 1: nrow(tax_micro_arthropodes_1)) {
  classes_i <- try(tax_name(sci = tax_micro_arthropodes_1$finest_name[i], get = c("kingdom", "phylum", "class", "order", "family", "genus", "species"), db = "both", ask = FALSE))
  if (class(classes_i)=="try-error") {
    Sys.sleep(10)
    classes_i <- try(tax_name(sci = tax_micro_arthropodes_1$finest_name[i], get = c("kingdom", "phylum", "class", "order", "family", "genus", "species"), db = "both", ask = FALSE))}
  tax_micro_arthropodes_2 <- rbind(tax_micro_arthropodes_2, classes_i)
}

#write.csv(tax_micro_arthropodes_2, "data/derived_data/tax_table/intermediate_files/tax_micro_arthropodes_taxizeoutput.csv")
```

```{r, echo=FALSE}
tax_micro_arthropodes_2 <- read.csv("data/derived_data/tax_table/intermediate_files/tax_micro_arthropodes_taxizeoutput.csv")
taxnotfoundanydb <- tax_micro_arthropodes_2[!complete.cases(tax_micro_arthropodes_2$kingdom),]
taxnotfoundthisdb <- taxnotfoundanydb %>% group_by(query) %>% filter(n() ==1) # These are the taxa found in only one database (not found in the database in this object = found in the other database in micro_arthropodes_2). Therefore, if we filter NCBI (by default) results in micro_arthropodes_2, we must also keep ITIS results for the taxa with no NCBI results in this objects. These taxa to keep are saved in the following vector :
keepitis <- c(subset(taxnotfoundthisdb, db == 'ncbi')$query)
taxnotfoundbothdb <- subset(taxnotfoundanydb,duplicated(query)) # These are the taxa not found in any database. We will export the list, fill it manually and reimport it.
#write.csv(taxnotfoundbothdb[,-1], "data/derived_data/tax_table/intermediate_files/tax_micro_arthropodes_taxnotfound_ncbianditis.csv") # Fill cells with info found on internet, save it to x_mod and import it
taxfound_manually <- read.csv("data/derived_data/tax_table/intermediate_files/tax_micro_arthropodes_taxnotfound_ncbianditis_mod.csv", sep = ";")
taxfound_manually <- taxfound_manually[complete.cases(taxfound_manually$kingdom),-c(9,10)]

# Keep NCBI results in micro_arthropodes_tax and add ITIS results and manual taxonomy
taxfound_ncbi <- tax_micro_arthropodes_2[tax_micro_arthropodes_2$db == 'ncbi' & complete.cases(tax_micro_arthropodes_2$kingdom), -1]
taxfound_itisonly <- tax_micro_arthropodes_2[tax_micro_arthropodes_2$db == 'itis' & tax_micro_arthropodes_2$query %in% keepitis, ]
tax_micro_arthropodes_3 <- bind_rows(taxfound_ncbi, taxfound_itisonly[,-1], taxfound_manually) %>% mutate(community = "micro_arthropodes")

# Replace Animalia (ITIS) par Metazoa (NCBI)
tax_micro_arthropodes_3[tax_micro_arthropodes_3 == "Animalia"] <- "Metazoa"

# Replace NA by "unassigned"
tax_micro_arthropodes_3 <- tax_micro_arthropodes_3 %>% replace(is.na(.), "unassigned")

# Rename "query" by "finest_name"
tax_micro_arthropodes_3 <- tax_micro_arthropodes_3[,-1] %>% rename(finest_name=query)
```

## microorganisms

### bacteria

```{r}
tax_bacteria_3 <- 
  unique(tidy_bacteria_1[, c("finest_name", "kingdom", "phylum", "class", "order", "family", "genus", "species", "community")])
```

### fungi

```{r}
tax_fungi_3 <- 
  unique(tidy_fungi_1[, c("finest_name", "kingdom", "phylum", "class", "order", "family", "genus", "species", "community")])
```

### protists

```{r}
tax_protists_3 <- 
  unique(tidy_protists_1[, c("finest_name", "kingdom", "phylum", "class", "order", "family", "genus", "species", "community")])
```

### all

```{r}
tax_mo <- rbind(tax_bacteria_3, tax_fungi_3, tax_protists_3)

tax_mo_unique <- tax_mo %>%
  group_by(community) %>%
  summarise(across(kingdom:species, n_distinct, na.rm = TRUE))
#write.csv(tax_mo_unique, "analyses/tracking/tracking_step_B_blast_number_level_2024-10-21.csv", row.names = F)

tax_mo_unique_long <- pivot_longer(tax_mo_unique, cols = c(2:8), names_to = "level", values_to = "taxa_number")
tax_mo_unique_long$level <- ordered(tax_mo_unique_long$level, order_level)

T <- ggplot(tax_mo_unique_long, aes(level, taxa_number, fill=community)) + frame_simple + geom_bar(stat="identity", position="dodge") + theme(axis.text.x = element_text(angle = 45, hjust=1)) + theme(axis.text=element_text(size=8)) + labs(title="Number of distinct BLAST assignations") + scale_y_continuous(labels = scales::comma)
T
#ggsave("analyses/tracking/tracking_step_B_blast_number_level_2024-10-21.png", width=6, height=4.5)
```

## Export files

```{r}
#write.csv(tax_macrofauna_surface_3, "data/derived_data/tax_table/final_files/tax_macrofauna_surface_2024-10-21.csv", row.names = F)

#write.csv(tax_macrofauna_aerial_3, "data/derived_data/tax_table/final_files/tax_macrofauna_aerial_2024-10-21.csv", row.names = F)

#write.csv(tax_macrofauna_foliar_3, "data/derived_data/tax_table/final_files/tax_macrofauna_foliar_2024-10-21.csv", row.names = F)

#write.csv(tax_nematodes_3, "data/derived_data/tax_table/final_files/tax_nematodes_2024-10-21.csv", row.names = F)

#write.csv(tax_micro_arthropodes_3, "data/derived_data/tax_table/final_files/tax_micro_arthropodes_2024-10-21.csv", row.names = F)

#write.csv(tax_bacteria_3, "data/derived_data/tax_table/final_files/tax_bacteria_blast_cleaned_filtered_2024-10-21.csv", row.names = FALSE)
#saveRDS(tax_bacteria_3, "data/derived_data/tax_table/final_files/tax_bacteria_blast_cleaned_filtered_2024-10-21.rds")

#write.csv(tax_fungi_3, "data/derived_data/tax_table/final_files/tax_fungi_blast_cleaned_filtered_2024-10-21.csv", row.names = FALSE)
#saveRDS(tax_fungi_3, "data/derived_data/tax_table/final_files/tax_fungi_blast_cleaned_filtered_2024-10-21.rds")

#write.csv(tax_protists_3, "data/derived_data/tax_table/final_files/tax_protists_blast_cleaned_filtered_2024-10-21.csv", row.names = FALSE)
#saveRDS(tax_protists_3, "data/derived_data/tax_table/final_files/tax_protists_blast_cleaned_filtered_2024-10-21.rds")
```


```{r}
# Re-import tax_table files to check and bind them

tax_macrofauna_surface <- read.csv("data/derived_data/tax_table/final_files/tax_macrofauna_surface_2024-10-21.csv")
tax_macrofauna_aerial <- read.csv("data/derived_data/tax_table/final_files/tax_macrofauna_aerial_2024-10-21.csv")
tax_macrofauna_foliar <- read.csv("data/derived_data/tax_table/final_files/tax_macrofauna_foliar_2024-10-21.csv")
tax_micro_arthropodes <- read.csv("data/derived_data/tax_table/final_files/tax_micro_arthropodes_2024-10-21.csv")
tax_nematodes <- read.csv("data/derived_data/tax_table/final_files/tax_nematodes_2024-10-17.csv")
tax_bacteria <- read.csv("data/derived_data/tax_table/final_files/tax_bacteria_blast_cleaned_filtered_2024-10-21.csv")
tax_fungi <- read.csv("data/derived_data/tax_table/final_files/tax_fungi_blast_cleaned_filtered_2024-10-21.csv")
tax_protists <- read.csv("data/derived_data/tax_table/final_files/tax_protists_blast_cleaned_filtered_2024-10-21.csv")
```

```{r}
tax_ALL <- bind_rows(tax_macrofauna_surface, tax_macrofauna_aerial, tax_macrofauna_foliar, tax_nematodes, tax_micro_arthropodes, tax_bacteria, tax_fungi, tax_protists) # bind all communities in one file

#write.csv(tax_ALL, "data/derived_data/tax_table/final_files/tax_all_2024-10-21.csv", row.names = F)
#write_rds(tax_ALL, "data/derived_data/tax_table/final_files/tax_all_2024-10-21.rds")
```

## Check tracking

### Number of taxa

```{r}
tax_ALL <- read.csv("data/derived_data/tax_table/final_files/tax_all_2024-10-21.csv")
## Filter date if needed
#tidy_ALL <- tidy_ALL[which(tidy_ALL$date == "17/04/2023"),]
#tax_ALL <- tax_ALL[tax_ALL$finest_name %in% tidy_ALL$finest_name, ] ##

# Count the number of distinct finest_names for each community
step_B <- tax_ALL %>% group_by(community) %>% summarise(n_distinct_finest_name = n_distinct(finest_name)) %>% mutate(step = "step_B")

step_B$community <- ordered(step_B$community, order_community)
#write.csv(step_B, "analyses/tracking/number_taxa/tracking_step_B_2024-10-21.csv", row.names = F)

SB <- ggplot(step_B, aes(x = step, y = n_distinct_finest_name, fill = community)) + frame_simple + geom_bar(stat="identity", position="dodge") + labs(title="Number of distinct taxa names at finest level") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + guides(size = F)
SB
#ggsave("analyses/tracking/number_taxa/tracking_step_B_distinct_finest_name_community_2024-10-21.png", width=6, height=4.5)
```

```{r}
tax_ALL_long <- pivot_longer(tax_ALL, cols=c(2:8), names_to = "level", values_to = "taxa")

# Count the number of distinct finest_names for each community and for each level
tax_ALL_long_sum <- tax_ALL_long %>%
  group_by(community, level) %>%
  summarise(n_distinct_name = n_distinct(taxa))
#write.csv(tax_ALL_long_sum, "analyses/tracking/number_taxa/tracking_step_B_distinct_finest_name_communitylevel_long_2024-10-21.csv", row.names = F)

tax_ALL_long_sum$community <- ordered(tax_ALL_long_sum$community, order_community)
tax_ALL_long_sum$level <- ordered(tax_ALL_long_sum$level, order_level)

T1 <- ggplot(tax_ALL_long_sum, aes(level, n_distinct_name, fill=community)) + geom_bar(stat="identity") + frame_simple  + facet_grid(vars(community), scales="free") + labs(title="Number of assigned organisms", subtitle = "Taxonomic assignation",x ="Taxonomic level") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + theme(axis.text.x = element_text(angle = 45, hjust=1))
T1
#ggsave("analyses/tracking/number_taxa/tracking_step_B_distinct_finest_name_communitylevel_2024-10-21.png", width=5.5, height=11)

tax_ALL_long_sum_wide <- pivot_wider(tax_ALL_long_sum, names_from = level, values_from = n_distinct_name) %>% mutate(step = "step_B")
tax_ALL_long_sum_wide <- tax_ALL_long_sum_wide[c(1,5,7,2,6,3,4,8,9)]
#write.csv(tax_ALL_long_sum_wide, "analyses/tracking/number_taxa/tracking_step_B_distinct_finest_name_communitylevel_wide_2024-10-21.csv", row.names = F)
```

### Abundance of taxa

```{r}
# Determine if organisms are assigned at each level (replace taxa name by "assigned", or keep "unassigned")
tax_ALL_au <- tax_ALL # _au = assigned or unassigned
tax_ALL_au[, 2:8] <- apply(tax_ALL_au[, 2:8], 2, function(x) ifelse(x == "unassigned", "unassigned", "assigned"))

# Add abundance data in a tidytax object
tidy_ALL <- read.csv("data/derived_data/tidy_data/tidy_all_2024-10-21.csv")
## Filter date if needed
#tidy_ALL <- tidy_ALL[which(tidy_ALL$date == "17/04/2023"),] ##
tidy_ALL_agg <- aggregate(abundance ~ finest_name, data = tidy_ALL, FUN = sum)
tidytax_ALL_au <- merge(tax_ALL_au, tidy_ALL_agg, by = "finest_name")

# Pivot in a long table format
tidytax_ALL_au_long <- pivot_longer(tidytax_ALL_au, cols=c(2:8), names_to = "level", values_to = "assignation")

# Aggregate abundance by community, level and assignation (assigned or unassigned)
tidytax_ALL_au_long_abund <- aggregate(abundance ~ community*level*assignation, data = tidytax_ALL_au_long, FUN = sum)
#write.csv(tidytax_ALL_au_long_abund, "analyses/tracking/number_taxa/tracking_tidytax_assignation_abund_2024-10-21.csv", row.names = F)

# Summarise the number of distinct finest_names
tidytax_ALL_au_long_distinct <- tidytax_ALL_au_long %>% group_by(community, level, assignation) %>% summarise(n_distinct_finest_name = n_distinct(finest_name))
#write.csv(tidytax_ALL_au_long_distinct, "analyses/tracking/number_taxa/tidytax_assignation_distinct_2024-10-21.csv", row.names = F)

# Order factor levels
tidytax_ALL_au_long$community <- ordered(tidytax_ALL_au_long$community, order_community)
tidytax_ALL_au_long$level <- ordered(tidytax_ALL_au_long$level, order_level)
tidytax_ALL_au_long$assignation <- ordered(tidytax_ALL_au_long$assignation, c("assigned", "unassigned"))

# Plot the abundance of assigned or unassigned organisms in each community and at each taxonomic level
L1 <- ggplot(tidytax_ALL_au_long, aes(level, abundance, fill=assignation)) + geom_bar(stat="identity") + frame_simple + facet_grid(vars(community), scales="free") + labs(title="Abundance of assigned organisms", subtitle="Taxonomic assignation", x ="Taxonomic level", y ="Total abundance") + scale_y_continuous(labels = scales::comma) + theme(axis.text.x = element_text(angle = 45, hjust=1)) + scale_fill_manual(values=c("#a64c69", "#424242")) + geom_col(position = position_stack(reverse = TRUE))
L1
#ggsave("analyses/tracking/number_taxa/tracking_tidytax_assignation_abund_2024-10-21.png", width=5.3, height=11)
```

# C. fun_table

```{r}
# Read the vignette of Gratin
vignette("GratinNavigatoR")

endpoint_url <- "http://129.88.204.79:7200/repositories/gratin-20240723"
sources <- get.sources(endpoint = endpoint_url)
print(sources)
```

```{r}
# Import tax_table
tax_ALL <- read.csv("data/derived_data/tax_table/final_files/tax_all_2024-10-21.csv")
## Filter date if needed
tidy_ALL <- tidy_ALL[which(tidy_ALL$date == "17/04/2023"),]
tax_ALL <- tax_ALL[tax_ALL$finest_name %in% tidy_ALL$finest_name, ] ##

tax_macrofauna_surface <- subset(tax_ALL, community == 'macrofauna_surface')
tax_macrofauna_aerial <- subset(tax_ALL, community == 'macrofauna_aerial')
tax_macrofauna_foliar <- subset(tax_ALL, community == 'macrofauna_foliar')
tax_nematodes <- subset(tax_ALL, community == 'nematodes')
tax_micro_arthropodes <- subset(tax_ALL, community == 'micro_arthropodes')
tax_bacteria <- subset(tax_ALL, community == 'bacteria')
tax_fungi <- subset(tax_ALL, community == 'fungi')
tax_protists <- subset(tax_ALL, community == 'protists')

# Chose the levels to focus on
taxlevels_focus = c("species", "genus", "family")
```

The following parts will generate the assignations for each community and each chosen levels.
The results are exported in two files (one for guilds, one for interactions).

## macrofauna_surface

```{r}
# Guilds
list_macrofauna_surface_guilds <- list()

for (i in seq_along(taxlevels_focus)) {
  taxlevel <- taxlevels_focus[i]
  
  guilds <- get.guilds(sciName = unique(tax_macrofauna_surface[[taxlevel]]), endpoint = endpoint_url)
  list_macrofauna_surface_guilds[[taxlevel]] <- guilds
}

macrofauna_surface_guilds_species <- as.data.frame(list_macrofauna_surface_guilds$species) %>% mutate(level = "species")
macrofauna_surface_guilds_genus <- as.data.frame(list_macrofauna_surface_guilds$genus) %>% mutate(level = "genus")
macrofauna_surface_guilds_family <- as.data.frame(list_macrofauna_surface_guilds$family) %>% mutate(level = "family")

macrofauna_surface_guilds <- rbind(macrofauna_surface_guilds_species, macrofauna_surface_guilds_genus, macrofauna_surface_guilds_family) %>% mutate(community = "macrofauna_surface")

#write.csv(apply(macrofauna_surface_guilds,2,as.character), "data/derived_data/fun_table/fun_macrofauna_surface_guilds_2024-08-21.csv", row.names = F)
#write_rds(apply(macrofauna_surface_guilds,2,as.character), "data/derived_data/fun_table/fun_macrofauna_surface_guilds_2024-08-21.rds")

# Interactions
list_macrofauna_surface_interactions <- list()

for (i in seq_along(taxlevels_focus)) {
  taxlevel <- taxlevels_focus[i]
  
  interactions <- get.interactions(sciName = unique(tax_macrofauna_surface[[taxlevel]]), endpoint = endpoint_url)
  list_macrofauna_surface_interactions[[taxlevel]] <- interactions
}

macrofauna_surface_interactions_species <- as.data.frame(list_macrofauna_surface_interactions$species) %>% mutate(level = "species")
macrofauna_surface_interactions_genus <- as.data.frame(list_macrofauna_surface_interactions$genus) %>% mutate(level = "genus")
macrofauna_surface_interactions_family <- as.data.frame(list_macrofauna_surface_interactions$family) %>% mutate(level = "family")

macrofauna_surface_interactions <- rbind(macrofauna_surface_interactions_species, macrofauna_surface_interactions_genus, macrofauna_surface_interactions_family) %>% mutate(community = "macrofauna_surface")

#write.csv(apply(macrofauna_surface_interactions,2,as.character), "data/derived_data/fun_table/fun_macrofauna_surface_interactions_2024-08-21.csv", row.names = F)
#write_rds(apply(macrofauna_surface_interactions,2,as.character), "data/derived_data/fun_table/fun_macrofauna_surface_interactions_2024-08-21.rds")
```

## macrofauna_aerial

```{r}
# Guilds
list_macrofauna_aerial_guilds <- list()

for (i in seq_along(taxlevels_focus)) {
  taxlevel <- taxlevels_focus[i]
  
  guilds <- get.guilds(sciName = unique(tax_macrofauna_aerial[[taxlevel]]), endpoint = endpoint_url)
  list_macrofauna_aerial_guilds[[taxlevel]] <- guilds
}

macrofauna_aerial_guilds_species <- as.data.frame(list_macrofauna_aerial_guilds$species) %>% mutate(level = "species")
macrofauna_aerial_guilds_genus <- as.data.frame(list_macrofauna_aerial_guilds$genus) %>% mutate(level = "genus")
macrofauna_aerial_guilds_family <- as.data.frame(list_macrofauna_aerial_guilds$family) %>% mutate(level = "family")

macrofauna_aerial_guilds <- rbind(macrofauna_aerial_guilds_species, macrofauna_aerial_guilds_genus, macrofauna_aerial_guilds_family) %>% mutate(community = "macrofauna_aerial")

#write.csv(apply(macrofauna_aerial_guilds,2,as.character), "data/derived_data/fun_table/fun_macrofauna_aerial_guilds_2024-08-21.csv", row.names = F)
#write_rds(apply(macrofauna_aerial_guilds,2,as.character), "data/derived_data/fun_table/fun_macrofauna_aerial_guilds_2024-08-21.rds")

# Interactions
list_macrofauna_aerial_interactions <- list()

for (i in seq_along(taxlevels_focus)) {
  taxlevel <- taxlevels_focus[i]
  
  interactions <- get.interactions(sciName = unique(tax_macrofauna_aerial[[taxlevel]]), endpoint = endpoint_url)
  list_macrofauna_aerial_interactions[[taxlevel]] <- interactions
}

macrofauna_aerial_interactions_species <- as.data.frame(list_macrofauna_aerial_interactions$species) %>% mutate(level = "species")
macrofauna_aerial_interactions_genus <- as.data.frame(list_macrofauna_aerial_interactions$genus) %>% mutate(level = "genus")
macrofauna_aerial_interactions_family <- as.data.frame(list_macrofauna_aerial_interactions$family) %>% mutate(level = "family")

macrofauna_aerial_interactions <- rbind(macrofauna_aerial_interactions_species, macrofauna_aerial_interactions_genus, macrofauna_aerial_interactions_family) %>% mutate(community = "macrofauna_aerial")

#write.csv(apply(macrofauna_aerial_interactions,2,as.character), "data/derived_data/fun_table/fun_macrofauna_aerial_interactions_2024-08-21.csv", row.names = F)
#write_rds(apply(macrofauna_aerial_interactions,2,as.character), "data/derived_data/fun_table/fun_macrofauna_aerial_interactions_2024-08-21.rds")
```

## macrofauna_foliar

```{r}
# Guilds
list_macrofauna_foliar_guilds <- list()

for (i in seq_along(taxlevels_focus)) {
  taxlevel <- taxlevels_focus[i]
  
  guilds <- get.guilds(sciName = unique(tax_macrofauna_foliar[[taxlevel]]), endpoint = endpoint_url)
  list_macrofauna_foliar_guilds[[taxlevel]] <- guilds
}

macrofauna_foliar_guilds_species <- as.data.frame(list_macrofauna_foliar_guilds$species) %>% mutate(level = "species")
macrofauna_foliar_guilds_genus <- as.data.frame(list_macrofauna_foliar_guilds$genus) %>% mutate(level = "genus")
macrofauna_foliar_guilds_family <- as.data.frame(list_macrofauna_foliar_guilds$family) %>% mutate(level = "family")

macrofauna_foliar_guilds <- rbind(macrofauna_foliar_guilds_species, macrofauna_foliar_guilds_genus, macrofauna_foliar_guilds_family) %>% mutate(community = "macrofauna_foliar")

#write.csv(apply(macrofauna_foliar_guilds,2,as.character), "data/derived_data/fun_table/fun_macrofauna_foliar_guilds_2024-08-21.csv", row.names = F)
#write_rds(apply(macrofauna_foliar_guilds,2,as.character), "data/derived_data/fun_table/fun_macrofauna_foliar_guilds_2024-08-21.rds")

# Interactions
list_macrofauna_foliar_interactions <- list()

for (i in seq_along(taxlevels_focus)) {
  taxlevel <- taxlevels_focus[i]
  
  interactions <- get.interactions(sciName = unique(tax_macrofauna_foliar[[taxlevel]]), endpoint = endpoint_url)
  list_macrofauna_foliar_interactions[[taxlevel]] <- interactions
}

macrofauna_foliar_interactions_species <- as.data.frame(list_macrofauna_foliar_interactions$species) %>% mutate(level = "species")
macrofauna_foliar_interactions_genus <- as.data.frame(list_macrofauna_foliar_interactions$genus) %>% mutate(level = "genus")
macrofauna_foliar_interactions_family <- as.data.frame(list_macrofauna_foliar_interactions$family) %>% mutate(level = "family")

macrofauna_foliar_interactions <- rbind(macrofauna_foliar_interactions_species, macrofauna_foliar_interactions_genus, macrofauna_foliar_interactions_family) %>% mutate(community = "macrofauna_foliar")

#write.csv(apply(macrofauna_foliar_interactions,2,as.character), "data/derived_data/fun_table/fun_macrofauna_foliar_interactions_2024-08-21.csv", row.names = F)
#write_rds(apply(macrofauna_foliar_interactions,2,as.character), "data/derived_data/fun_table/fun_macrofauna_foliar_interactions_2024-08-21.rds")
```

## nematodes

```{r}
# Guilds
list_nematodes_guilds <- list()

for (i in seq_along(taxlevels_focus)) {
  taxlevel <- taxlevels_focus[i]
  
  guilds <- get.guilds(sciName = unique(tax_nematodes[[taxlevel]]), endpoint = endpoint_url)
  list_nematodes_guilds[[taxlevel]] <- guilds
}

nematodes_guilds_species <- as.data.frame(list_nematodes_guilds$species) %>% mutate(level = "species")
nematodes_guilds_genus <- as.data.frame(list_nematodes_guilds$genus) %>% mutate(level = "genus")
nematodes_guilds_family <- as.data.frame(list_nematodes_guilds$family) %>% mutate(level = "family")

nematodes_guilds <- rbind(nematodes_guilds_species, nematodes_guilds_genus, nematodes_guilds_family) %>% mutate(community = "nematodes")

#write.csv(apply(nematodes_guilds,2,as.character), "data/derived_data/fun_table/fun_nematodes_guilds_2024-08-21.csv", row.names = F)
#write_rds(apply(nematodes_guilds,2,as.character), "data/derived_data/fun_table/fun_nematodes_guilds_2024-08-21.rds")

# Interactions
list_nematodes_interactions <- list()

for (i in seq_along(taxlevels_focus)) {
  taxlevel <- taxlevels_focus[i]
  
  interactions <- get.interactions(sciName = unique(tax_nematodes[[taxlevel]]), endpoint = endpoint_url)
  list_nematodes_interactions[[taxlevel]] <- interactions
}

nematodes_interactions_species <- as.data.frame(list_nematodes_interactions$species) %>% mutate(level = "species")
nematodes_interactions_genus <- as.data.frame(list_nematodes_interactions$genus) %>% mutate(level = "genus")
nematodes_interactions_family <- as.data.frame(list_nematodes_interactions$family) %>% mutate(level = "family")

nematodes_interactions <- rbind(nematodes_interactions_species, nematodes_interactions_genus, nematodes_interactions_family) %>% mutate(community = "nematodes")

#write.csv(apply(nematodes_interactions,2,as.character), "data/derived_data/fun_table/fun_nematodes_interactions_2024-08-21.csv", row.names = F)
#write_rds(apply(nematodes_interactions,2,as.character), "data/derived_data/fun_table/fun_nematodes_interactions_2024-08-21.rds")
```

## micro_arthropodes

```{r}
# Guilds
list_micro_arthropodes_guilds <- list()

for (i in seq_along(taxlevels_focus)) {
  taxlevel <- taxlevels_focus[i]
  
  guilds <- get.guilds(sciName = unique(tax_micro_arthropodes[[taxlevel]]), endpoint = endpoint_url)
  list_micro_arthropodes_guilds[[taxlevel]] <- guilds
}

micro_arthropodes_guilds_species <- as.data.frame(list_micro_arthropodes_guilds$species) %>% mutate(level = "species")
micro_arthropodes_guilds_genus <- as.data.frame(list_micro_arthropodes_guilds$genus) %>% mutate(level = "genus")
micro_arthropodes_guilds_family <- as.data.frame(list_micro_arthropodes_guilds$family) %>% mutate(level = "family")

micro_arthropodes_guilds <- rbind(micro_arthropodes_guilds_species, micro_arthropodes_guilds_genus, micro_arthropodes_guilds_family) %>% mutate(community = "micro_arthropodes")

#write.csv(apply(micro_arthropodes_guilds,2,as.character), "data/derived_data/fun_table/fun_micro_arthropodes_guilds_2024-08-21.csv", row.names = F)
#write_rds(apply(micro_arthropodes_guilds,2,as.character), "data/derived_data/fun_table/fun_micro_arthropodes_guilds_2024-08-21.rds")

# Interactions
list_micro_arthropodes_interactions <- list()

for (i in seq_along(taxlevels_focus)) {
  taxlevel <- taxlevels_focus[i]
  
  interactions <- get.interactions(sciName = unique(tax_micro_arthropodes[[taxlevel]]), endpoint = endpoint_url)
  list_micro_arthropodes_interactions[[taxlevel]] <- interactions
}

micro_arthropodes_interactions_species <- as.data.frame(list_micro_arthropodes_interactions$species) %>% mutate(level = "species")
micro_arthropodes_interactions_genus <- as.data.frame(list_micro_arthropodes_interactions$genus) %>% mutate(level = "genus")
micro_arthropodes_interactions_family <- as.data.frame(list_micro_arthropodes_interactions$family) %>% mutate(level = "family")

micro_arthropodes_interactions <- rbind(micro_arthropodes_interactions_species, micro_arthropodes_interactions_genus, micro_arthropodes_interactions_family) %>% mutate(community = "micro_arthropodes")

#write.csv(apply(micro_arthropodes_interactions,2,as.character), "data/derived_data/fun_table/fun_micro_arthropodes_interactions_2024-08-21.csv", row.names = F)
#write_rds(apply(micro_arthropodes_interactions,2,as.character), "data/derived_data/fun_table/fun_micro_arthropodes_interactions_2024-08-21.rds")
```

## microorganisms

Since the list of taxa are long for microorganisms, we need to split them first.

### bacteria

```{r}
# Split taxa in 10 lists
unique_species <- unique(tax_bacteria$species)
n <- length(unique_species)
size <- ceiling(n/10)
lists_species <- split(unique_species, ceiling(seq_along(unique_species)/size))

unique_genus <- unique(tax_bacteria$genus)
n <- length(unique_genus)
size <- ceiling(n/10)
lists_genus <- split(unique_genus, ceiling(seq_along(unique_genus)/size))

unique_family <- unique(tax_bacteria$family)
n <- length(unique_family)
size <- ceiling(n/10)
lists_family <- split(unique_family, ceiling(seq_along(unique_family)/size))

unique_order <- unique(tax_bacteria$order)
n <- length(unique_order)
size <- ceiling(n/10)
lists_order <- split(unique_order, ceiling(seq_along(unique_order)/size))
```

```{r}
# Guilds
list_bacteria_guilds_species <- list()
list_bacteria_guilds_genus <- list()
list_bacteria_guilds_family <- list()
list_bacteria_guilds_order <- list()

for (i in 1:10) {
  guilds_species <- get.guilds(sciName = lists_species[[i]], endpoint = endpoint_url)
  list_bacteria_guilds_species[[i]] <- guilds_species
  
  guilds_genus <- get.guilds(sciName = lists_genus[[i]], endpoint = endpoint_url)
  list_bacteria_guilds_genus[[i]] <- guilds_genus
  
  guilds_family <- get.guilds(sciName = lists_family[[i]], endpoint = endpoint_url)
  list_bacteria_guilds_family[[i]] <- guilds_family
  
  guilds_order <- get.guilds(sciName = lists_order[[i]], endpoint = endpoint_url)
  list_bacteria_guilds_order[[i]] <- guilds_order
}

bacteria_guilds_species <- do.call(rbind.data.frame, list_bacteria_guilds_species) %>% mutate(level = "species")
bacteria_guilds_genus <- do.call(rbind.data.frame, list_bacteria_guilds_genus) %>% mutate(level = "genus")
bacteria_guilds_family <- do.call(rbind.data.frame, list_bacteria_guilds_family) %>% mutate(level = "family")
bacteria_guilds_order <- do.call(rbind.data.frame, list_bacteria_guilds_order) %>% mutate(level = "order")

bacteria_guilds <- rbind(bacteria_guilds_species, bacteria_guilds_genus, bacteria_guilds_family, bacteria_guilds_order)  %>% mutate(community = "bacteria")

#write.csv(apply(bacteria_guilds,2,as.character), "data/derived_data/fun_table/fun_bacteria_guilds_2024-08-21.csv", row.names = F)
#write_rds(apply(bacteria_guilds,2,as.character), "data/derived_data/fun_table/fun_bacteria_guilds_2024-08-21.rds")

# Interactions
list_bacteria_interactions_species <- list()
list_bacteria_interactions_genus <- list()
list_bacteria_interactions_family <- list()
list_bacteria_interactions_order <- list()

for (i in 1:10) {
  interactions_species <- get.interactions(sciName = lists_species[[i]], endpoint = endpoint_url)
  list_bacteria_interactions_species[[i]] <- interactions_species
  
  interactions_genus <- get.interactions(sciName = lists_genus[[i]], endpoint = endpoint_url)
  list_bacteria_interactions_genus[[i]] <- interactions_genus
  
  interactions_family <- get.interactions(sciName = lists_family[[i]], endpoint = endpoint_url)
  list_bacteria_interactions_family[[i]] <- interactions_family
  
  interactions_order <- get.interactions(sciName = lists_order[[i]], endpoint = endpoint_url)
  list_bacteria_interactions_order[[i]] <- interactions_order
}

bacteria_interactions_species <- do.call(rbind.data.frame, list_bacteria_interactions_species) %>% mutate(level = "species")
bacteria_interactions_genus <- do.call(rbind.data.frame, list_bacteria_interactions_genus) %>% mutate(level = "genus")
bacteria_interactions_family <- do.call(rbind.data.frame, list_bacteria_interactions_family) %>% mutate(level = "family")
bacteria_interactions_order <- do.call(rbind.data.frame, list_bacteria_interactions_order) %>% mutate(level = "order")

bacteria_interactions <- rbind(bacteria_interactions_species, bacteria_interactions_genus, bacteria_interactions_family, bacteria_interactions_order) %>% mutate(community = "bacteria")

#write_delim(bacteria_interactions, "data/derived_data/fun_table/fun_bacteria_interactions_2024-08-21.csv", delim=",")
#write_rds(apply(bacteria_interactions,2,as.character), "data/derived_data/fun_table/fun_bacteria_interactions_2024-08-21.rds")
```

### fungi

```{r}
# Split taxa in 9 lists
unique_species <- unique(tax_fungi$species)
n <- length(unique_species)
size <- ceiling(n/9)
lists_species <- split(unique_species, ceiling(seq_along(unique_species)/size))

unique_genus <- unique(tax_fungi$genus)
n <- length(unique_genus)
size <- ceiling(n/9)
lists_genus <- split(unique_genus, ceiling(seq_along(unique_genus)/size))

unique_family <- unique(tax_fungi$family)
n <- length(unique_family)
size <- ceiling(n/9)
lists_family <- split(unique_family, ceiling(seq_along(unique_family)/size))

unique_order <- unique(tax_fungi$order)
n <- length(unique_order)
size <- ceiling(n/9)
lists_order <- split(unique_order, ceiling(seq_along(unique_order)/size))
```

```{r}
# Guilds
list_fungi_guilds_species <- list()
list_fungi_guilds_genus <- list()
list_fungi_guilds_family <- list()
list_fungi_guilds_order <- list()

for (i in 1:9) {
  guilds_species <- get.guilds(sciName = lists_species[[i]], endpoint = endpoint_url)
  list_fungi_guilds_species[[i]] <- guilds_species
  
  guilds_genus <- get.guilds(sciName = lists_genus[[i]], endpoint = endpoint_url)
  list_fungi_guilds_genus[[i]] <- guilds_genus
  
  guilds_family <- get.guilds(sciName = lists_family[[i]], endpoint = endpoint_url)
  list_fungi_guilds_family[[i]] <- guilds_family
  
  guilds_order <- get.guilds(sciName = lists_order[[i]], endpoint = endpoint_url)
  list_fungi_guilds_order[[i]] <- guilds_order
}

fungi_guilds_species <- do.call(rbind.data.frame, list_fungi_guilds_species) %>% mutate(level = "species")
fungi_guilds_genus <- do.call(rbind.data.frame, list_fungi_guilds_genus) %>% mutate(level = "genus")
fungi_guilds_family <- do.call(rbind.data.frame, list_fungi_guilds_family) %>% mutate(level = "family")
fungi_guilds_order <- do.call(rbind.data.frame, list_fungi_guilds_order) %>% mutate(level = "order")

fungi_guilds <- rbind(fungi_guilds_species, fungi_guilds_genus, fungi_guilds_family, fungi_guilds_order) %>% mutate(community = "fungi")

#write.csv(apply(fungi_guilds,2,as.character), "data/derived_data/fun_table/fun_fungi_guilds_2024-08-21.csv", row.names = F)
#write_rds(apply(fungi_guilds,2,as.character), "data/derived_data/fun_table/fun_fungi_guilds_2024-08-21.rds")

# Interactions
list_fungi_interactions_species <- list()
list_fungi_interactions_genus <- list()
list_fungi_interactions_family <- list()
list_fungi_interactions_order <- list()

for (i in 1:9) {
  interactions_species <- get.interactions(sciName = lists_species[[i]], endpoint = endpoint_url)
  list_fungi_interactions_species[[i]] <- interactions_species
  
  interactions_genus <- get.interactions(sciName = lists_genus[[i]], endpoint = endpoint_url)
  list_fungi_interactions_genus[[i]] <- interactions_genus
  
  interactions_family <- get.interactions(sciName = lists_family[[i]], endpoint = endpoint_url)
  list_fungi_interactions_family[[i]] <- interactions_family
  
  interactions_order <- get.interactions(sciName = lists_order[[i]], endpoint = endpoint_url)
  list_fungi_interactions_order[[i]] <- interactions_order
}

fungi_interactions_species <- do.call(rbind.data.frame, list_fungi_interactions_species) %>% mutate(level = "species")
fungi_interactions_genus <- do.call(rbind.data.frame, list_fungi_interactions_genus) %>% mutate(level = "genus")
fungi_interactions_family <- do.call(rbind.data.frame, list_fungi_interactions_family) %>% mutate(level = "family")
fungi_interactions_order <- do.call(rbind.data.frame, list_fungi_interactions_order) %>% mutate(level = "order")

fungi_interactions <- rbind(fungi_interactions_species, fungi_interactions_genus, fungi_interactions_family, fungi_interactions_order) %>% mutate(community = "fungi")

#write.csv(apply(fungi_interactions,2,as.character), "data/derived_data/fun_table/fun_fungi_interactions_2024-08-21.csv", row.names = F)
#write_rds(apply(fungi_interactions,2,as.character), "data/derived_data/fun_table/fun_fungi_interactions_2024-08-21.rds")
```

### protists

```{r}
# Split taxa in 10 lists
unique_species <- unique(tax_protists$species)
n <- length(unique_species)
size <- ceiling(n/3)
lists_species <- split(unique_species, ceiling(seq_along(unique_species)/size))

unique_genus <- unique(tax_protists$genus)
n <- length(unique_genus)
size <- ceiling(n/3)
lists_genus <- split(unique_genus, ceiling(seq_along(unique_genus)/size))

unique_family <- unique(tax_protists$family)
n <- length(unique_family)
size <- ceiling(n/3)
lists_family <- split(unique_family, ceiling(seq_along(unique_family)/size))

unique_order <- unique(tax_protists$order)
n <- length(unique_order)
size <- ceiling(n/3)
lists_order <- split(unique_order, ceiling(seq_along(unique_order)/size))
```

```{r}
# Guilds
list_protists_guilds_species <- list()
list_protists_guilds_genus <- list()
list_protists_guilds_family <- list()
list_protists_guilds_order <- list()

for (i in 1:3) {
  guilds_species <- get.guilds(sciName = lists_species[[i]], endpoint = endpoint_url)
  list_protists_guilds_species[[i]] <- guilds_species
  
  guilds_genus <- get.guilds(sciName = lists_genus[[i]], endpoint = endpoint_url)
  list_protists_guilds_genus[[i]] <- guilds_genus
  
  guilds_family <- get.guilds(sciName = lists_family[[i]], endpoint = endpoint_url)
  list_protists_guilds_family[[i]] <- guilds_family
  
  guilds_order <- get.guilds(sciName = lists_order[[i]], endpoint = endpoint_url)
  list_protists_guilds_order[[i]] <- guilds_order
}

protists_guilds_species <- do.call(rbind.data.frame, list_protists_guilds_species) %>% mutate(level = "species")
protists_guilds_genus <- do.call(rbind.data.frame, list_protists_guilds_genus) %>% mutate(level = "genus")
protists_guilds_family <- do.call(rbind.data.frame, list_protists_guilds_family) %>% mutate(level = "family")
protists_guilds_order <- do.call(rbind.data.frame, list_protists_guilds_order) %>% mutate(level = "order")

protists_guilds <- rbind(protists_guilds_species, protists_guilds_genus, protists_guilds_family, protists_guilds_order)  %>% mutate(community = "protists")

#write.csv(apply(protists_guilds,2,as.character), "data/derived_data/fun_table/fun_protists_guilds_2024-08-21.csv", row.names = F)
#write_rds(apply(protists_guilds,2,as.character), "data/derived_data/fun_table/fun_protists_guilds_2024-08-21.rds")

# Interactions
list_protists_interactions_species <- list()
list_protists_interactions_genus <- list()
list_protists_interactions_family <- list()
list_protists_interactions_order <- list()

for (i in 1:3) {
  interactions_species <- get.interactions(sciName = lists_species[[i]], endpoint = endpoint_url)
  list_protists_interactions_species[[i]] <- interactions_species
  
  interactions_genus <- get.interactions(sciName = lists_genus[[i]], endpoint = endpoint_url)
  list_protists_interactions_genus[[i]] <- interactions_genus
  
  interactions_family <- get.interactions(sciName = lists_family[[i]], endpoint = endpoint_url)
  list_protists_interactions_family[[i]] <- interactions_family
  
  interactions_order <- get.interactions(sciName = lists_order[[i]], endpoint = endpoint_url)
  list_protists_interactions_order[[i]] <- interactions_order
}

protists_interactions_species <- do.call(rbind.data.frame, list_protists_interactions_species) %>% mutate(level = "species")
protists_interactions_genus <- do.call(rbind.data.frame, list_protists_interactions_genus) %>% mutate(level = "genus")
protists_interactions_family <- do.call(rbind.data.frame, list_protists_interactions_family) %>% mutate(level = "family")
protists_interactions_order <- do.call(rbind.data.frame, list_protists_interactions_order) %>% mutate(level = "order")

protists_interactions <- rbind(protists_interactions_species, protists_interactions_genus, protists_interactions_family, protists_interactions_order) %>% mutate(community = "protists")

#write.csv(apply(protists_interactions,2,as.character), "data/derived_data/fun_table/fun_protists_interactions_2024-08-21.csv", row.names = F)
#write_rds(apply(protists_interactions,2,as.character), "data/derived_data/fun_table/fun_protists_interactions_2024-08-21.rds")
```

## Export files

cf chuncks above to export fun_table by community

```{r}
# Re-import fun_table files to check and bind them

fun_guilds_macrofauna_surface <- read.csv("data/derived_data/fun_table/fun_macrofauna_surface_guilds_2024-08-21.csv")
fun_guilds_macrofauna_aerial <- read.csv("data/derived_data/fun_table/fun_macrofauna_aerial_guilds_2024-08-21.csv")
fun_guilds_macrofauna_foliar <- read.csv("data/derived_data/fun_table/fun_macrofauna_foliar_guilds_2024-08-21.csv")
fun_guilds_nematodes <- read.csv("data/derived_data/fun_table/fun_nematodes_guilds_2024-08-21.csv")
fun_guilds_micro_arthropodes <- read.csv("data/derived_data/fun_table/fun_micro_arthropodes_guilds_2024-08-21.csv")
fun_guilds_bacteria <- read.csv("data/derived_data/fun_table/fun_bacteria_guilds_2024-08-21.csv")
fun_guilds_fungi <- read.csv("data/derived_data/fun_table/fun_fungi_guilds_2024-08-21.csv")
fun_guilds_protists <- read.csv("data/derived_data/fun_table/fun_protists_guilds_2024-08-21.csv")

fun_guilds_ALL <- bind_rows(fun_guilds_macrofauna_surface, fun_guilds_macrofauna_aerial, fun_guilds_macrofauna_foliar, fun_guilds_micro_arthropodes, fun_guilds_nematodes, fun_guilds_bacteria, fun_guilds_fungi, fun_guilds_protists) # bind all communities in one file

#write.csv(fun_guilds_ALL, "data/derived_data/fun_table/fun_all_guilds_2024-10-21.csv", row.names = F)
#write_rds(fun_guilds_ALL, "data/derived_data/fun_table/fun_all_guilds_2024-10-21.rds")

fun_interactions_macrofauna_surface <- read.csv("data/derived_data/fun_table/fun_macrofauna_surface_interactions_2024-08-21.csv")
fun_interactions_macrofauna_aerial <- read.csv("data/derived_data/fun_table/fun_macrofauna_aerial_interactions_2024-08-21.csv")
fun_interactions_macrofauna_foliar <- read.csv("data/derived_data/fun_table/fun_macrofauna_foliar_interactions_2024-08-21.csv")
fun_interactions_nematodes <- read.csv("data/derived_data/fun_table/fun_nematodes_interactions_2024-08-21.csv")
fun_interactions_micro_arthropodes <- read.csv("data/derived_data/fun_table/fun_micro_arthropodes_interactions_2024-08-21.csv")
fun_interactions_bacteria <- read.csv("data/derived_data/fun_table/fun_bacteria_interactions_2024-08-21.csv")
fun_interactions_fungi <- read.csv("data/derived_data/fun_table/fun_fungi_interactions_2024-08-21.csv")
fun_interactions_protists <- read.csv("data/derived_data/fun_table/fun_protists_interactions_2024-08-21.csv")

fun_interactions_ALL <- bind_rows(fun_interactions_macrofauna_surface, fun_interactions_macrofauna_aerial, fun_interactions_macrofauna_foliar, fun_interactions_micro_arthropodes, fun_interactions_nematodes, fun_interactions_bacteria, fun_interactions_fungi, fun_interactions_protists) # bind all communities in one file

#write.csv(fun_interactions_ALL, "data/derived_data/fun_table/fun_all_interactions_2024-10-21.csv", row.names = F)
#write_rds(fun_interactions_ALL, "data/derived_data/fun_table/fun_all_interactions_2024-10-21.rds")
```

## Check tracking

```{r}
# Import fun tables
fun_guilds_ALL <- read.csv("data/derived_data/fun_table/fun_all_guilds_2024-10-21.csv")
fun_interactions_ALL <- read.csv("data/derived_data/fun_table/fun_all_interactions_2024-10-21.csv")

## Filter date if needed
#tidy_ALL <- tidy_ALL[which(tidy_ALL$date == "17/04/2023"),]
#tax_ALL <- tax_ALL[tax_ALL$finest_name %in% tidy_ALL$finest_name, ]
#valeurs_tax <- unique(unlist(valeurs_tax))
#fun_guilds_ALL <- fun_guilds_ALL[fun_guilds_ALL$queryName %in% valeurs_tax, ]
#fun_interactions_ALL <- fun_interactions_ALL[fun_interactions_ALL$queryName %in% valeurs_tax, ] ##
```

### Number of taxa with matches

The following chunks are used to determine the number of distinct taxa matching
*guilds or interactions
*in queryName, matchName or exact_match (different versions of matches)

```{r}
# Summarise metrics
step_C_guilds <- fun_guilds_ALL %>% group_by(community, level) %>% summarise(n_distinct_queryName = n_distinct(queryName), n_distinct_matchName = n_distinct(matchName), n_distinct_exact_match = n_distinct(queryName [queryName == matchName])) %>% mutate(fun = "guilds", step = "step_C")

step_C_interactions <- fun_interactions_ALL %>% group_by(community, level) %>% summarise(n_distinct_queryName = n_distinct(queryName), n_distinct_matchName = n_distinct(matchName), n_distinct_exact_match = n_distinct(queryName [queryName == matchName])) %>% mutate(fun = "interactions", step = "step_C")

# Bind and export metrics
step_C <- rbind(step_C_guilds, step_C_interactions)
#write.csv(step_C, "analyses/tracking/number_taxa/tracking_step_C_2024-10-21.csv", row.names = F)

# Order factor levels
step_C$community <- ordered(step_C$community, order_community)
step_C$level <- ordered(step_C$level, order_level)

# Plot n_distinct
M1 <- ggplot(step_C, aes(x = level, y = n_distinct_queryName, fill = community)) + frame_simple + geom_bar(stat="identity", position = position_dodge2(preserve = "single")) + labs(title="Number of distinct assigned taxa") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + guides(size = F) + facet_grid("fun", scales="free")
M1
#ggsave("analyses/tracking/number_taxa/tracking_step_C_distinct_queryName_2024-10-21.png", width=5, height=4)

M2 <- ggplot(step_C, aes(x = level, y = n_distinct_matchName, fill = community)) + frame_simple + geom_bar(stat="identity", position = position_dodge2(preserve = "single")) + labs(title="Number of distinct taxa matching assigned taxa") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + guides(size = F) + facet_grid("fun", scales="free")
M2
#ggsave("analyses/tracking/number_taxa/tracking_step_C_distinct_matchName_2024-10-21.png", width=5, height=4)

M3 <- ggplot(step_C, aes(x = level, y = n_distinct_exact_match, fill = community)) + frame_simple + geom_bar(stat="identity", position = position_dodge2(preserve = "single")) + labs(title="Number of distinct taxa matching exactly assigned taxa") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + guides(size = F) + facet_grid("fun", scales="free")
M3
#ggsave("analyses/tracking/number_taxa/tracking_step_C_distinct_exact_match_2024-10-21.png", width=5, height=4)
```

```{r}
L4_guilds <- ggplot(step_C[which(step_C$fun == "guilds"),], aes(level, n_distinct_exact_match, fill=community)) + geom_bar(stat="identity") + frame_simple  + facet_grid(vars(community), scales="free") + labs(title = "Number of assigned organisms", subtitle="Functional assignation (guilds)", x ="Taxonomic level", y ="Number of distinct taxa names (exact match)") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + theme(axis.text.x = element_text(angle = 45, hjust=1))
L4_guilds
#ggsave("analyses/tracking/number_taxa/tracking_tidyfun_assignation_guilds_distinct_2024-10-21.png", width=4.5, height=11)

L4_interactions <- ggplot(step_C[which(step_C$fun == "interactions"),], aes(level, n_distinct_exact_match, fill=community)) + geom_bar(stat="identity") + frame_simple + facet_grid(vars(community), scales="free") + labs(title="Number of assigned organisms", subtitle="Functional assignation (interactions)", x ="Taxonomic level", y ="Number of distinct taxa names (exact match)") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + theme(axis.text.x = element_text(angle = 45, hjust=1)) + scale_fill_brewer(palette = "Set2") + theme(axis.text.x = element_text(angle = 45, hjust=1))
L4_interactions
#ggsave("analyses/tracking/number_taxa/tracking_tidyfun_assignation_interactions_distinct_2024-10-21.png", width=4.5, height=11)
```

```{r}
L5_tax <- T1 + theme(legend.position = "none", title.position = "none")
L5_fun_guilds <- L4_guilds + labs(title = "", y = "") + theme(legend.position = "none", title.position = "none")
L5_fun_interactions <- L4_interactions + labs(title = "", y = "")

L5_all <- plot_grid(L5_tax, L5_fun_guilds, L5_fun_interactions, labels = c('   A', '   B', '   C'), ncol=3, rel_widths = c(1, 0.65, 1.1))
L5_all
#ggsave("analyses/tracking/number_taxa/tracking_taxfun_assignation_distinct_2024-10-21.png", width=11, height=11)

#svglite(file="analyses/tracking/number_taxa/tracking_taxfun_assignation_distinct_2024-10-21.svg", width = 11, height = 11, bg = "white", pointsize = 16)
L5_all
#dev.off()
```

### Number of functional groups

The following chunk is used to determine the number of distinct
*guilds or interactions
*in queryName, matchName or exact_match (different versions of matches)

```{r}
# Summarise metrics for guilds and interactions assignations (guildName, interactionName and ressourceName)
step_C_guildName <- fun_guilds_ALL %>% group_by(community, level) %>% summarise(n_distinct_guildName = n_distinct(guildName)) %>% mutate(fun = "guilds", step = "step_C")

step_C_interactionName <- fun_interactions_ALL %>% group_by(community, level) %>% summarise(n_distinct_interactionName = n_distinct(interactionName), n_distinct_resourceName = n_distinct(resourceName)) %>% mutate(fun = "interactions", step = "step_C")

# Export metrics
#write.csv(step_C_guildName, "analyses/tracking/number_groups/tracking_step_C_guildName_2024-10-21.csv", row.names = F)
#write.csv(step_C_interactionName, "analyses/tracking/number_groups/tracking_step_C_interactionName_2024-10-21.csv", row.names = F)

# Order factor levels
step_C_guildName$community <- ordered(step_C_guildName$community, order_community)
step_C_guildName$level <- ordered(step_C_guildName$level, order_level)

step_C_interactionName$community <- ordered(step_C_interactionName$community, order_community)
step_C_interactionName$level <- ordered(step_C_interactionName$level, order_level)

# Plot n_distinct
S1 <- ggplot(step_C_guildName, aes(x = level, y = n_distinct_guildName, fill = community)) + frame_simple + geom_bar(stat="identity", position = position_dodge2(preserve = "single")) + labs(title="Number of distinct guilds") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + guides(size = F)
S1
#ggsave("analyses/tracking/number_groups/tracking_step_C_guildName_2024-10-21.png", width=5, height=3.5)

S2 <- ggplot(step_C_interactionName, aes(x = level, y = n_distinct_interactionName, fill = community)) + frame_simple + geom_bar(stat="identity", position = position_dodge2(preserve = "single")) + labs(title="Number of distinct interactions") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + guides(size = F)
S2
#ggsave("analyses/tracking/number_groups/tracking_step_C_interactionName_2024-10-21.png", width=5, height=3.5)

S3 <- ggplot(step_C_interactionName, aes(x = level, y = n_distinct_resourceName, fill = community)) + frame_simple + geom_bar(stat="identity", position = position_dodge2(preserve = "single")) + labs(title="Number of distinct resources") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + guides(size = F)
S3
#ggsave("analyses/tracking/number_groups/tracking_step_C_resourceName_2024-10-21.png", width=5, height=3.5)
```

### Percentage of taxa with matches (in number)

The following chunks are used to determine the percentages of assigned taxa (in terms of distinct taxa names)
*to guilds or interactions ("fun")
*in queryName, matchName or exact_match ("versions")

```{r}
# Import reference (step B)
step_B <- read.csv("analyses/tracking/number_taxa/tracking_step_B_distinct_finest_name_communitylevel_long_2024-10-21.csv")
```

```{r}
## queryName ##

# Calculate the percentage of assigned queryName to guilds
step_C_perc_queryName <- step_C[,-7] %>% inner_join(step_B, by=c("community","level")) %>% mutate(perc_queryName = n_distinct_queryName*100/n_distinct_name)

# Order factor levels
step_C_perc_queryName$community <- ordered(step_C_perc_queryName$community, order_community)
step_C_perc_queryName$level <- ordered(step_C_perc_queryName$level, order_level)

# Pivot to a wider format
step_C_perc_queryName_wide <- pivot_wider(step_C_perc_queryName[,-c(3,4,5,7)], names_from = level, values_from = perc_queryName)
step_C_perc_queryName_wide <- step_C_perc_queryName_wide[,c(1,5,3,4,6,2)] %>% mutate_all(~replace(., is.na(.), 0)) %>% mutate_if(is.numeric, round, digits = 2) %>% mutate(version = "queryName")

## matchName ##

# Calculate the percentage of assigned matchName to guilds
step_C_perc_matchName <- step_C[,-7] %>% inner_join(step_B, by=c("community","level")) %>% mutate(perc_matchName = n_distinct_matchName*100/n_distinct_name)

# Order factor levels
step_C_perc_matchName$community <- ordered(step_C_perc_matchName$community, order_community)
step_C_perc_matchName$level <- ordered(step_C_perc_matchName$level, order_level)

# Pivot to a wider format
step_C_perc_matchName_wide <- pivot_wider(step_C_perc_matchName[,-c(3,4,5,7)], names_from = level, values_from = perc_matchName)
step_C_perc_matchName_wide <- step_C_perc_matchName_wide[,c(1,5,3,4,6,2)] %>% mutate_all(~replace(., is.na(.), 0)) %>% mutate_if(is.numeric, round, digits = 2) %>% mutate(version = "matchName")

## exact_match ##

# Calculate the percentage of assigned exact_match to guilds
step_C_perc_exact_match <- step_C[,-7] %>% inner_join(step_B, by=c("community","level")) %>% mutate(perc_exact_match = n_distinct_exact_match*100/n_distinct_name)

# Order factor levels
step_C_perc_exact_match$community <- ordered(step_C_perc_exact_match$community, order_community)
step_C_perc_exact_match$level <- ordered(step_C_perc_exact_match$level, order_level)

# Pivot to a wider format
step_C_perc_exact_match_wide <- pivot_wider(step_C_perc_exact_match[,-c(3,4,5,7)], names_from = level, values_from = perc_exact_match)
step_C_perc_exact_match_wide <- step_C_perc_exact_match_wide[,c(1,5,3,4,6,2)] %>% mutate_all(~replace(., is.na(.), 0)) %>% mutate_if(is.numeric, round, digits = 2) %>% mutate(version = "exact_match")

# Bind and export percentages
step_C <- rbind(step_C_perc_queryName_wide, step_C_perc_matchName_wide, step_C_perc_exact_match_wide)
#write.csv(step_C, "analyses/tracking/percentage_number/tracking_step_C_perc_2024-10-21.csv", row.names = F)

# Pivot to a long format
step_C_long <- pivot_longer(step_C, cols=c(2:5), names_to = "level", values_to = "perc")

# Order factor levels
step_C_long$version <- ordered(step_C_long$version, c("queryName", "matchName", "exact_match"))

# Plot percentages
P1 <- ggplot(step_C_long[which(step_C_long$version == "queryName"),], aes(x = level, y = perc, fill = community)) + frame_simple + geom_bar(stat="identity", position = position_dodge2(preserve = "single")) + labs(title="Percentage of assigned taxa") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + guides(size = F) + facet_grid("fun", scales="free") + ylim(0, 100) + scale_x_discrete(limits=c("order","family","genus","species"))
P1
#ggsave("analyses/tracking/percentage_number/tracking_step_C_perc_queryName_2024-10-21.png", width=5, height=4)

P2 <- ggplot(step_C_long[which(step_C_long$version == "matchName"),], aes(x = level, y = perc, fill = community)) + frame_simple + geom_bar(stat="identity", position = position_dodge2(preserve = "single")) + labs(title="Percentage of taxa matching assigned taxa") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + guides(size = F) + facet_grid("fun", scales="free") + scale_x_discrete(limits=c("order","family","genus","species"))
P2
#ggsave("analyses/tracking/percentage_number/tracking_step_C_perc_matchName_2024-10-21.png", width=5, height=4)

P3 <- ggplot(step_C_long[which(step_C_long$version == "exact_match"),], aes(x = level, y = perc, fill = community)) + frame_simple + geom_bar(stat="identity", position = position_dodge2(preserve = "single")) + labs(title="Percentage of taxa matching exactly assigned taxa") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + guides(size = F) + facet_grid("fun", scales="free") + ylim(0, 100) + scale_x_discrete(limits=c("order","family","genus","species"))
P3
#ggsave("analyses/tracking/percentage_number/tracking_step_C_perc_exact_match_2024-10-21.png", width=5, height=4)
```

### Abundance of taxa with matches

The following chunks are used to determine the abundance of assigned taxa at the best levels (the level with the highest percentage of matches in terms of distinct taxa number) for each community
*to guilds or interactions

```{r}
# Import tax
tax_ALL <- read.csv("data/derived_data/tax_table/final_files/tax_all_2024-10-21.csv")
## Filter date if needed
#tidy_ALL <- tidy_ALL[which(tidy_ALL$date == "17/04/2023"),]
#tax_ALL <- tax_ALL[tax_ALL$finest_name %in% tidy_ALL$finest_name, ] ##

# Determine the level with the highest percentage of assignation
step_C_best <- step_C %>%
  ungroup() %>%
  mutate(best_level = apply(select(., 2:5), 1, function(x) {
    colnames(select(., 2:5))[which.max(x)]
  }))
#write.csv(step_C_best, "analyses/tracking/percentage_abundance/tracking_assignation_perc_abund_2024-10-21.csv", row.names = F)
```

```{r}
## Guilds ##

# Filter Gratin results at the best level
step_C_best_guilds_matchName <- step_C_best %>% filter(fun == "guilds" & version == "matchName")
fun_guilds_ALL_best <- fun_guilds_ALL %>%
  inner_join(step_C_best_guilds_matchName %>% select(community, best_level), by = "community") %>%
  filter(level == best_level)

# Create the list of taxa in the Gratin results
match_guilds <- unique(fun_guilds_ALL_best$matchName)

# Determine if organisms are assigned at each level (replace taxa name by "assigned" if found in the match_guilds list, or "unassigned" if not)
fun_guilds_ALL_au_match <- tax_ALL[,-c(2:4)] %>% mutate(
  order = ifelse(order %in% match_guilds, "assigned", "unassigned"),
  family = ifelse(family %in% match_guilds, "assigned", "unassigned"),
  genus = ifelse(genus %in% match_guilds, "assigned", "unassigned"),
  species = ifelse(species %in% match_guilds, "assigned", "unassigned"))

# Add abundance data in a tidyfun object
tidy_ALL <- read.csv("data/derived_data/tidy_data/tidy_all_2024-10-21.csv")
tidy_ALL <- tidy_ALL[which(tidy_ALL$date == "17/04/2023"),] # Filter date if needed
tidy_ALL_agg <- aggregate(abundance ~ finest_name, data = tidy_ALL, FUN = sum)
tidyfun_ALL_au_guilds <- merge(fun_guilds_ALL_au_match, tidy_ALL_agg, by = "finest_name")

# Add a column "any_level" to specify if the taxa is assigned at any level
tidyfun_ALL_au_guilds <- tidyfun_ALL_au_guilds %>% mutate(any_level = if_else(order == "assigned" | family == "assigned" | genus == "assigned" | species == "assigned", "assigned", "unassigned"))

# Pivot in a long table format
tidyfun_ALL_au_long_guilds <- pivot_longer(tidyfun_ALL_au_guilds, cols=c(2:5,8), names_to = "level", values_to = "assignation")

# Aggregate abundance by community, level and assignation (assigned or unassigned)
tidyfun_ALL_au_long_abund_guilds <- aggregate(abundance ~ community*level*assignation, data = tidyfun_ALL_au_long_guilds, FUN = sum)
#write.csv(tidyfun_ALL_au_long_abund_guilds, "analyses/tracking/abundance_taxa/tracking_tidyfun_assignation_abund_guilds_2024-10-21.csv", row.names = F)

# Summarise the number of distinct finest_names
tidyfun_ALL_au_long_distinct_guilds <- tidyfun_ALL_au_long_guilds %>% group_by(community, level, assignation) %>% summarise(n_distinct_finest_name = n_distinct(finest_name))
#write.csv(tidyfun_ALL_au_long_distinct_guilds, "analyses/tracking/abundance_taxa/tracking_tidyfun_assignation_distinct_guilds_2024-10-21.csv", row.names = F)

tidyfun_ALL_au_long_abund_graph_guilds <- tidyfun_ALL_au_long_abund_guilds
# Remove information on any_level (if you don't want it in the graph)
#tidyfun_ALL_au_long_abund_graph_guilds <- filter(tidyfun_ALL_au_long_abund_graph_guilds, level != "any_level")

# Order factor levels
tidyfun_ALL_au_long_abund_graph_guilds$community <- ordered(tidyfun_ALL_au_long_abund_graph_guilds$community, order_community)
tidyfun_ALL_au_long_abund_graph_guilds$level <- ordered(tidyfun_ALL_au_long_abund_graph_guilds$level, order_level)
tidyfun_ALL_au_long_abund_graph_guilds$assignation <- ordered(tidyfun_ALL_au_long_abund_graph_guilds$assignation, c("assigned", "unassigned"))

# Plot the abundance of assigned or unassigned organisms in each community and at each taxonomic level
L2_guilds <- ggplot(tidyfun_ALL_au_long_abund_graph_guilds, aes(level, abundance, fill=assignation)) + geom_bar(stat="identity") + frame_simple + facet_grid(vars(community), scales="free") + labs(title="Abundance of assigned organisms", subtitle="Functional assignation (guilds)", x ="Taxonomic level", y ="Total abundance") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + theme(axis.text.x = element_text(angle = 45, hjust=1)) + scale_fill_manual(values=c("#a64c69", "#424242")) + geom_col(position = position_stack(reverse = TRUE))
L2_guilds
#ggsave("analyses/tracking/abundance_taxa/tracking_tidyfun_assignation_guilds_abund_2024-10-21.png", width=4.5, height=11)
```

```{r}
## Interactions ##

# Filter Gratin results at the best level
step_C_best_interactions_matchName <- step_C_best %>% filter(fun == "interactions" & version == "matchName")
fun_interactions_ALL_best <- fun_interactions_ALL %>%
  inner_join(step_C_best_interactions_matchName %>% select(community, best_level), by = "community") %>%
  filter(level == best_level)

# Create the list of taxa in the Gratin results
match_interactions <- unique(fun_interactions_ALL_best$matchName)

# Determine if organisms are assigned at each level (replace taxa name by "assigned" if found in the match_interactions list, or "unassigned" if not)
fun_interactions_ALL_au_match <- tax_ALL[,-c(2:4)] %>% mutate(
  order = ifelse(order %in% match_interactions, "assigned", "unassigned"),
  family = ifelse(family %in% match_interactions, "assigned", "unassigned"),
  genus = ifelse(genus %in% match_interactions, "assigned", "unassigned"),
  species = ifelse(species %in% match_interactions, "assigned", "unassigned"))

# Add abundance data in a tidyfun object
tidy_ALL <- read.csv("data/derived_data/tidy_data/tidy_all_2024-10-21.csv")
tidy_ALL <- tidy_ALL[which(tidy_ALL$date == "17/04/2023"),] # Filter date if needed
tidy_ALL_agg <- aggregate(abundance ~ finest_name, data = tidy_ALL, FUN = sum)
tidyfun_ALL_au_interactions <- merge(fun_interactions_ALL_au_match, tidy_ALL_agg, by = "finest_name")

# Add a column "any_level" to specify if the taxa is assigned at any level
tidyfun_ALL_au_interactions <- tidyfun_ALL_au_interactions %>% mutate(any_level = if_else(order == "assigned" | family == "assigned" | genus == "assigned" | species == "assigned", "assigned", "unassigned"))

# Pivot in a long table format
tidyfun_ALL_au_long_interactions <- pivot_longer(tidyfun_ALL_au_interactions, cols=c(2:5,8), names_to = "level", values_to = "assignation")

# Aggregate abundance by community, level and assignation (assigned or unassigned)
tidyfun_ALL_au_long_abund_interactions <- aggregate(abundance ~ community*level*assignation, data = tidyfun_ALL_au_long_interactions, FUN = sum)
#write.csv(tidyfun_ALL_au_long_abund_interactions, "analyses/tracking/abundance_taxa/tracking_tidyfun_assignation_abund_interactions_2024-10-21.csv", row.names = F)

# Summarise the number of distinct finest_names
tidyfun_ALL_au_long_distinct_interactions <- tidyfun_ALL_au_long_interactions %>% group_by(community, level, assignation) %>% summarise(n_distinct_finest_name = n_distinct(finest_name))
#write.csv(tidyfun_ALL_au_long_distinct_interactions, "analyses/tracking/abundance_taxa/tracking_tidyfun_assignation_distinct_interactions_2024-10-21.csv", row.names = F)

tidyfun_ALL_au_long_abund_graph_interactions <- tidyfun_ALL_au_long_abund_interactions
# Remove information on any_level (if you don't want it in the graph)
#tidyfun_ALL_au_long_abund_graph_interactions <- filter(tidyfun_ALL_au_long_abund_graph_interactions, level != "any_level")

# Order factor levels
tidyfun_ALL_au_long_abund_graph_interactions$community <- ordered(tidyfun_ALL_au_long_abund_graph_interactions$community, order_community)
tidyfun_ALL_au_long_abund_graph_interactions$level <- ordered(tidyfun_ALL_au_long_abund_graph_interactions$level, order_level)
tidyfun_ALL_au_long_abund_graph_interactions$assignation <- ordered(tidyfun_ALL_au_long_abund_graph_interactions$assignation, c("assigned", "unassigned"))

# Plot the abundance of assigned or unassigned organisms in each community and at each taxonomic level
L2_interactions <- ggplot(tidyfun_ALL_au_long_abund_graph_interactions, aes(level, abundance, fill=assignation)) + geom_bar(stat="identity") + frame_simple + facet_grid(vars(community), scales="free") + labs(title="Abundance of assigned organisms", subtitle="Functional assignation (interactions)", x ="Taxonomic level", y ="Total abundance") + scale_y_continuous(labels = scales::comma) + scale_fill_brewer(palette = "Set2") + theme(axis.text.x = element_text(angle = 45, hjust=1)) + scale_fill_manual(values=c("#a64c69", "#424242")) + geom_col(position = position_stack(reverse = TRUE))
L2_interactions
#ggsave("analyses/tracking/abundance_taxa/tracking_tidyfun_assignation_interactions_abund_2024-10-21.png", width=4.5, height=11)
```

```{r}
L3_tax <- L1 + theme(legend.position = "none", title.position = "none")
L3_fun_guilds <- L2_guilds + labs(title="", y="") + theme(legend.position = "none", title.position = "none")
L3_fun_interactions <- L2_interactions + labs(title="", y="")

L3_all <- plot_grid(L3_tax, L3_fun_guilds, L3_fun_interactions, labels = c('   A', '   B', '   C'), ncol=3, rel_widths = c(1, 0.8, 1.1))
L3_all
#ggsave("analyses/tracking/abundance_taxa/tracking_tidytaxfun_assignation_abund_2024-10-21.png", width=11, height=11)

#svglite(file="analyses/tracking/abundance_taxa/tracking_tidytaxfun_assignation_abund_2024-10-21.svg", width = 11, height = 11, bg = "white", pointsize = 16)
L3_all
#dev.off()
```

### Percentage of taxa with matches (in abundance)

The following chunks are used to determine the percentages of assigned taxa (in terms of abundance)
*taxonomically or functionally (guilds at the best levels)

```{r}
# Calculate the percentage of assigned taxa in abundance

## tidytax
tidytax_ALL_au_long_perc <- pivot_wider(tidytax_ALL_au_long_abund, names_from = assignation, values_from = abundance)

tidytax_ALL_au_long_perc[is.na(tidytax_ALL_au_long_perc)] <- 0

tidytax_ALL_au_long_perc <- tidytax_ALL_au_long_perc %>% mutate(perc_assigned = assigned*100/(assigned+unassigned), assignation = "taxonomic") %>% mutate_if(is.numeric, round, digits = 2)

## tidyfun

tidyfun_ALL_au_long_perc <- pivot_wider(tidyfun_ALL_au_long_abund_guilds, names_from = assignation, values_from = abundance)

tidyfun_ALL_au_long_perc[is.na(tidyfun_ALL_au_long_perc)] <- 0

tidyfun_ALL_au_long_perc <- tidyfun_ALL_au_long_perc %>% mutate(perc_assigned = assigned*100/(assigned+unassigned), assignation = "functional (guilds)") %>% mutate_if(is.numeric, round, digits = 2)

# Bind and export results
#write.csv(rbind(tidytax_ALL_au_long_perc, tidyfun_ALL_au_long_perc), "analyses/tracking/percentage_abundance/tracking_assignation_perc_abund_2024-10-21.csv", row.names = F)
```

### List of unassigned taxa

```{r}
# To obtain the list of taxa that are not assigned with Gratin at best level (not in queryName)
step_C_best_guilds_queryName <- step_C_best %>% filter(fun == "guilds" & version == "queryName")

query_found <- fun_guilds_ALL %>%
  inner_join(step_C_best_guilds_queryName, by = "community") %>%
  filter(level == best_level) %>%
  select(queryName, community, fun, version, best_level) %>% 
  distinct()

#write.csv(query_found, "analyses/tracking/lists_assignations/tracking_list_assigned_guilds_2024-10-21.csv", row.names = F)

query_notfound <- tax_ALL %>%
  rowwise() %>%
  filter(!get(query_found$best_level[match(community, query_found$community)]) %in% query_found$queryName) %>%
  ungroup()

#write.csv(query_notfound, "analyses/tracking/lists_assignations/tracking_list_unassigned_guilds_2024-10-21.csv", row.names = F)
```

# 4.  Merge into phyloseq objects

help with https://vaulot.github.io/tutorials/Phyloseq_tutorial.html

## Preparations for

### otu_table

otu_table = tidy_data_PO

```{r}
## import data
tidy_data <- read.csv("data/derived_data/tidy_data/tidy_all_2024-10-21.csv")
tax_table <- read.csv("data/derived_data/tax_table/final_files/tax_all_2024-10-21.csv")

## add separate info columns and recreate code columns adapted for your analysis (I created different combinations of factors just in case I need then during the analysis)
tidy_data_PO <- tidy_data %>% 
  separate(col = code_uhbr , into = c("land_use","habitat","block","replicate"), sep = "_")

tidy_data_PO$code_uhbr <- paste(tidy_data_PO$land_use, tidy_data_PO$habitat, tidy_data_PO$block, tidy_data_PO$replicate, sep = "_")

tidy_data_PO$code_uh <- paste(tidy_data_PO$land_use, tidy_data_PO$habitat, sep = "_")

tidy_data_PO$code_uhb <- paste(tidy_data_PO$code_uh, tidy_data_PO$block, sep = "_")

tidy_data_PO$date <- gsub("/", ".", tidy_data_PO$date)

tidy_data_PO$code_uhbrd <- paste(tidy_data_PO$code_uhb, tidy_data_PO$replicate, tidy_data_PO$date, sep = "_")

tidy_data_PO$code_uhbrdm <- paste(tidy_data_PO$code_uhbr, tidy_data_PO$date, tidy_data_PO$method, sep = "_")

tidy_data_PO$code_uhbrdmc <- paste(tidy_data_PO$code_uhbrdm, tidy_data_PO$community, sep = "_")

tidy_data_PO <- tidy_data_PO %>% mutate(
  config = case_when(
    code_uh == "AF_C" | code_uh == "AF_T" ~ "+config.",
    code_uh == "MC_C" | code_uh == "TP_T" ~ "-config."))

tidy_data_PO$plant_cover <- tidy_data_PO$habitat

tidy_data_PO$plant_cover <- gsub("C", "+cereal", tidy_data_PO$plant_cover)
tidy_data_PO$plant_cover <- gsub("T", "+tree", tidy_data_PO$plant_cover)

tidy_data_PO$code_cp <- paste(tidy_data_PO$config, tidy_data_PO$plant_cover, sep = " ")

tidy_data_PO$code_cpb <- paste(tidy_data_PO$code_cp, tidy_data_PO$block, sep = "_")

tidy_data_PO$code_cpbr <- paste(tidy_data_PO$code_cpb, tidy_data_PO$replicate, sep = "_")

tidy_data_PO$code_cpbrd <- paste(tidy_data_PO$code_cpbr, tidy_data_PO$date, sep = "_")

tidy_data_PO$code_cpbrdm <- paste(tidy_data_PO$code_cpbrd, tidy_data_PO$method, sep = "_")

tidy_data_PO$code_cpbrdmc <- paste(tidy_data_PO$code_cpbrdm, tidy_data_PO$community, sep = "_")

## reorder columns
tidy_data_PO <- tidy_data_PO[, c(5,9,1:4,6:8,11,12,10,13:23)]
```

### sam_data

sam_data = metadata_PO

```{r}
## remove useless columns
metadata_PO <- tidy_data_PO[,-c(1,2)]

## remove duplicates
metadata_PO <- metadata_PO[!duplicated(metadata_PO),]
```

### tax_table

tax_table = tax_table_PO + fun_table_guilds_PO + fun_table_interactions_PO

BEWARE : Change best taxa level (with the highest percentage of assignation in number of distinct taxa names) at lines 2398 and 2497 for each community.

```{r}
## import data
fun_table_guilds <- read.csv("data/derived_data/fun_table/fun_guilds_all_2024-08-21.csv")

## select the best level to make assignations to guilds (based on percentages of assigned taxa in number)
fun_table_guilds_PO <- fun_table_guilds %>% filter(level %in% c("genus"))
### family for macrofaunas and micro_arthropodes
### genus for nematodes, bacteria, fungi and protists

## Prepare guilds_table to classify guilds by functionnal levels
guilds_table <- read.table("data/raw_data/guilds_AM_2024-10-01.csv", sep = ";", header = T)
# Note that a few guilds (chemolithotroph, chemoorganotroph, copiotroph, diazotroph, eukaryvore, heterotrophic protist, lithoautotroph, lithoheterotroph, methanotroph, methylotroph, organoheterotroph, photolithotroph) are not in the online classification (https://agroportal.lirmm.fr/ontologies/SFWO/) and therefore I could not find the ancestors and include them in the guild classification.
guilds_table <- guilds_table %>% mutate(Ancestors = NA) %>% relocate(Ancestors, .after = 1)

## remove useless columns
fun_table_guilds_PO <- fun_table_guilds_PO[,c(3,6)]

## Add the guild levels
fun_table_guilds_PO <- merge(guilds_table, fun_table_guilds_PO, by.x='Guild', by.y='guildName')

## replace NA by unassigned
fun_table_guilds_PO[is.na(fun_table_guilds_PO)] <- "unassigned"

## remove useless columns
fun_table_guilds_PO <- fun_table_guilds_PO[,-c(1,2)]

## remove duplicates
fun_table_guilds_PO <- fun_table_guilds_PO[!duplicated(fun_table_guilds_PO), ]

lignes_solitaires_level_2 <- fun_table_guilds_PO %>%
  group_by(matchName, guild_level_2) %>%
  mutate(count_guild = n()) %>%
  ungroup() %>%
  filter(count_guild == 1) %>%
  select(-count_guild)

lignes_dedupliquees_level_3 <- fun_table_guilds_PO %>%
  group_by(guild_level_2) %>%
  mutate(has_multiple_values = n_distinct(guild_level_3) > 1) %>%
  filter(!(guild_level_3 == "unassigned" & has_multiple_values)) %>%
  select(-has_multiple_values) %>%
  ungroup()

cleaned_level_3 <- bind_rows(lignes_solitaires_level_2, lignes_dedupliquees_level_3)

lignes_solitaires_level_3 <- cleaned_level_3 %>%
  group_by(matchName, guild_level_3) %>%
  mutate(count_guild = n()) %>%
  ungroup() %>%
  filter(count_guild == 1) %>%
  select(-count_guild)

lignes_dedupliquees_level_4 <- cleaned_level_3 %>% anti_join(lignes_solitaires_level_3, by = colnames(cleaned_level_3)) %>% 
  group_by(guild_level_3) %>%
  mutate(has_multiple_values = n_distinct(guild_level_4) > 1) %>%
  filter(!(guild_level_4 == "unassigned" & has_multiple_values)) %>%
  select(-has_multiple_values) %>%
  ungroup()

cleaned_level_4 <- bind_rows(lignes_solitaires_level_3, lignes_dedupliquees_level_4)

lignes_solitaires_level_4 <- cleaned_level_4 %>%
  group_by(matchName, guild_level_4) %>%
  mutate(count_guild = n()) %>%
  ungroup() %>%
  filter(count_guild == 1) %>%
  select(-count_guild)

lignes_dedupliquees_level_5 <- cleaned_level_4 %>% anti_join(lignes_solitaires_level_4, by = colnames(cleaned_level_4)) %>% 
  group_by(guild_level_4) %>%
  mutate(has_multiple_values = n_distinct(guild_level_5) > 1) %>%
  filter(!(guild_level_5 == "unassigned" & has_multiple_values)) %>%
  select(-has_multiple_values) %>%
  ungroup()

cleaned_level_5 <- bind_rows(lignes_solitaires_level_4, lignes_dedupliquees_level_5)

## adjust columns to manage multiple assignations
adjusted_PO <- cleaned_level_5
adjusted_PO <- adjusted_PO %>% mutate(abr_4_guild_level_5 = paste0(substr(guild_level_4, 1, 3), "_", guild_level_5))
adjusted_PO <- adjusted_PO %>% mutate(abr_3_guild_level_4 = paste0(substr(guild_level_3, 1, 3), "_", guild_level_4))
adjusted_PO <- adjusted_PO %>% mutate(abr_2_guild_level_3 = paste0(substr(guild_level_2, 1, 3), "_", guild_level_3))
adjusted_PO <- adjusted_PO %>% mutate(abr_1_guild_level_2 = paste0(substr(guild_level_1, 1, 3), "_", guild_level_2))
adjusted_PO <- adjusted_PO %>% mutate(abr_all_guild_level = paste0(substr(guild_level_1, 1, 3), "_", substr(guild_level_2, 1, 3), "_", substr(guild_level_3, 1, 3), "_", substr(guild_level_4, 1, 3), "_", substr(guild_level_5, 1, 3)))

adjusted_PO <- adjusted_PO %>%
  group_by(matchName) %>%
  mutate(abr_1_guild_level_2_AND = str_c(sort(unique(abr_1_guild_level_2)), collapse = "AND"),
         abr_2_guild_level_3_AND = str_c(sort(unique(abr_2_guild_level_3)), collapse = "AND"),
         abr_3_guild_level_4_AND = str_c(sort(unique(abr_3_guild_level_4)), collapse = "AND"),
         abr_4_guild_level_5_AND = str_c(sort(unique(abr_4_guild_level_5)), collapse = "AND"),
         abr_all_guild_level_AND = str_c(sort(unique(abr_all_guild_level)), collapse = "AND")) %>%
  ungroup()

adjusted_PO_min <- adjusted_PO[,c(6,12:16)]

fun_table_guilds_PO <- adjusted_PO_min[!duplicated(adjusted_PO_min), ]
```

```{r}
## import data
fun_table_interactions <- read.csv("data/derived_data/fun_table/fun_interactions_all_2024-08-21.csv")

## select the level to make assignations
fun_table_interactions_PO <- fun_table_interactions %>% filter(level %in% c("family"))
### order for bacteria
### family for macrofauna_surface, macrofauna_foliar, micro_arthropodes and protists
### genus for nematodes and fungi
### species for macrofauna_aerial

## remove useless columns
fun_table_interactions_PO <- fun_table_interactions_PO[,c(1,3,6,8)]
```

### Faprotax table

```{r}
# You can use the functional assignations from Faprotax output which are already integrated into Gratin. Faprotax table is used as an otu_table in the phyloseq object. The following lines might need modifications.

## otu_mat = tidy_data
tidy_data_faprotax <- read_tsv("FAPROTAX_1.2.10/func_table3.tsv")
tidy_data_faprotax <- tidy_data_faprotax %>% tibble::column_to_rownames("group")
tidy_data_faprotax <- as.matrix(tidy_data_faprotax)

# Create phyloseq object
OTU = otu_table(tidy_data_faprotax, taxa_are_rows = TRUE)
samples = sample_data(metadata)
PO_Faprotax <- phyloseq(OTU, samples)

total = median(sample_sums(PO_Faprotax))
standf = function(x, t=total) round(t*(x/sum(x)))
PO_Faprotax = transform_sample_counts(PO_Faprotax, standf)

PO_Faprotax
sample_names(PO_Faprotax)
sample_variables(PO_Faprotax)
```

```{r}
OTU_curve = as.data.frame(t(OTU))
sample_names = rownames(OTU_curve)
otu.rarecurve = rarecurve(OTU_curve, step = 1000, label = T)
```

```{r}
alpha <- plot_richness(PO_Faprotax, x="code_uh", measures=c("Observed", "Shannon", "Simpson")) + geom_boxplot() + geom_point(size=1, alpha=0.7) + theme_bw() + frame_simple + scale_x_discrete(limits = order_uh) + theme(title =element_text(size=8, face='bold'), axis.text.x=element_text(angle = -90, hjust = 0)) + labs(title="Alpha diversity of bacteria", subtitle="Functional table (Faprotax)", x ="land use_habitat")
alpha

#ggsave("analyses/pre-analysis/alpha_Faprotax_2024-08-23.png", width=6, height=4)
```

```{r}
PO_ord <- ordinate(PO_Faprotax, "PCoA", distance = "bray")
ord <- plot_ordination(PO_Faprotax, PO_ord, color = "code_uh", shape = "block") + theme_bw() + labs(title="Beta diversity of bacteria", subtitle="Functional table (Faprotax)")
ord

#ggsave("analyses/pre-analysis/ord_Faprotax_2024-08-23.png", width=6, height=5)
```

## macrofauna_surface

### Version raw

otu_table
```{r}
# select the community
tidy_data_PO_macrofauna_surface <- tidy_data_PO %>% filter(community %in% c("macrofauna_surface"))

# remove useless columns
tidy_data_PO_macrofauna_surface <- tidy_data_PO_macrofauna_surface[,c(1,2,21)]

# transform table to taxa_are_rows = TRUE
tidy_data_PO_macrofauna_surface <- pivot_wider(tidy_data_PO_macrofauna_surface, names_from = code_cpbrd, values_from = abundance)

# replace NA by 0
tidy_data_PO_macrofauna_surface[is.na(tidy_data_PO_macrofauna_surface)] <- 0

# use "finest_name" as rownames
tidy_data_PO_macrofauna_surface <- tidy_data_PO_macrofauna_surface %>% tibble::column_to_rownames("finest_name")

# transform tbl_df to matrix table
tidy_data_PO_macrofauna_surface <- as.matrix(tidy_data_PO_macrofauna_surface)
```

tax_table
BEWARE : Check best taxa level below again (for guilds).
```{r}
# select the community
tax_table_PO_macrofauna_surface <- tax_table %>% filter(community %in% c("macrofauna_surface"))

# remove useless columns
tax_table_PO_macrofauna_surface <- tax_table_PO_macrofauna_surface[,-c(9)]

# add fun_table_guilds to the tax_table
tax_table_PO_macrofauna_surface_fun <- left_join(tax_table_PO_macrofauna_surface, fun_table_guilds_PO, by = c("family" = "matchName"))

tax_table_PO_macrofauna_surface_fun[is.na(tax_table_PO_macrofauna_surface_fun)] <- "unassigned"

# create columns to categorize organisms according to functional assignations
tax_table_PO_macrofauna_surface_fun <- tax_table_PO_macrofauna_surface_fun %>%
  mutate(consumer = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "primary", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "secondary",
    TRUE ~ "untargeted"
  ))

tax_table_PO_macrofauna_surface_fun <- tax_table_PO_macrofauna_surface_fun %>%
  mutate(potential = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "bioag. and auxil.", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "auxil.",
    TRUE ~ "any"
  ))

tax_table_PO_macrofauna_surface_fun <- tax_table_PO_macrofauna_surface_fun %>%
  rowwise() %>%
  mutate(interaction_matchName = if_else(any(c_across(1:8) %in% fun_table_interactions_PO$matchName), "observed", "not observed")) %>%
  ungroup()

tax_table_PO_macrofauna_surface_fun <- tax_table_PO_macrofauna_surface_fun %>%
  rowwise() %>%
  mutate(resource_matchName = case_when(
    # crop
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae")) ~ "crop",
    # adventice (identified in the experimental site)
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "adventice",
    # crop and adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae") & fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "crop + adventice",
    # other than crop or adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          !fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae", "Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae") &
          !is.na(fun_table_interactions_PO$resourceName)) ~ "other resource",
    # no info
    !any(fun_table_interactions_PO$matchName %in% c_across(1)) ~ "not observed",
    TRUE ~ NA_character_))

tax_table_PO_macrofauna_surface <- tax_table_PO_macrofauna_surface_fun

# use "finest_name" as rownames
tax_table_PO_macrofauna_surface <- tax_table_PO_macrofauna_surface %>% tibble::column_to_rownames("finest_name")

# transform to matrix table
tax_table_PO_macrofauna_surface <- as.matrix(tax_table_PO_macrofauna_surface)
```

sam_data
```{r}
# select the community
metadata_PO_macrofauna_surface <- metadata_PO %>% filter(community %in% c("macrofauna_surface"))

# choose the rownames
rownames(metadata_PO_macrofauna_surface) <- metadata_PO_macrofauna_surface[,19]

# create phyloseq object
tidy_data_PO_macrofauna_surface = otu_table(tidy_data_PO_macrofauna_surface, taxa_are_rows = TRUE)

tax_table_PO_macrofauna_surface = tax_table(tax_table_PO_macrofauna_surface)

metadata_PO_macrofauna_surface = sample_data(metadata_PO_macrofauna_surface)

PO_macrofauna_surface <- phyloseq(tidy_data_PO_macrofauna_surface, tax_table_PO_macrofauna_surface, metadata_PO_macrofauna_surface)

# check PO
PO_macrofauna_surface
sample_names(PO_macrofauna_surface)
rank_names(PO_macrofauna_surface)
sample_variables(PO_macrofauna_surface)
check <- verify_pq(PO_macrofauna_surface)

#write_rds(PO_macrofauna_surface, "data/derived_data/phyloseq_objects/PO_macrofauna_surface_raw_2024-11-28.rds")
```

### Version stand

```{r}
# standardize abundances to the median sequencing depth
total = median(sample_sums(PO_macrofauna_surface))
standf = function(x, t=total) round(t*(x/sum(x)))
PO_macrofauna_surface_stand = transform_sample_counts(PO_macrofauna_surface, standf)

# check PO
PO_macrofauna_surface_stand

#write_rds(PO_macrofauna_surface_stand, "data/derived_data/phyloseq_objects/PO_macrofauna_surface_stand_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_macrofauna_surface_stand_prop <- transform_sample_counts(PO_macrofauna_surface_stand, fun = propfun)

#write_rds(PO_macrofauna_surface_stand_prop, "data/derived_data/phyloseq_objects/PO_macrofauna_surface_stand_prop_2024-11-28.rds")
```

### Version norm

```{r}
# normalize
PO_macrofauna_surface_norm <- normalize_prop_pq(PO_macrofauna_surface, base_log = 2, digits = 0)

# check PO
PO_macrofauna_surface_norm

#write_rds(PO_macrofauna_surface_norm, "data/derived_data/phyloseq_objects/PO_macrofauna_surface_norm_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_macrofauna_surface_norm_prop <- transform_sample_counts(PO_macrofauna_surface_norm, fun = propfun)

#write_rds(PO_macrofauna_surface_norm_prop, "data/derived_data/phyloseq_objects/PO_macrofauna_surface_norm_prop_2024-11-28.rds")
```

### Preanalyses

```{r}
tidy_data_PO_macrofauna_surface_before <- as.data.frame(t(tidy_data_PO_macrofauna_surface))
sample_names = rownames(tidy_data_PO_macrofauna_surface_before)
curve_before <- rarecurve(tidy_data_PO_macrofauna_surface_before, step = 5, label = F)
# save image to rarecurve_macrofauna_surface_raw_2024-10-22

tidy_data_PO_macrofauna_surface_stand <- otu_table(PO_macrofauna_surface_stand)
class(tidy_data_PO_macrofauna_surface_stand) <- "matrix"
tidy_data_PO_macrofauna_surface_stand <- t(tidy_data_PO_macrofauna_surface_stand)
curve_stand <- rarecurve(tidy_data_PO_macrofauna_surface_stand, step=5, label=F)
# save image to rarecurve_macrofauna_surface_stand_2024-10-22

tidy_data_PO_macrofauna_surface_norm <- otu_table(PO_macrofauna_surface_norm)
class(tidy_data_PO_macrofauna_surface_norm) <- "matrix"
tidy_data_PO_macrofauna_surface_norm <- t(tidy_data_PO_macrofauna_surface_norm)
curve_stand <- rarecurve(tidy_data_PO_macrofauna_surface_norm, step=5, label=F)
# save image to rarecurve_macrofauna_surface_norm_2024-10-22
```

## macrofauna_aerial

### Version raw

otu_table
```{r}
# select the community
tidy_data_PO_macrofauna_aerial <- tidy_data_PO %>% filter(community %in% c("macrofauna_aerial"))

# remove useless columns
tidy_data_PO_macrofauna_aerial <- tidy_data_PO_macrofauna_aerial[,c(1,2,21)]

# transform table to taxa_are_rows = TRUE
tidy_data_PO_macrofauna_aerial <- pivot_wider(tidy_data_PO_macrofauna_aerial, names_from = code_cpbrd, values_from = abundance)

# replace NA by 0
tidy_data_PO_macrofauna_aerial[is.na(tidy_data_PO_macrofauna_aerial)] <- 0

# use "finest_name" as rownames
tidy_data_PO_macrofauna_aerial <- tidy_data_PO_macrofauna_aerial %>% tibble::column_to_rownames("finest_name")

# transform tbl_df to matrix table
tidy_data_PO_macrofauna_aerial <- as.matrix(tidy_data_PO_macrofauna_aerial)
```

tax_table
BEWARE : Check best taxa level below again (for guilds).
```{r}
# select the community
tax_table_PO_macrofauna_aerial <- tax_table %>% filter(community %in% c("macrofauna_aerial"))

# remove useless columns
tax_table_PO_macrofauna_aerial <- tax_table_PO_macrofauna_aerial[,-c(9)]

# add fun_table_guilds to the tax_table
tax_table_PO_macrofauna_aerial_fun <- left_join(tax_table_PO_macrofauna_aerial, fun_table_guilds_PO, by = c("family" = "matchName"))

tax_table_PO_macrofauna_aerial_fun[is.na(tax_table_PO_macrofauna_aerial_fun)] <- "unassigned"

# create columns to categorize organisms according to functional assignations
tax_table_PO_macrofauna_aerial_fun <- tax_table_PO_macrofauna_aerial_fun %>%
  mutate(consumer = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "primary", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "secondary",
    TRUE ~ "untargeted"
  ))

tax_table_PO_macrofauna_aerial_fun <- tax_table_PO_macrofauna_aerial_fun %>%
  mutate(potential = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "bioag. and auxil.", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "auxil.",
    TRUE ~ "any"
  ))

tax_table_PO_macrofauna_aerial_fun <- tax_table_PO_macrofauna_aerial_fun %>%
  rowwise() %>%
  mutate(interaction_matchName = if_else(any(c_across(1:8) %in% fun_table_interactions_PO$matchName), "observed", "not observed")) %>%
  ungroup()

tax_table_PO_macrofauna_aerial_fun <- tax_table_PO_macrofauna_aerial_fun %>%
  rowwise() %>%
  mutate(resource_matchName = case_when(
    # crop
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae")) ~ "crop",
    # adventice (identified in the experimental site)
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "adventice",
    # crop and adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae") & fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "crop + adventice",
    # other than crop or adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          !fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae", "Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae") &
          !is.na(fun_table_interactions_PO$resourceName)) ~ "other resource",
    # no info
    !any(fun_table_interactions_PO$matchName %in% c_across(1)) ~ "not observed",
    TRUE ~ NA_character_))

tax_table_PO_macrofauna_aerial <- tax_table_PO_macrofauna_aerial_fun

# use "finest_name" as rownames
tax_table_PO_macrofauna_aerial <- tax_table_PO_macrofauna_aerial %>% tibble::column_to_rownames("finest_name")

# transform to matrix table
tax_table_PO_macrofauna_aerial <- as.matrix(tax_table_PO_macrofauna_aerial)
```

sam_data
```{r}
# select the community
metadata_PO_macrofauna_aerial <- metadata_PO %>% filter(community %in% c("macrofauna_aerial"))

# choose the rownames
rownames(metadata_PO_macrofauna_aerial) <- metadata_PO_macrofauna_aerial[,19]

# create phyloseq object
tidy_data_PO_macrofauna_aerial = otu_table(tidy_data_PO_macrofauna_aerial, taxa_are_rows = TRUE)

tax_table_PO_macrofauna_aerial = tax_table(tax_table_PO_macrofauna_aerial)

metadata_PO_macrofauna_aerial = sample_data(metadata_PO_macrofauna_aerial)

PO_macrofauna_aerial <- phyloseq(tidy_data_PO_macrofauna_aerial, tax_table_PO_macrofauna_aerial, metadata_PO_macrofauna_aerial)

# check PO
PO_macrofauna_aerial
sample_names(PO_macrofauna_aerial)
rank_names(PO_macrofauna_aerial)
sample_variables(PO_macrofauna_aerial)
check <- verify_pq(PO_macrofauna_aerial)

#write_rds(PO_macrofauna_aerial, "data/derived_data/phyloseq_objects/PO_macrofauna_aerial_raw_2024-11-28.rds")
```

### Version stand

```{r}
# standardize abundances to the median sequencing depth
total = median(sample_sums(PO_macrofauna_aerial))
standf = function(x, t=total) round(t*(x/sum(x)))
PO_macrofauna_aerial_stand = transform_sample_counts(PO_macrofauna_aerial, standf)

# check PO
PO_macrofauna_aerial_stand

#write_rds(PO_macrofauna_aerial_stand, "data/derived_data/phyloseq_objects/PO_macrofauna_aerial_stand_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_macrofauna_aerial_stand_prop <- transform_sample_counts(PO_macrofauna_aerial_stand, fun = propfun)

#write_rds(PO_macrofauna_aerial_stand_prop, "data/derived_data/phyloseq_objects/PO_macrofauna_aerial_stand_prop_2024-11-28.rds")
```

### Version norm

```{r}
# normalize
PO_macrofauna_aerial_norm <- normalize_prop_pq(PO_macrofauna_aerial, base_log = 2, digits = 0)

# check PO
PO_macrofauna_aerial_norm

#write_rds(PO_macrofauna_aerial_norm, "data/derived_data/phyloseq_objects/PO_macrofauna_aerial_norm_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_macrofauna_aerial_norm_prop <- transform_sample_counts(PO_macrofauna_aerial_norm, fun = propfun)

#write_rds(PO_macrofauna_aerial_norm_prop, "data/derived_data/phyloseq_objects/PO_macrofauna_aerial_norm_prop_2024-11-28.rds")
```

### Preanalyses

```{r}
tidy_data_PO_macrofauna_aerial_before <- as.data.frame(t(tidy_data_PO_macrofauna_aerial))
sample_names = rownames(tidy_data_PO_macrofauna_aerial_before)
curve_before <- rarecurve(tidy_data_PO_macrofauna_aerial_before, step = 5, label = F)
# save image to rarecurve_macrofauna_aerial_raw_2024-10-22

tidy_data_PO_macrofauna_aerial_stand <- otu_table(PO_macrofauna_aerial_stand)
class(tidy_data_PO_macrofauna_aerial_stand) <- "matrix"
tidy_data_PO_macrofauna_aerial_stand <- t(tidy_data_PO_macrofauna_aerial_stand)
curve_stand <- rarecurve(tidy_data_PO_macrofauna_aerial_stand, step=5, label=F)
# save image to rarecurve_macrofauna_aerial_stand_2024-10-22

tidy_data_PO_macrofauna_aerial_norm <- otu_table(PO_macrofauna_aerial_norm)
class(tidy_data_PO_macrofauna_aerial_norm) <- "matrix"
tidy_data_PO_macrofauna_aerial_norm <- t(tidy_data_PO_macrofauna_aerial_norm)
curve_stand <- rarecurve(tidy_data_PO_macrofauna_aerial_norm, step=5, label=F)
# save image to rarecurve_macrofauna_aerial_norm_2024-10-22
```

## macrofauna_foliar

### Version raw

otu_table
```{r}
# select the community
tidy_data_PO_macrofauna_foliar <- tidy_data_PO %>% filter(community %in% c("macrofauna_foliar"))

# remove useless columns
tidy_data_PO_macrofauna_foliar <- tidy_data_PO_macrofauna_foliar[,c(1,2,21)]

# transform table to taxa_are_rows = TRUE
tidy_data_PO_macrofauna_foliar <- pivot_wider(tidy_data_PO_macrofauna_foliar, names_from = code_cpbrd, values_from = abundance)

# replace NA by 0
tidy_data_PO_macrofauna_foliar[is.na(tidy_data_PO_macrofauna_foliar)] <- 0

# use "finest_name" as rownames
tidy_data_PO_macrofauna_foliar <- tidy_data_PO_macrofauna_foliar %>% tibble::column_to_rownames("finest_name")

# transform tbl_df to matrix table
tidy_data_PO_macrofauna_foliar <- as.matrix(tidy_data_PO_macrofauna_foliar)
```

tax_table
BEWARE : Check best taxa level below again (for guilds).
```{r}
# select the community
tax_table_PO_macrofauna_foliar <- tax_table %>% filter(community %in% c("macrofauna_foliar"))

# remove useless columns
tax_table_PO_macrofauna_foliar <- tax_table_PO_macrofauna_foliar[,-c(9)]

# add fun_table_guilds to the tax_table
tax_table_PO_macrofauna_foliar_fun <- left_join(tax_table_PO_macrofauna_foliar, fun_table_guilds_PO, by = c("family" = "matchName"))

tax_table_PO_macrofauna_foliar_fun[is.na(tax_table_PO_macrofauna_foliar_fun)] <- "unassigned"

# create columns to categorize organisms according to functional assignations
tax_table_PO_macrofauna_foliar_fun <- tax_table_PO_macrofauna_foliar_fun %>%
  mutate(consumer = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "primary", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "secondary",
    TRUE ~ "untargeted"
  ))

tax_table_PO_macrofauna_foliar_fun <- tax_table_PO_macrofauna_foliar_fun %>%
  mutate(potential = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "bioag. and auxil.", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "auxil.",
    TRUE ~ "any"
  ))

tax_table_PO_macrofauna_foliar_fun <- tax_table_PO_macrofauna_foliar_fun %>%
  rowwise() %>%
  mutate(interaction_matchName = if_else(any(c_across(1:8) %in% fun_table_interactions_PO$matchName), "observed", "not observed")) %>%
  ungroup()

tax_table_PO_macrofauna_foliar_fun <- tax_table_PO_macrofauna_foliar_fun %>%
  rowwise() %>%
  mutate(resource_matchName = case_when(
    # crop
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae")) ~ "crop",
    # adventice (identified in the experimental site)
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "adventice",
    # crop and adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae") & fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "crop + adventice",
    # other than crop or adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          !fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae", "Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae") &
          !is.na(fun_table_interactions_PO$resourceName)) ~ "other resource",
    # no info
    !any(fun_table_interactions_PO$matchName %in% c_across(1)) ~ "not observed",
    TRUE ~ NA_character_))

tax_table_PO_macrofauna_foliar <- tax_table_PO_macrofauna_foliar_fun

# use "finest_name" as rownames
tax_table_PO_macrofauna_foliar <- tax_table_PO_macrofauna_foliar %>% tibble::column_to_rownames("finest_name")

# transform to matrix table
tax_table_PO_macrofauna_foliar <- as.matrix(tax_table_PO_macrofauna_foliar)
```

sam_data
```{r}
# select the community
metadata_PO_macrofauna_foliar <- metadata_PO %>% filter(community %in% c("macrofauna_foliar"))

# choose the rownames
rownames(metadata_PO_macrofauna_foliar) <- metadata_PO_macrofauna_foliar[,19]

# create phyloseq object
tidy_data_PO_macrofauna_foliar = otu_table(tidy_data_PO_macrofauna_foliar, taxa_are_rows = TRUE)

tax_table_PO_macrofauna_foliar = tax_table(tax_table_PO_macrofauna_foliar)

metadata_PO_macrofauna_foliar = sample_data(metadata_PO_macrofauna_foliar)

PO_macrofauna_foliar <- phyloseq(tidy_data_PO_macrofauna_foliar, tax_table_PO_macrofauna_foliar, metadata_PO_macrofauna_foliar)

# check PO
PO_macrofauna_foliar
sample_names(PO_macrofauna_foliar)
rank_names(PO_macrofauna_foliar)
sample_variables(PO_macrofauna_foliar)
check <- verify_pq(PO_macrofauna_foliar)

#write_rds(PO_macrofauna_foliar, "data/derived_data/phyloseq_objects/PO_macrofauna_foliar_raw_2024-11-28.rds")
```

### Version stand

```{r}
# standardize abundances to the median sequencing depth
total = median(sample_sums(PO_macrofauna_foliar))
standf = function(x, t=total) round(t*(x/sum(x)))
PO_macrofauna_foliar_stand = transform_sample_counts(PO_macrofauna_foliar, standf)

# check PO
PO_macrofauna_foliar_stand

#write_rds(PO_macrofauna_foliar_stand, "data/derived_data/phyloseq_objects/PO_macrofauna_foliar_stand_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_macrofauna_foliar_stand_prop <- transform_sample_counts(PO_macrofauna_foliar_stand, fun = propfun)

#write_rds(PO_macrofauna_foliar_stand_prop, "data/derived_data/phyloseq_objects/PO_macrofauna_foliar_stand_prop_2024-11-28.rds")
```

### Version norm

```{r}
# normalize
PO_macrofauna_foliar_norm <- normalize_prop_pq(PO_macrofauna_foliar, base_log = 2, digits = 0)

# check PO
PO_macrofauna_foliar_norm

#write_rds(PO_macrofauna_foliar_norm, "data/derived_data/phyloseq_objects/PO_macrofauna_foliar_norm_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_macrofauna_foliar_norm_prop <- transform_sample_counts(PO_macrofauna_foliar_norm, fun = propfun)

#write_rds(PO_macrofauna_foliar_norm_prop, "data/derived_data/phyloseq_objects/PO_macrofauna_foliar_norm_prop_2024-11-28.rds")
```

### Preanalyses

```{r}
tidy_data_PO_macrofauna_foliar_before <- as.data.frame(t(tidy_data_PO_macrofauna_foliar))
sample_names = rownames(tidy_data_PO_macrofauna_foliar_before)
curve_before <- rarecurve(tidy_data_PO_macrofauna_foliar_before, step = 5, label = F)
# save image to rarecurve_macrofauna_foliar_raw_2024-10-22

tidy_data_PO_macrofauna_foliar_stand <- otu_table(PO_macrofauna_foliar_stand)
class(tidy_data_PO_macrofauna_foliar_stand) <- "matrix"
tidy_data_PO_macrofauna_foliar_stand <- t(tidy_data_PO_macrofauna_foliar_stand)
curve_stand <- rarecurve(tidy_data_PO_macrofauna_foliar_stand, step=5, label=F)
# save image to rarecurve_macrofauna_foliar_stand_2024-10-22

tidy_data_PO_macrofauna_foliar_norm <- otu_table(PO_macrofauna_foliar_norm)
class(tidy_data_PO_macrofauna_foliar_norm) <- "matrix"
tidy_data_PO_macrofauna_foliar_norm <- t(tidy_data_PO_macrofauna_foliar_norm)
curve_stand <- rarecurve(tidy_data_PO_macrofauna_foliar_norm, step=5, label=F)
# save image to rarecurve_macrofauna_foliar_norm_2024-10-22
```

## nematodes

### Version raw

otu_table
```{r}
# select the community
tidy_data_PO_nematodes <- tidy_data_PO %>% filter(community %in% c("nematodes"))

# remove useless columns
tidy_data_PO_nematodes <- tidy_data_PO_nematodes[,c(1,2,21)]

# transform table to taxa_are_rows = TRUE
tidy_data_PO_nematodes <- pivot_wider(tidy_data_PO_nematodes, names_from = code_cpbrd, values_from = abundance)

# replace NA by 0
tidy_data_PO_nematodes[is.na(tidy_data_PO_nematodes)] <- 0

# use "finest_name" as rownames
tidy_data_PO_nematodes <- tidy_data_PO_nematodes %>% tibble::column_to_rownames("finest_name")

# transform tbl_df to matrix table
tidy_data_PO_nematodes <- as.matrix(tidy_data_PO_nematodes)
```

tax_table
BEWARE : Check best taxa level below again (for guilds).
```{r}
# select the community
tax_table_PO_nematodes <- tax_table %>% filter(community %in% c("nematodes"))

# remove useless columns
tax_table_PO_nematodes <- tax_table_PO_nematodes[,-c(9)]

# add fun_table_guilds to the tax_table
tax_table_PO_nematodes_fun <- left_join(tax_table_PO_nematodes, fun_table_guilds_PO, by = c("genus" = "matchName"))

tax_table_PO_nematodes_fun[is.na(tax_table_PO_nematodes_fun)] <- "unassigned"

# create columns to categorize organisms according to functional assignations
tax_table_PO_nematodes_fun <- tax_table_PO_nematodes_fun %>%
  mutate(consumer = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "primary", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "secondary",
    TRUE ~ "untargeted"
  ))

tax_table_PO_nematodes_fun <- tax_table_PO_nematodes_fun %>%
  mutate(potential = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "bioag. and auxil.", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "auxil.",
    TRUE ~ "any"
  ))

tax_table_PO_nematodes_fun <- tax_table_PO_nematodes_fun %>%
  rowwise() %>%
  mutate(interaction_matchName = if_else(any(c_across(1:8) %in% fun_table_interactions_PO$matchName), "observed", "not observed")) %>%
  ungroup()

tax_table_PO_nematodes_fun <- tax_table_PO_nematodes_fun %>%
  rowwise() %>%
  mutate(resource_matchName = case_when(
    # crop
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae")) ~ "crop",
    # adventice (identified in the experimental site)
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "adventice",
    # crop and adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae") & fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "crop + adventice",
    # other than crop or adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          !fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae", "Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae") &
          !is.na(fun_table_interactions_PO$resourceName)) ~ "other resource",
    # no info
    !any(fun_table_interactions_PO$matchName %in% c_across(1)) ~ "not observed",
    TRUE ~ NA_character_))

tax_table_PO_nematodes <- tax_table_PO_nematodes_fun

# use "finest_name" as rownames
tax_table_PO_nematodes <- tax_table_PO_nematodes %>% tibble::column_to_rownames("finest_name")

# transform to matrix table
tax_table_PO_nematodes <- as.matrix(tax_table_PO_nematodes)
```

sam_data
```{r}
# select the community
metadata_PO_nematodes <- metadata_PO %>% filter(community %in% c("nematodes"))

# choose the rownames
rownames(metadata_PO_nematodes) <- metadata_PO_nematodes[,19]

# create phyloseq object
tidy_data_PO_nematodes = otu_table(tidy_data_PO_nematodes, taxa_are_rows = TRUE)

tax_table_PO_nematodes = tax_table(tax_table_PO_nematodes)

metadata_PO_nematodes = sample_data(metadata_PO_nematodes)

PO_nematodes <- phyloseq(tidy_data_PO_nematodes, tax_table_PO_nematodes, metadata_PO_nematodes)

# check PO
PO_nematodes
sample_names(PO_nematodes)
rank_names(PO_nematodes)
sample_variables(PO_nematodes)
check <- verify_pq(PO_nematodes)

#write_rds(PO_nematodes, "data/derived_data/phyloseq_objects/PO_nematodes_raw_2024-11-28.rds")
```

### Version stand

```{r}
# standardize abundances to the median sequencing depth
total = median(sample_sums(PO_nematodes))
standf = function(x, t=total) round(t*(x/sum(x)))
PO_nematodes_stand = transform_sample_counts(PO_nematodes, standf)

# check PO
PO_nematodes_stand

#write_rds(PO_nematodes_stand, "data/derived_data/phyloseq_objects/PO_nematodes_stand_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_nematodes_stand_prop <- transform_sample_counts(PO_nematodes_stand, fun = propfun)

#write_rds(PO_nematodes_stand_prop, "data/derived_data/phyloseq_objects/PO_nematodes_stand_prop_2024-11-28.rds")
```

### Version norm

```{r}
# normalize
PO_nematodes_norm <- normalize_prop_pq(PO_nematodes, base_log = 2, digits = 0)

# check PO
PO_nematodes_norm

#write_rds(PO_nematodes_norm, "data/derived_data/phyloseq_objects/PO_nematodes_norm_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_nematodes_norm_prop <- transform_sample_counts(PO_nematodes_norm, fun = propfun)

#write_rds(PO_nematodes_norm_prop, "data/derived_data/phyloseq_objects/PO_nematodes_norm_prop_2024-11-28.rds")
```

### Preanalyses

```{r}
tidy_data_PO_nematodes_before <- as.data.frame(t(tidy_data_PO_nematodes))
sample_names = rownames(tidy_data_PO_nematodes_before)
curve_before <- rarecurve(tidy_data_PO_nematodes_before, step = 5, label = F)
# save image to rarecurve_nematodes_raw_2024-10-22

tidy_data_PO_nematodes_stand <- otu_table(PO_nematodes_stand)
class(tidy_data_PO_nematodes_stand) <- "matrix"
tidy_data_PO_nematodes_stand <- t(tidy_data_PO_nematodes_stand)
curve_stand <- rarecurve(tidy_data_PO_nematodes_stand, step=5, label=F)
# save image to rarecurve_nematodes_stand_2024-10-22

tidy_data_PO_nematodes_norm <- otu_table(PO_nematodes_norm)
class(tidy_data_PO_nematodes_norm) <- "matrix"
tidy_data_PO_nematodes_norm <- t(tidy_data_PO_nematodes_norm)
curve_stand <- rarecurve(tidy_data_PO_nematodes_norm, step=5, label=F)
# save image to rarecurve_nematodes_norm_2024-10-22
```

## micro_arthropodes

### Version raw

otu_table
```{r}
# select the community
tidy_data_PO_micro_arthropodes <- tidy_data_PO %>% filter(community %in% c("micro_arthropodes"))

# remove useless columns
tidy_data_PO_micro_arthropodes <- tidy_data_PO_micro_arthropodes[,c(1,2,21)]

# transform table to taxa_are_rows = TRUE
tidy_data_PO_micro_arthropodes <- pivot_wider(tidy_data_PO_micro_arthropodes, names_from = code_cpbrd, values_from = abundance)

# replace NA by 0
tidy_data_PO_micro_arthropodes[is.na(tidy_data_PO_micro_arthropodes)] <- 0

# use "finest_name" as rownames
tidy_data_PO_micro_arthropodes <- tidy_data_PO_micro_arthropodes %>% tibble::column_to_rownames("finest_name")

# transform tbl_df to matrix table
tidy_data_PO_micro_arthropodes <- as.matrix(tidy_data_PO_micro_arthropodes)
```

tax_table
BEWARE : Check best taxa level below again (for guilds).
```{r}
# select the community
tax_table_PO_micro_arthropodes <- tax_table %>% filter(community %in% c("micro_arthropodes"))

# remove useless columns
tax_table_PO_micro_arthropodes <- tax_table_PO_micro_arthropodes[,-c(9)]

# add fun_table_guilds to the tax_table
tax_table_PO_micro_arthropodes_fun <- left_join(tax_table_PO_micro_arthropodes, fun_table_guilds_PO, by = c("family" = "matchName"))

tax_table_PO_micro_arthropodes_fun[is.na(tax_table_PO_micro_arthropodes_fun)] <- "unassigned"

# create columns to categorize organisms according to functional assignations
tax_table_PO_micro_arthropodes_fun <- tax_table_PO_micro_arthropodes_fun %>%
  mutate(consumer = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "primary", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "secondary",
    TRUE ~ "untargeted"
  ))

tax_table_PO_micro_arthropodes_fun <- tax_table_PO_micro_arthropodes_fun %>%
  mutate(potential = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "bioag. and auxil.", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "auxil.",
    TRUE ~ "any"
  ))

tax_table_PO_micro_arthropodes_fun <- tax_table_PO_micro_arthropodes_fun %>%
  rowwise() %>%
  mutate(interaction_matchName = if_else(any(c_across(1:8) %in% fun_table_interactions_PO$matchName), "observed", "not observed")) %>%
  ungroup()

tax_table_PO_micro_arthropodes_fun <- tax_table_PO_micro_arthropodes_fun %>%
  rowwise() %>%
  mutate(resource_matchName = case_when(
    # crop
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae")) ~ "crop",
    # adventice (identified in the experimental site)
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "adventice",
    # crop and adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae") & fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "crop + adventice",
    # other than crop or adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          !fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae", "Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae") &
          !is.na(fun_table_interactions_PO$resourceName)) ~ "other resource",
    # no info
    !any(fun_table_interactions_PO$matchName %in% c_across(1)) ~ "not observed",
    TRUE ~ NA_character_))

tax_table_PO_micro_arthropodes <- tax_table_PO_micro_arthropodes_fun

# use "finest_name" as rownames
tax_table_PO_micro_arthropodes <- tax_table_PO_micro_arthropodes %>% tibble::column_to_rownames("finest_name")

# transform to matrix table
tax_table_PO_micro_arthropodes <- as.matrix(tax_table_PO_micro_arthropodes)
```

sam_data
```{r}
# select the community
metadata_PO_micro_arthropodes <- metadata_PO %>% filter(community %in% c("micro_arthropodes"))

# choose the rownames
rownames(metadata_PO_micro_arthropodes) <- metadata_PO_micro_arthropodes[,19]

# create phyloseq object
tidy_data_PO_micro_arthropodes = otu_table(tidy_data_PO_micro_arthropodes, taxa_are_rows = TRUE)

tax_table_PO_micro_arthropodes = tax_table(tax_table_PO_micro_arthropodes)

metadata_PO_micro_arthropodes = sample_data(metadata_PO_micro_arthropodes)

PO_micro_arthropodes <- phyloseq(tidy_data_PO_micro_arthropodes, tax_table_PO_micro_arthropodes, metadata_PO_micro_arthropodes)

# check PO
PO_micro_arthropodes
sample_names(PO_micro_arthropodes)
rank_names(PO_micro_arthropodes)
sample_variables(PO_micro_arthropodes)
check <- verify_pq(PO_micro_arthropodes)

#write_rds(PO_micro_arthropodes, "data/derived_data/phyloseq_objects/PO_micro_arthropodes_raw_2024-11-28.rds")
```

### Version stand

```{r}
# standardize abundances to the median sequencing depth
total = median(sample_sums(PO_micro_arthropodes))
standf = function(x, t=total) round(t*(x/sum(x)))
PO_micro_arthropodes_stand = transform_sample_counts(PO_micro_arthropodes, standf)

# check PO
PO_micro_arthropodes_stand

#write_rds(PO_micro_arthropodes_stand, "data/derived_data/phyloseq_objects/PO_micro_arthropodes_stand_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_micro_arthropodes_stand_prop <- transform_sample_counts(PO_micro_arthropodes_stand, fun = propfun)

#write_rds(PO_micro_arthropodes_stand_prop, "data/derived_data/phyloseq_objects/PO_micro_arthropodes_stand_prop_2024-11-28.rds")
```

### Version norm

```{r}
# normalize
PO_micro_arthropodes_norm <- normalize_prop_pq(PO_micro_arthropodes, base_log = 2, digits = 0)

# check PO
PO_micro_arthropodes_norm

#write_rds(PO_micro_arthropodes_norm, "data/derived_data/phyloseq_objects/PO_micro_arthropodes_norm_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_micro_arthropodes_norm_prop <- transform_sample_counts(PO_micro_arthropodes_norm, fun = propfun)

#write_rds(PO_micro_arthropodes_norm_prop, "data/derived_data/phyloseq_objects/PO_micro_arthropodes_norm_prop_2024-11-28.rds")
```

### Preanalyses

```{r}
tidy_data_PO_micro_arthropodes_before <- as.data.frame(t(tidy_data_PO_micro_arthropodes))
sample_names = rownames(tidy_data_PO_micro_arthropodes_before)
curve_before <- rarecurve(tidy_data_PO_micro_arthropodes_before, step = 5, label = F)
# save image to rarecurve_micro_arthropodes_raw_2024-10-22

tidy_data_PO_micro_arthropodes_stand <- otu_table(PO_micro_arthropodes_stand)
class(tidy_data_PO_micro_arthropodes_stand) <- "matrix"
tidy_data_PO_micro_arthropodes_stand <- t(tidy_data_PO_micro_arthropodes_stand)
curve_stand <- rarecurve(tidy_data_PO_micro_arthropodes_stand, step=5, label=F)
# save image to rarecurve_micro_arthropodes_stand_2024-10-22

tidy_data_PO_micro_arthropodes_norm <- otu_table(PO_micro_arthropodes_norm)
class(tidy_data_PO_micro_arthropodes_norm) <- "matrix"
tidy_data_PO_micro_arthropodes_norm <- t(tidy_data_PO_micro_arthropodes_norm)
curve_stand <- rarecurve(tidy_data_PO_micro_arthropodes_norm, step=5, label=F)
# save image to rarecurve_micro_arthropodes_norm_2024-10-22
```

## microorganisms

### bacteria

#### Version raw

otu_table
```{r}
# select the community
tidy_data_PO_bacteria <- tidy_data_PO %>% filter(community %in% c("bacteria"))

# remove useless columns
tidy_data_PO_bacteria <- tidy_data_PO_bacteria[,c(1,2,21)]

# transform table to taxa_are_rows = TRUE
tidy_data_PO_bacteria <- pivot_wider(tidy_data_PO_bacteria, names_from = code_cpbrd, values_from = abundance)

# replace NA by 0
tidy_data_PO_bacteria[is.na(tidy_data_PO_bacteria)] <- 0

# use "finest_name" as rownames
tidy_data_PO_bacteria <- tidy_data_PO_bacteria %>% tibble::column_to_rownames("finest_name")

# transform tbl_df to matrix table
tidy_data_PO_bacteria <- as.matrix(tidy_data_PO_bacteria)
```

tax_table
BEWARE : Check best taxa level below again (for guilds).
```{r}
# select the community
tax_table_PO_bacteria <- tax_table %>% filter(community %in% c("bacteria"))

# remove useless columns
tax_table_PO_bacteria <- tax_table_PO_bacteria[,-c(9)]

# add fun_table_guilds to the tax_table
tax_table_PO_bacteria_fun <- left_join(tax_table_PO_bacteria, fun_table_guilds_PO, by = c("genus" = "matchName"))

tax_table_PO_bacteria_fun[is.na(tax_table_PO_bacteria_fun)] <- "unassigned"

# create columns to categorize organisms according to functional assignations
tax_table_PO_bacteria_fun <- tax_table_PO_bacteria_fun %>%
  mutate(consumer = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "primary", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "secondary",
    TRUE ~ "untargeted"
  ))

tax_table_PO_bacteria_fun <- tax_table_PO_bacteria_fun %>%
  mutate(potential = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "bioag. and auxil.", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "auxil.",
    TRUE ~ "any"
  ))

tax_table_PO_bacteria_fun <- tax_table_PO_bacteria_fun %>%
  rowwise() %>%
  mutate(interaction_matchName = if_else(any(c_across(1:8) %in% fun_table_interactions_PO$matchName), "observed", "not observed")) %>%
  ungroup()

tax_table_PO_bacteria_fun <- tax_table_PO_bacteria_fun %>%
  rowwise() %>%
  mutate(resource_matchName = case_when(
    # crop
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae")) ~ "crop",
    # adventice (identified in the experimental site)
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "adventice",
    # crop and adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae") & fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "crop + adventice",
    # other than crop or adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          !fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae", "Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae") &
          !is.na(fun_table_interactions_PO$resourceName)) ~ "other resource",
    # no info
    !any(fun_table_interactions_PO$matchName %in% c_across(1)) ~ "not observed",
    TRUE ~ NA_character_))

tax_table_PO_bacteria <- tax_table_PO_bacteria_fun

# use "finest_name" as rownames
tax_table_PO_bacteria <- tax_table_PO_bacteria %>% tibble::column_to_rownames("finest_name")

# transform to matrix table
tax_table_PO_bacteria <- as.matrix(tax_table_PO_bacteria)
```

sam_data
```{r}
# select the community
metadata_PO_bacteria <- metadata_PO %>% filter(community %in% c("bacteria"))

# choose the rownames
rownames(metadata_PO_bacteria) <- metadata_PO_bacteria[,19]

# create phyloseq object
tidy_data_PO_bacteria = otu_table(tidy_data_PO_bacteria, taxa_are_rows = TRUE)

tax_table_PO_bacteria = tax_table(tax_table_PO_bacteria)

metadata_PO_bacteria = sample_data(metadata_PO_bacteria)

PO_bacteria <- phyloseq(tidy_data_PO_bacteria, tax_table_PO_bacteria, metadata_PO_bacteria)

# check PO
PO_bacteria
sample_names(PO_bacteria)
rank_names(PO_bacteria)
sample_variables(PO_bacteria)
check <- verify_pq(PO_bacteria)

#write_rds(PO_bacteria, "data/derived_data/phyloseq_objects/PO_bacteria_raw_2024-11-28.rds")
```

#### Version stand

```{r}
# standardize abundances to the median sequencing depth
total = median(sample_sums(PO_bacteria))
standf = function(x, t=total) round(t*(x/sum(x)))
PO_bacteria_stand = transform_sample_counts(PO_bacteria, standf)

# check PO
PO_bacteria_stand

#write_rds(PO_bacteria_stand, "data/derived_data/phyloseq_objects/PO_bacteria_stand_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_bacteria_stand_prop <- transform_sample_counts(PO_bacteria_stand, fun = propfun)

#write_rds(PO_bacteria_stand_prop, "data/derived_data/phyloseq_objects/PO_bacteria_stand_prop_2024-11-28.rds")
```

#### Version norm

```{r}
# normalize
PO_bacteria_norm <- normalize_prop_pq(PO_bacteria, base_log = 2, digits = 0)

# check PO
PO_bacteria_norm

#write_rds(PO_bacteria_norm, "data/derived_data/phyloseq_objects/PO_bacteria_norm_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_bacteria_norm_prop <- transform_sample_counts(PO_bacteria_norm, fun = propfun)

#write_rds(PO_bacteria_norm_prop, "data/derived_data/phyloseq_objects/PO_bacteria_norm_prop_2024-11-28.rds")
```

#### Preanalyses

```{r}
tidy_data_PO_bacteria_before <- as.data.frame(t(tidy_data_PO_bacteria))
sample_names = rownames(tidy_data_PO_bacteria_before)
curve_before <- rarecurve(tidy_data_PO_bacteria_before, step = 5, label = F)
# save image to rarecurve_bacteria_raw_2024-10-22

tidy_data_PO_bacteria_stand <- otu_table(PO_bacteria_stand)
class(tidy_data_PO_bacteria_stand) <- "matrix"
tidy_data_PO_bacteria_stand <- t(tidy_data_PO_bacteria_stand)
curve_stand <- rarecurve(tidy_data_PO_bacteria_stand, step=5, label=F)
# save image to rarecurve_bacteria_stand_2024-10-22

tidy_data_PO_bacteria_norm <- otu_table(PO_bacteria_norm)
class(tidy_data_PO_bacteria_norm) <- "matrix"
tidy_data_PO_bacteria_norm <- t(tidy_data_PO_bacteria_norm)
curve_stand <- rarecurve(tidy_data_PO_bacteria_norm, step=5, label=F)
# save image to rarecurve_bacteria_norm_2024-10-22
```

### fungi

#### Version raw

otu_table
```{r}
# select the community
tidy_data_PO_fungi <- tidy_data_PO %>% filter(community %in% c("fungi"))

# remove useless columns
tidy_data_PO_fungi <- tidy_data_PO_fungi[,c(1,2,21)]

# transform table to taxa_are_rows = TRUE
tidy_data_PO_fungi <- pivot_wider(tidy_data_PO_fungi, names_from = code_cpbrd, values_from = abundance)

# replace NA by 0
tidy_data_PO_fungi[is.na(tidy_data_PO_fungi)] <- 0

# use "finest_name" as rownames
tidy_data_PO_fungi <- tidy_data_PO_fungi %>% tibble::column_to_rownames("finest_name")

# transform tbl_df to matrix table
tidy_data_PO_fungi <- as.matrix(tidy_data_PO_fungi)
```

tax_table
BEWARE : Check best taxa level below again (for guilds).
```{r}
# select the community
tax_table_PO_fungi <- tax_table %>% filter(community %in% c("fungi"))

# remove useless columns
tax_table_PO_fungi <- tax_table_PO_fungi[,-c(9)]

# add fun_table_guilds to the tax_table
tax_table_PO_fungi_fun <- left_join(tax_table_PO_fungi, fun_table_guilds_PO, by = c("genus" = "matchName"))

tax_table_PO_fungi_fun[is.na(tax_table_PO_fungi_fun)] <- "unassigned"

# create columns to categorize organisms according to functional assignations
tax_table_PO_fungi_fun <- tax_table_PO_fungi_fun %>%
  mutate(consumer = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "primary", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "secondary",
    TRUE ~ "untargeted"
  ))

tax_table_PO_fungi_fun <- tax_table_PO_fungi_fun %>%
  mutate(potential = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "bioag. and auxil.", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "auxil.",
    TRUE ~ "any"
  ))

tax_table_PO_fungi_fun <- tax_table_PO_fungi_fun %>%
  rowwise() %>%
  mutate(interaction_matchName = if_else(any(c_across(1:8) %in% fun_table_interactions_PO$matchName), "observed", "not observed")) %>%
  ungroup()

tax_table_PO_fungi_fun <- tax_table_PO_fungi_fun %>%
  rowwise() %>%
  mutate(resource_matchName = case_when(
    # crop
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae")) ~ "crop",
    # adventice (identified in the experimental site)
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "adventice",
    # crop and adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae") & fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "crop + adventice",
    # other than crop or adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          !fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae", "Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae") &
          !is.na(fun_table_interactions_PO$resourceName)) ~ "other resource",
    # no info
    !any(fun_table_interactions_PO$matchName %in% c_across(1)) ~ "not observed",
    TRUE ~ NA_character_))

tax_table_PO_fungi <- tax_table_PO_fungi_fun

# use "finest_name" as rownames
tax_table_PO_fungi <- tax_table_PO_fungi %>% tibble::column_to_rownames("finest_name")

# transform to matrix table
tax_table_PO_fungi <- as.matrix(tax_table_PO_fungi)
```

sam_data
```{r}
# select the community
metadata_PO_fungi <- metadata_PO %>% filter(community %in% c("fungi"))

# choose the rownames
rownames(metadata_PO_fungi) <- metadata_PO_fungi[,19]

# create phyloseq object
tidy_data_PO_fungi = otu_table(tidy_data_PO_fungi, taxa_are_rows = TRUE)

tax_table_PO_fungi = tax_table(tax_table_PO_fungi)

metadata_PO_fungi = sample_data(metadata_PO_fungi)

PO_fungi <- phyloseq(tidy_data_PO_fungi, tax_table_PO_fungi, metadata_PO_fungi)

# check PO
PO_fungi
sample_names(PO_fungi)
rank_names(PO_fungi)
sample_variables(PO_fungi)
check <- verify_pq(PO_fungi)

#write_rds(PO_fungi, "data/derived_data/phyloseq_objects/PO_fungi_raw_2024-11-28.rds")
```

#### Version stand

```{r}
# standardize abundances to the median sequencing depth
total = median(sample_sums(PO_fungi))
standf = function(x, t=total) round(t*(x/sum(x)))
PO_fungi_stand = transform_sample_counts(PO_fungi, standf)

# check PO
PO_fungi_stand

#write_rds(PO_fungi_stand, "data/derived_data/phyloseq_objects/PO_fungi_stand_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_fungi_stand_prop <- transform_sample_counts(PO_fungi_stand, fun = propfun)

#write_rds(PO_fungi_stand_prop, "data/derived_data/phyloseq_objects/PO_fungi_stand_prop_2024-11-28.rds")
```

#### Version norm

```{r}
# normalize
PO_fungi_norm <- normalize_prop_pq(PO_fungi, base_log = 2, digits = 0)

# check PO
PO_fungi_norm

#write_rds(PO_fungi_norm, "data/derived_data/phyloseq_objects/PO_fungi_norm_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_fungi_norm_prop <- transform_sample_counts(PO_fungi_norm, fun = propfun)

#write_rds(PO_fungi_norm_prop, "data/derived_data/phyloseq_objects/PO_fungi_norm_prop_2024-11-28.rds")
```

#### Preanalyses

```{r}
tidy_data_PO_fungi_before <- as.data.frame(t(tidy_data_PO_fungi))
sample_names = rownames(tidy_data_PO_fungi_before)
curve_before <- rarecurve(tidy_data_PO_fungi_before, step = 5, label = F)
# save image to rarecurve_fungi_raw_2024-10-22

tidy_data_PO_fungi_stand <- otu_table(PO_fungi_stand)
class(tidy_data_PO_fungi_stand) <- "matrix"
tidy_data_PO_fungi_stand <- t(tidy_data_PO_fungi_stand)
curve_stand <- rarecurve(tidy_data_PO_fungi_stand, step=5, label=F)
# save image to rarecurve_fungi_stand_2024-10-22

tidy_data_PO_fungi_norm <- otu_table(PO_fungi_norm)
class(tidy_data_PO_fungi_norm) <- "matrix"
tidy_data_PO_fungi_norm <- t(tidy_data_PO_fungi_norm)
curve_stand <- rarecurve(tidy_data_PO_fungi_norm, step=5, label=F)
# save image to rarecurve_fungi_norm_2024-10-22
```

### protists

#### Version raw

otu_table
```{r}
# select the community
tidy_data_PO_protists <- tidy_data_PO %>% filter(community %in% c("protists"))

# remove useless columns
tidy_data_PO_protists <- tidy_data_PO_protists[,c(1,2,21)]

# transform table to taxa_are_rows = TRUE
tidy_data_PO_protists <- pivot_wider(tidy_data_PO_protists, names_from = code_cpbrd, values_from = abundance)

# replace NA by 0
tidy_data_PO_protists[is.na(tidy_data_PO_protists)] <- 0

# use "finest_name" as rownames
tidy_data_PO_protists <- tidy_data_PO_protists %>% tibble::column_to_rownames("finest_name")

# transform tbl_df to matrix table
tidy_data_PO_protists <- as.matrix(tidy_data_PO_protists)
```

tax_table
BEWARE : Check best taxa level below again (for guilds).
```{r}
# select the community
tax_table_PO_protists <- tax_table %>% filter(community %in% c("protists"))

# remove useless columns
tax_table_PO_protists <- tax_table_PO_protists[,-c(9)]

# add fun_table_guilds to the tax_table
tax_table_PO_protists_fun <- left_join(tax_table_PO_protists, fun_table_guilds_PO, by = c("genus" = "matchName"))

tax_table_PO_protists_fun[is.na(tax_table_PO_protists_fun)] <- "unassigned"

# create columns to categorize organisms according to functional assignations
tax_table_PO_protists_fun <- tax_table_PO_protists_fun %>%
  mutate(consumer = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "primary", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "secondary",
    TRUE ~ "untargeted"
  ))

tax_table_PO_protists_fun <- tax_table_PO_protists_fun %>%
  mutate(potential = case_when(
    grepl("het_herbivore", abr_1_guild_level_2_AND) |
      grepl("par_plant parasite", abr_3_guild_level_4_AND) |
      grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "bioag. and auxil.", # het_grazer (guild_level_2) and flu_sucker might be added in this category (guild_level_3)
    grepl("car_predator", abr_2_guild_level_3_AND) |
      grepl("sym_parasite", abr_2_guild_level_3_AND) |
      grepl("het_parasitoid", abr_1_guild_level_2_AND) &
      !grepl("par_plant parasite", abr_3_guild_level_4_AND) &
      !grepl("pat_plant pathogen", abr_4_guild_level_5_AND) ~ "auxil.",
    TRUE ~ "any"
  ))

tax_table_PO_protists_fun <- tax_table_PO_protists_fun %>%
  rowwise() %>%
  mutate(interaction_matchName = if_else(any(c_across(1:8) %in% fun_table_interactions_PO$matchName), "observed", "not observed")) %>%
  ungroup()

tax_table_PO_protists_fun <- tax_table_PO_protists_fun %>%
  rowwise() %>%
  mutate(resource_matchName = case_when(
    # crop
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae")) ~ "crop",
    # adventice (identified in the experimental site)
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "adventice",
    # crop and adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae") & fun_table_interactions_PO$resourceName %in% c("Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae")) ~ "crop + adventice",
    # other than crop or adventice
    any(fun_table_interactions_PO$matchName %in% c_across(1) &
          !fun_table_interactions_PO$resourceName %in% c("Poaceae", "Fabaceae", "Asteraceae", "Caryophillaceae", "Papaveraceae", "Boraginaceae", "Geraniaceae", "Apiaceae", "Rubiaceae", "Lamiaceae", "Convolvulaceae", "Polygonaceae", "Plantaginaceae", "Scrophulariaceae") &
          !is.na(fun_table_interactions_PO$resourceName)) ~ "other resource",
    # no info
    !any(fun_table_interactions_PO$matchName %in% c_across(1)) ~ "not observed",
    TRUE ~ NA_character_))

tax_table_PO_protists <- tax_table_PO_protists_fun

# use "finest_name" as rownames
tax_table_PO_protists <- tax_table_PO_protists %>% tibble::column_to_rownames("finest_name")

# transform to matrix table
tax_table_PO_protists <- as.matrix(tax_table_PO_protists)
```

sam_data
```{r}
# select the community
metadata_PO_protists <- metadata_PO %>% filter(community %in% c("protists"))

# choose the rownames
rownames(metadata_PO_protists) <- metadata_PO_protists[,19]

# create phyloseq object
tidy_data_PO_protists = otu_table(tidy_data_PO_protists, taxa_are_rows = TRUE)

tax_table_PO_protists = tax_table(tax_table_PO_protists)

metadata_PO_protists = sample_data(metadata_PO_protists)

PO_protists <- phyloseq(tidy_data_PO_protists, tax_table_PO_protists, metadata_PO_protists)

# check PO
PO_protists
sample_names(PO_protists)
rank_names(PO_protists)
sample_variables(PO_protists)
check <- verify_pq(PO_protists)

#write_rds(PO_protists, "data/derived_data/phyloseq_objects/PO_protists_raw_2024-11-28.rds")
```

#### Version stand

```{r}
# standardize abundances to the median sequencing depth
total = median(sample_sums(PO_protists))
standf = function(x, t=total) round(t*(x/sum(x)))
PO_protists_stand = transform_sample_counts(PO_protists, standf)

# check PO
PO_protists_stand

#write_rds(PO_protists_stand, "data/derived_data/phyloseq_objects/PO_protists_stand_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_protists_stand_prop <- transform_sample_counts(PO_protists_stand, fun = propfun)

#write_rds(PO_protists_stand_prop, "data/derived_data/phyloseq_objects/PO_protists_stand_prop_2024-11-28.rds")
```

#### Version norm

```{r}
# normalize
PO_protists_norm <- normalize_prop_pq(PO_protists, base_log = 2, digits = 0)

# check PO
PO_protists_norm

#write_rds(PO_protists_norm, "data/derived_data/phyloseq_objects/PO_protists_norm_2024-11-28.rds")

propfun = function(x){
  xprop = (x / sum(x))
  return(xprop)
}
PO_protists_norm_prop <- transform_sample_counts(PO_protists_norm, fun = propfun)

#write_rds(PO_protists_norm_prop, "data/derived_data/phyloseq_objects/PO_protists_norm_prop_2024-11-28.rds")
```

#### Preanalyses

```{r}
tidy_data_PO_protists_before <- as.data.frame(t(tidy_data_PO_protists))
sample_names = rownames(tidy_data_PO_protists_before)
curve_before <- rarecurve(tidy_data_PO_protists_before, step = 5, label = F)
# save image to rarecurve_protists_raw_2024-10-22

tidy_data_PO_protists_stand <- otu_table(PO_protists_stand)
class(tidy_data_PO_protists_stand) <- "matrix"
tidy_data_PO_protists_stand <- t(tidy_data_PO_protists_stand)
curve_stand <- rarecurve(tidy_data_PO_protists_stand, step=5, label=F)
# save image to rarecurve_protists_stand_2024-10-22

tidy_data_PO_protists_norm <- otu_table(PO_protists_norm)
class(tidy_data_PO_protists_norm) <- "matrix"
tidy_data_PO_protists_norm <- t(tidy_data_PO_protists_norm)
curve_stand <- rarecurve(tidy_data_PO_protists_norm, step=5, label=F)
# save image to rarecurve_protists_norm_2024-10-22
```

## all

### Merge PO

#### Version raw

```{r}
PO_macrofauna_surface_raw <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_surface_raw_2024-11-28.rds")
PO_macrofauna_aerial_raw <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_aerial_raw_2024-11-28.rds")
PO_macrofauna_foliar_raw <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_foliar_raw_2024-11-28.rds")
PO_nematodes_raw <- read_rds("data/derived_data/phyloseq_objects/PO_nematodes_raw_2024-11-28.rds")
PO_micro_arthropodes_raw <- read_rds("data/derived_data/phyloseq_objects/PO_micro_arthropodes_raw_2024-11-28.rds")
PO_bacteria_raw <- read_rds("data/derived_data/phyloseq_objects/PO_bacteria_raw_2024-11-28.rds")
PO_fungi_raw <- read_rds("data/derived_data/phyloseq_objects/PO_fungi_raw_2024-11-28.rds")
PO_protists_raw <- read_rds("data/derived_data/phyloseq_objects/PO_protists_raw_2024-11-28.rds")

PO_all_raw <- merge_phyloseq(PO_macrofauna_surface_raw, PO_macrofauna_aerial_raw, PO_macrofauna_foliar_raw, PO_nematodes_raw, PO_micro_arthropodes_raw, PO_bacteria_raw, PO_fungi_raw, PO_protists_raw)
check <- verify_pq(PO_all_raw)
PO_all_raw

#write_rds(PO_all_raw, "data/derived_data/phyloseq_objects/PO_all_raw_2024-11-28.rds")

PO_all_raw_filterdate <- subset_samples_no_zero(PO_all_raw, date == "17.04.2023")
check <- verify_pq(PO_all_raw_filterdate)
PO_all_raw_filterdate

#write_rds(PO_all_raw_filterdate, "data/derived_data/phyloseq_objects/PO_all_raw_filterdate_2024-11-28.rds")
```

#### Version stand

```{r}
PO_macrofauna_surface_stand <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_surface_stand_2024-11-28.rds")
PO_macrofauna_aerial_stand <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_aerial_stand_2024-11-28.rds")
PO_macrofauna_foliar_stand <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_foliar_stand_2024-11-28.rds")
PO_nematodes_stand <- read_rds("data/derived_data/phyloseq_objects/PO_nematodes_stand_2024-11-28.rds")
PO_micro_arthropodes_stand <- read_rds("data/derived_data/phyloseq_objects/PO_micro_arthropodes_stand_2024-11-28.rds")
PO_bacteria_stand <- read_rds("data/derived_data/phyloseq_objects/PO_bacteria_stand_2024-11-28.rds")
PO_fungi_stand <- read_rds("data/derived_data/phyloseq_objects/PO_fungi_stand_2024-11-28.rds")
PO_protists_stand <- read_rds("data/derived_data/phyloseq_objects/PO_protists_stand_2024-11-28.rds")

PO_all_stand <- merge_phyloseq(PO_macrofauna_surface_stand, PO_macrofauna_aerial_stand, PO_macrofauna_foliar_stand, PO_nematodes_stand, PO_micro_arthropodes_stand, PO_bacteria_stand, PO_fungi_stand, PO_protists_stand)
check <- verify_pq(PO_all_stand)
PO_all_stand

#write_rds(PO_all_stand, "data/derived_data/phyloseq_objects/PO_all_stand_2024-11-28.rds")

PO_all_stand_filterdate <- subset_samples_no_zero(PO_all_stand, date == "17.04.2023")
check <- verify_pq(PO_all_stand_filterdate)
PO_all_stand_filterdate

#write_rds(PO_all_stand_filterdate, "data/derived_data/phyloseq_objects/PO_all_stand_filterdate_2024-11-28.rds")
```

#### Version stand_prop

```{r}
PO_macrofauna_surface_stand_prop <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_surface_stand_prop_2024-11-28.rds")
PO_macrofauna_aerial_stand_prop <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_aerial_stand_prop_2024-11-28.rds")
PO_macrofauna_foliar_stand_prop <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_foliar_stand_prop_2024-11-28.rds")
PO_nematodes_stand_prop <- read_rds("data/derived_data/phyloseq_objects/PO_nematodes_stand_prop_2024-11-28.rds")
PO_micro_arthropodes_stand_prop <- read_rds("data/derived_data/phyloseq_objects/PO_micro_arthropodes_stand_prop_2024-11-28.rds")
PO_bacteria_stand_prop <- read_rds("data/derived_data/phyloseq_objects/PO_bacteria_stand_prop_2024-11-28.rds")
PO_fungi_stand_prop <- read_rds("data/derived_data/phyloseq_objects/PO_fungi_stand_prop_2024-11-28.rds")
PO_protists_stand_prop <- read_rds("data/derived_data/phyloseq_objects/PO_protists_stand_prop_2024-11-28.rds")

PO_all_stand_prop <- merge_phyloseq(PO_macrofauna_surface_stand_prop, PO_macrofauna_aerial_stand_prop, PO_macrofauna_foliar_stand_prop, PO_nematodes_stand_prop, PO_micro_arthropodes_stand_prop, PO_bacteria_stand_prop, PO_fungi_stand_prop, PO_protists_stand_prop)
check <- verify_pq(PO_all_stand_prop)
PO_all_stand_prop

#write_rds(PO_all_stand_prop, "data/derived_data/phyloseq_objects/PO_all_stand_prop_2024-11-28.rds")

PO_all_stand_prop_filterdate <- subset_samples_no_zero(PO_all_stand_prop, date == "17.04.2023")
check <- verify_pq(PO_all_stand_prop_filterdate)
PO_all_stand_prop_filterdate

#write_rds(PO_all_stand_prop_filterdate, "data/derived_data/phyloseq_objects/PO_all_stand_prop_filterdate_2024-11-28.rds")
```

#### Version norm

```{r}
PO_macrofauna_surface_norm <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_surface_norm_2024-11-28.rds")
PO_macrofauna_aerial_norm <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_aerial_norm_2024-11-28.rds")
PO_macrofauna_foliar_norm <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_foliar_norm_2024-11-28.rds")
PO_nematodes_norm <- read_rds("data/derived_data/phyloseq_objects/PO_nematodes_norm_2024-11-28.rds")
PO_micro_arthropodes_norm <- read_rds("data/derived_data/phyloseq_objects/PO_micro_arthropodes_norm_2024-11-28.rds")
PO_bacteria_norm <- read_rds("data/derived_data/phyloseq_objects/PO_bacteria_norm_2024-11-28.rds")
PO_fungi_norm <- read_rds("data/derived_data/phyloseq_objects/PO_fungi_norm_2024-11-28.rds")
PO_protists_norm <- read_rds("data/derived_data/phyloseq_objects/PO_protists_norm_2024-11-28.rds")

PO_all_norm <- merge_phyloseq(PO_macrofauna_surface_norm, PO_macrofauna_aerial_norm, PO_macrofauna_foliar_norm, PO_nematodes_norm, PO_micro_arthropodes_norm, PO_bacteria_norm, PO_fungi_norm, PO_protists_norm)
check <- verify_pq(PO_all_norm)
PO_all_norm

#write_rds(PO_all_norm, "data/derived_data/phyloseq_objects/PO_all_norm_2024-11-28.rds")

PO_all_norm_filterdate <- subset_samples_no_zero(PO_all_norm, date == "17.04.2023")
check <- verify_pq(PO_all_norm_filterdate)
PO_all_norm_filterdate

#write_rds(PO_all_norm_filterdate, "data/derived_data/phyloseq_objects/PO_all_norm_filterdate_2024-11-28.rds")
```

#### Version norm_prop

```{r}
PO_macrofauna_surface_norm_prop <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_surface_norm_prop_2024-11-28.rds")
PO_macrofauna_aerial_norm_prop <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_aerial_norm_prop_2024-11-28.rds")
PO_macrofauna_foliar_norm_prop <- read_rds("data/derived_data/phyloseq_objects/PO_macrofauna_foliar_norm_prop_2024-11-28.rds")
PO_nematodes_norm_prop <- read_rds("data/derived_data/phyloseq_objects/PO_nematodes_norm_prop_2024-11-28.rds")
PO_micro_arthropodes_norm_prop <- read_rds("data/derived_data/phyloseq_objects/PO_micro_arthropodes_norm_prop_2024-11-28.rds")
PO_bacteria_norm_prop <- read_rds("data/derived_data/phyloseq_objects/PO_bacteria_norm_prop_2024-11-28.rds")
PO_fungi_norm_prop <- read_rds("data/derived_data/phyloseq_objects/PO_fungi_norm_prop_2024-11-28.rds")
PO_protists_norm_prop <- read_rds("data/derived_data/phyloseq_objects/PO_protists_norm_prop_2024-11-28.rds")

PO_all_norm_prop <- merge_phyloseq(PO_macrofauna_surface_norm_prop, PO_macrofauna_aerial_norm_prop, PO_macrofauna_foliar_norm_prop, PO_nematodes_norm_prop, PO_micro_arthropodes_norm_prop, PO_bacteria_norm_prop, PO_fungi_norm_prop, PO_protists_norm_prop)
check <- verify_pq(PO_all_norm_prop)
PO_all_norm_prop

#write_rds(PO_all_norm_prop, "data/derived_data/phyloseq_objects/PO_all_norm_prop_2024-11-28.rds")

PO_all_norm_prop_filterdate <- subset_samples_no_zero(PO_all_norm_prop, date == "17.04.2023")
check <- verify_pq(PO_all_norm_prop_filterdate)
PO_all_norm_prop_filterdate

#write_rds(PO_all_norm_prop_filterdate, "data/derived_data/phyloseq_objects/PO_all_norm_prop_filterdate_2024-11-28.rds")
```

### Analyses

```{r}
PO_all_raw_filterdate <- read_rds("data/derived_data/phyloseq_objects/PO_all_raw_filterdate_2024-11-28.rds")
PO_all_stand_filterdate <- read_rds("data/derived_data/phyloseq_objects/PO_all_stand_filterdate_2024-11-28.rds")
PO_all_stand_prop_filterdate <- read_rds("data/derived_data/phyloseq_objects/PO_all_stand_prop_filterdate_2024-11-28.rds")
PO_all_norm_filterdate <- read_rds("data/derived_data/phyloseq_objects/PO_all_norm_filterdate_2024-11-28.rds")
PO_all_norm_prop_filterdate <- read_rds("data/derived_data/phyloseq_objects/PO_all_norm_prop_filterdate_2024-11-28.rds")
```

#### rarecurves

```{r}
tidy_data_PO_all_raw_filterdate <- otu_table(PO_all_raw_filterdate)
class(tidy_data_PO_all_raw_filterdate) <- "matrix"
tidy_data_PO_all_raw_filterdate <- t(tidy_data_PO_all_raw_filterdate)
curve_before <- rarecurve(tidy_data_PO_all_raw_filterdate, step = 50, label = F)
# save image to rarecurves_all_raw_filterdate_2024-10-01

tidy_data_PO_all_stand_filterdate <- otu_table(PO_all_stand_filterdate)
class(tidy_data_PO_all_stand_filterdate) <- "matrix"
tidy_data_PO_all_stand_filterdate <- t(tidy_data_PO_all_stand_filterdate)
curve_stand <- rarecurve(tidy_data_PO_all_stand_filterdate, step=50, label=F)
# save image to rarecurves_all_stand_filterdate_2024-10-01

tidy_data_PO_all_norm_filterdate <- otu_table(PO_all_norm_filterdate)
class(tidy_data_PO_all_norm_filterdate) <- "matrix"
tidy_data_PO_all_norm_filterdate <- t(tidy_data_PO_all_norm_filterdate)
curve_stand <- rarecurve(tidy_data_PO_all_norm_filterdate, step=50, label=F)
# save image to rarecurves_all_norm_filterdate_2024-10-01
```

#### Chose version and order factors

```{r}
# Choose the version
## all
PO <- PO_all_stand_filterdate # for alpha diversity
PO <- PO_all_stand_prop_filterdate # for beta diversity
PO <- PO_all_norm_prop_filterdate # for abundance graphs and tests

## macrofauna_surface (to test individually)
PO <- PO_macrofauna_surface_stand # used
PO <- PO_macrofauna_surface_stand_prop # used
PO <- PO_macrofauna_surface_norm_prop # used
```

```{r}
## Filter functional groups
PO <- subset_taxa(PO, potential=="auxil")
PO <- subset_taxa(PO, potential=="bioag and auxil")
PO <- subset_taxa(PO, consumer=="primary")
PO <- subset_taxa(PO, consumer=="secondary")
```

```{r}
# Filter date
PO <- subset_samples_no_zero(PO, date == "17.04.2023")

# Remove undetected taxa
phyloseq_validate(PO, remove_undetected = T)

# Order levels
PO@sam_data$code_cp <- factor(PO@sam_data$code_cp, levels = order_cp)
PO@sam_data$config <- factor(PO@sam_data$config, levels = order_config)
PO@sam_data$plant_cover <- factor(PO@sam_data$plant_cover, levels = order_plantcover)
```

#### alpha diversity
(with stand)

```{r}
observed_cp <- plot_richness(PO, x="code_cp", shape="block", color="code_cp", measures=c("Observed")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_cp +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="Alpha diversity", x ="Configurational heterogeneity and plant cover", y="Observed richness") +
  guides(color = F, shape = F) +
  scale_x_discrete(labels = label_wrap(10))
observed_cp$layers <- observed_cp$layers[-1]
observed_cp

shannon_cp <- plot_richness(PO, x="code_cp", shape="block", color="code_cp", measures=c("Shannon")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_cp +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="Configurational heterogeneity and plant cover", y="Shannon index") +
  guides(color = F, shape = F) +
  scale_x_discrete(labels = label_wrap(10))
shannon_cp$layers <- shannon_cp$layers[-1]
shannon_cp

simpson_cp <- plot_richness(PO, x="code_cp", shape="block", color="code_cp", measures=c("InvSimpson")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_cp +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="Configurational heterogeneity and plant cover", y="Simpson inverse index") +
  guides(color = F, shape = F) +
  scale_x_discrete(labels = label_wrap(10))
simpson_cp$layers <- simpson_cp$layers[-1]
simpson_cp

alpha_graph_cp <- plot_grid(observed_cp, shannon_cp, simpson_cp, ncol=1)
alpha_graph_cp

#ggsave("analyses/alpha_all_stand_filterdate_cp_2024-11-28.png", width=3.3, height=8)
#svglite(file="analyses/alpha_all_stand_filterdate_cp_2024-11-28.svg", width = 3.3, height = 8, bg = "white", pointsize = 16)
alpha_graph_cp
dev.off()
```

```{r}
observed_config <- plot_richness(PO, x="config", shape="block", color="config", measures=c("Observed")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_config +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="Alpha diversity", x ="Configurational heterogeneity", y="Observed richness") +
  guides(color = F, shape = F)
observed_config$layers <- observed_config$layers[-1]
observed_config

shannon_config <- plot_richness(PO, x="config", shape="block", color="config", measures=c("Shannon")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_config +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="Configurational heterogeneity", y="Shannon index") +
  guides(color = F, shape = F)
shannon_config$layers <- shannon_config$layers[-1]
shannon_config

simpson_config <- plot_richness(PO, x="config", shape="block", color="config", measures=c("InvSimpson")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_config +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="Configurational heterogeneity", y="Simpson inverse index") +
  guides(color = F, shape = F)
simpson_config$layers <- simpson_config$layers[-1]
simpson_config

alpha_graph_config <- plot_grid(observed_config, shannon_config, simpson_config, ncol=1)
alpha_graph_config

#ggsave("analyses/alpha_all_stand_filterdate_config_2024-11-28.png", width=2.2, height=8)
#svglite(file="analyses/alpha_all_stand_filterdate_config_2024-11-28.svg", width = 2.2, height = 8, bg = "white", pointsize = 16)
alpha_graph_config
dev.off()
```

```{r}
observed_plant_cover <- plot_richness(PO, x="plant_cover", shape="block", color="plant_cover", measures=c("Observed")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_plant_cover +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="Alpha diversity", x ="Plant cover", y="Observed richness") +
  guides(color = F, shape = F)
observed_plant_cover$layers <- observed_plant_cover$layers[-1]
observed_plant_cover

shannon_plant_cover <- plot_richness(PO, x="plant_cover", shape="block", color="plant_cover", measures=c("Shannon")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_plant_cover +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="Plant cover", y="Shannon index") +
  guides(color = F, shape = F)
shannon_plant_cover$layers <- shannon_plant_cover$layers[-1]
shannon_plant_cover

simpson_plant_cover <- plot_richness(PO, x="plant_cover", shape="block", color="plant_cover", measures=c("InvSimpson")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_plant_cover +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="Plant cover", y="Simpson inverse index") +
  guides(color = F, shape = F)
simpson_plant_cover$layers <- simpson_plant_cover$layers[-1]
simpson_plant_cover

alpha_graph_plant_cover <- plot_grid(observed_plant_cover, shannon_plant_cover, simpson_plant_cover, ncol=1)
alpha_graph_plant_cover

#ggsave("analyses/alpha_all_stand_filterdate_plant_cover_2024-11-28.png", width=2.2, height=8)
#svglite(file="analyses/alpha_all_stand_filterdate_plant_cover_2024-11-28.svg", width = 2.2, height = 8, bg = "white", pointsize = 16)
alpha_graph_plant_cover
dev.off()
```

```{r}
observed_block <- plot_richness(PO, x="block", shape="block", color="block", measures=c("Observed")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="Alpha diversity", x ="Block", y="Observed richness") +
  guides(color = F, shape = F)
observed_block$layers <- observed_block$layers[-1]
observed_block

shannon_block <- plot_richness(PO, x="block", shape="block", color="block", measures=c("Shannon")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="Block", y="Shannon index") +
  guides(color = F, shape = F)
shannon_block$layers <- shannon_block$layers[-1]
shannon_block

simpson_block <- plot_richness(PO, x="block", shape="block", color="block", measures=c("InvSimpson")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="Block", y="Simpson inverse index") +
  guides(color = F, shape = F)
simpson_block$layers <- simpson_block$layers[-1]
simpson_block

alpha_graph_block <- plot_grid(observed_block, shannon_block, simpson_block, ncol=1)
alpha_graph_block

#ggsave("analyses/alpha_all_stand_filterdate_block_2024-11-28.png", width=2.2, height=8)
#svglite(file="analyses/alpha_all_stand_filterdate_block_2024-11-28.svg", width = 2.2, height = 8, bg = "white", pointsize = 16)
alpha_graph_block
dev.off()
```

##### full plot

```{r}
observed_cp <- plot_richness(PO, x="code_cp", shape="block", color="code_cp", measures=c("Observed")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_cp +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="Alpha diversity", x ="", y="Observed richness") +
  guides(color = F, shape = F) +
  scale_x_discrete(labels = label_wrap(10))
observed_cp$layers <- observed_cp$layers[-1]
observed_cp

shannon_cp <- plot_richness(PO, x="code_cp", shape="block", color="code_cp", measures=c("Shannon")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_cp +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="", y="Shannon index") +
  guides(color = F, shape = F) +
  scale_x_discrete(labels = label_wrap(10))
shannon_cp$layers <- shannon_cp$layers[-1]
shannon_cp

simpson_cp <- plot_richness(PO, x="code_cp", shape="block", color="code_cp", measures=c("InvSimpson")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_cp +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="Config. heterogeneity and plant cover", y="Simpson inverse index") +
  guides(color = F, shape = F) +
  scale_x_discrete(labels = label_wrap(10))
simpson_cp$layers <- simpson_cp$layers[-1]
simpson_cp

observed_config <- plot_richness(PO, x="config", shape="block", color="config", measures=c("Observed")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_config +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="", y="") +
  guides(color = F, shape = F)
observed_config$layers <- observed_config$layers[-1]
observed_config

shannon_config <- plot_richness(PO, x="config", shape="block", color="config", measures=c("Shannon")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_config +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="", y="") +
  guides(color = F, shape = F)
shannon_config$layers <- shannon_config$layers[-1]
shannon_config

simpson_config <- plot_richness(PO, x="config", shape="block", color="config", measures=c("InvSimpson")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_config +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="Config. heterogeneity", y="") +
  guides(color = F, shape = F)
simpson_config$layers <- simpson_config$layers[-1]
simpson_config

observed_plant_cover <- plot_richness(PO, x="plant_cover", shape="block", color="plant_cover", measures=c("Observed")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_plant_cover +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="", y="") +
  guides(color = F, shape = F)
observed_plant_cover$layers <- observed_plant_cover$layers[-1]
observed_plant_cover

shannon_plant_cover <- plot_richness(PO, x="plant_cover", shape="block", color="plant_cover", measures=c("Shannon")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_plant_cover +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="", y="") +
  guides(color = F, shape = F)
shannon_plant_cover$layers <- shannon_plant_cover$layers[-1]
shannon_plant_cover

simpson_plant_cover <- plot_richness(PO, x="plant_cover", shape="block", color="plant_cover", measures=c("InvSimpson")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger + color_manual_plant_cover +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="Plant cover", y="") +
  guides(color = F, shape = F)
simpson_plant_cover$layers <- simpson_plant_cover$layers[-1]
simpson_plant_cover

observed_block <- plot_richness(PO, x="block", shape="block", color="block", measures=c("Observed")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="", y="") +
  guides(color = F, shape = F)
observed_block$layers <- observed_block$layers[-1]
observed_block

shannon_block <- plot_richness(PO, x="block", shape="block", color="block", measures=c("Shannon")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="", y="") +
  guides(color = F, shape = F)
shannon_block$layers <- shannon_block$layers[-1]
shannon_block

simpson_block <- plot_richness(PO, x="block", shape="block", color="block", measures=c("InvSimpson")) +
  geom_boxplot(shape="block") +
  geom_point(position = "jitter") +
  theme_bw() + frame_bigger +
  theme(strip.background = element_blank(), strip.text = element_blank()) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) +
  labs(title="", x ="Block", y="") +
  guides(color = F, shape = F)
simpson_block$layers <- simpson_block$layers[-1]
simpson_block

alpha_graph_all <- plot_grid(observed_cp, observed_config, observed_plant_cover, observed_block, shannon_cp, shannon_config, shannon_plant_cover, shannon_block, simpson_cp, simpson_config, simpson_plant_cover, simpson_block, ncol=4, align="hv", rel_widths = c(0.95, 0.55, 0.55, 0.75))
alpha_graph_all

#ggsave("analyses/alpha_macrofauna_surface_stand_filterdate_all_2024-10-01.png", width=8.5, height=8)
#ggsave("analyses/alpha_macrofauna_surface_stand_filterdate_auxil_2024-10-01.png", width=8.5, height=8)
#ggsave("analyses/alpha_macrofauna_surface_stand_filterdate_bioag+auxil_2024-10-01.png", width=8.5, height=8)

ggsave("analyses/alpha_all_stand_filterdate_all_2024-11-28.png", width=8.5, height=8)
#ggsave("analyses/alpha_all_stand_filterdate_auxil_2024-10-03.png", width=8.5, height=8)
#ggsave("analyses/alpha_all_stand_filterdate_bioag+auxil_2024-10-01.png", width=8.5, height=8)

#svglite(file="analyses/alpha_macrofauna_surface_stand_filterdate_all_2024-10-01.svg", width = 8.5, height = 8, bg = "white", pointsize = 16)
#svglite(file="analyses/alpha_macrofauna_surface_stand_filterdate_auxil_2024-10-01.svg", width = 8.5, height = 8, bg = "white", pointsize = 16)
#svglite(file="analyses/alpha_macrofauna_surface_stand_filterdate_bioag+auxil_2024-10-01.svg", width = 8.5, height = 8, bg = "white", pointsize = 16)

svglite(file="analyses/alpha_all_stand_filterdate_all_2024-11-28.svg", width = 8.5, height = 8, bg = "white", pointsize = 16)
#svglite(file="analyses/alpha_all_stand_filterdate_auxil_2024-10-03.svg", width = 8.5, height = 8, bg = "white", pointsize = 16)
#svglite(file="analyses/alpha_all_stand_filterdate_bioag+auxil_2024-10-01.svg", width = 8.5, height = 8, bg = "white", pointsize = 16)
alpha_graph_all
dev.off()
```

```{r}
PO_modlevelnames <- PO

sample_names(PO_modlevelnames) <- list(
  "+config. +crop_B1_R1_17.04.2023"="PLUSconfig.PLUScrop_B1_R1_17.04.2023",
  "+config. +crop_B1_R2_17.04.2023"="PLUSconfig.PLUScrop_B1_R2_17.04.2023",
  "+config. +crop_B1_R3_17.04.2023"="PLUSconfig.PLUScrop_B1_R3_17.04.2023",
  "+config. +crop_B1_R4_17.04.2023"="PLUSconfig.PLUScrop_B1_R4_17.04.2023",
  "+config. +crop_B1_R5_17.04.2023"="PLUSconfig.PLUScrop_B1_R5_17.04.2023",
  "+config. +crop_B2_R1_17.04.2023"="PLUSconfig.PLUScrop_B2_R1_17.04.2023",
  "+config. +crop_B2_R2_17.04.2023"="PLUSconfig.PLUScrop_B2_R2_17.04.2023",
  "+config. +crop_B2_R3_17.04.2023"="PLUSconfig.PLUScrop_B2_R3_17.04.2023",
  "+config. +crop_B2_R4_17.04.2023"="PLUSconfig.PLUScrop_B2_R4_17.04.2023",
  "+config. +crop_B2_R5_17.04.2023"="PLUSconfig.PLUScrop_B2_R5_17.04.2023",
  "+config. +crop_B3_R1_17.04.2023"="PLUSconfig.PLUScrop_B3_R1_17.04.2023",
  "+config. +crop_B3_R2_17.04.2023"="PLUSconfig.PLUScrop_B3_R2_17.04.2023",
  "+config. +crop_B3_R3_17.04.2023"="PLUSconfig.PLUScrop_B3_R3_17.04.2023",
  "+config. +crop_B3_R4_17.04.2023"="PLUSconfig.PLUScrop_B3_R4_17.04.2023",
  "+config. +crop_B3_R5_17.04.2023"="PLUSconfig.PLUScrop_B3_R5_17.04.2023",
  "+config. +tree_B1_R1_17.04.2023"="PLUSconfig.PLUStree_B1_R1_17.04.2023",
  "+config. +tree_B1_R2_17.04.2023"="PLUSconfig.PLUStree_B1_R2_17.04.2023",
  "+config. +tree_B1_R3_17.04.2023"="PLUSconfig.PLUStree_B1_R3_17.04.2023",
  "+config. +tree_B1_R4_17.04.2023"="PLUSconfig.PLUStree_B1_R4_17.04.2023",
  "+config. +tree_B1_R5_17.04.2023"="PLUSconfig.PLUStree_B1_R5_17.04.2023",
  "+config. +tree_B2_R1_17.04.2023"="PLUSconfig.PLUStree_B2_R1_17.04.2023",
  "+config. +tree_B2_R2_17.04.2023"="PLUSconfig.PLUStree_B2_R2_17.04.2023",
  "+config. +tree_B2_R3_17.04.2023"="PLUSconfig.PLUStree_B2_R3_17.04.2023",
  "+config. +tree_B2_R4_17.04.2023"="PLUSconfig.PLUStree_B2_R4_17.04.2023",
  "+config. +tree_B2_R5_17.04.2023"="PLUSconfig.PLUStree_B2_R5_17.04.2023",
  "+config. +tree_B3_R1_17.04.2023"="PLUSconfig.PLUStree_B3_R1_17.04.2023",
  "+config. +tree_B3_R2_17.04.2023"="PLUSconfig.PLUStree_B3_R2_17.04.2023",
  "+config. +tree_B3_R3_17.04.2023"="PLUSconfig.PLUStree_B3_R3_17.04.2023",
  "+config. +tree_B3_R4_17.04.2023"="PLUSconfig.PLUStree_B3_R4_17.04.2023",
  "+config. +tree_B3_R5_17.04.2023"="PLUSconfig.PLUStree_B3_R5_17.04.2023",
  "-config. +crop_B1_R1_17.04.2023"="MINUSconfig.PLUScrop_B1_R1_17.04.2023",
  "-config. +crop_B1_R2_17.04.2023"="MINUSconfig.PLUScrop_B1_R2_17.04.2023",
  "-config. +crop_B1_R3_17.04.2023"="MINUSconfig.PLUScrop_B1_R3_17.04.2023",
  "-config. +crop_B1_R4_17.04.2023"="MINUSconfig.PLUScrop_B1_R4_17.04.2023",
  "-config. +crop_B1_R5_17.04.2023"="MINUSconfig.PLUScrop_B1_R5_17.04.2023",
  "-config. +crop_B2_R1_17.04.2023"="MINUSconfig.PLUScrop_B2_R1_17.04.2023",
  "-config. +crop_B2_R2_17.04.2023"="MINUSconfig.PLUScrop_B2_R2_17.04.2023",
  "-config. +crop_B2_R3_17.04.2023"="MINUSconfig.PLUScrop_B2_R3_17.04.2023",
  "-config. +crop_B2_R4_17.04.2023"="MINUSconfig.PLUScrop_B2_R4_17.04.2023",
  "-config. +crop_B2_R5_17.04.2023"="MINUSconfig.PLUScrop_B2_R5_17.04.2023",
  "-config. +crop_B3_R1_17.04.2023"="MINUSconfig.PLUScrop_B3_R1_17.04.2023",
  "-config. +crop_B3_R2_17.04.2023"="MINUSconfig.PLUScrop_B3_R2_17.04.2023",
  "-config. +crop_B3_R3_17.04.2023"="MINUSconfig.PLUScrop_B3_R3_17.04.2023",
  "-config. +crop_B3_R4_17.04.2023"="MINUSconfig.PLUScrop_B3_R4_17.04.2023",
  "-config. +crop_B3_R5_17.04.2023"="MINUSconfig.PLUScrop_B3_R5_17.04.2023",
  "-config. +tree_B1_R1_17.04.2023"="MINUSconfig.PLUStree_B1_R1_17.04.2023",
  "-config. +tree_B1_R2_17.04.2023"="MINUSconfig.PLUStree_B1_R2_17.04.2023",
  "-config. +tree_B1_R3_17.04.2023"="MINUSconfig.PLUStree_B1_R3_17.04.2023",
  "-config. +tree_B1_R4_17.04.2023"="MINUSconfig.PLUStree_B1_R4_17.04.2023",
  "-config. +tree_B1_R5_17.04.2023"="MINUSconfig.PLUStree_B1_R5_17.04.2023",
  "-config. +tree_B2_R1_17.04.2023"="MINUSconfig.PLUStree_B2_R1_17.04.2023",
  "-config. +tree_B2_R2_17.04.2023"="MINUSconfig.PLUStree_B2_R2_17.04.2023", # comment for macrofauna_surface
  "-config. +tree_B2_R3_17.04.2023"="MINUSconfig.PLUStree_B2_R3_17.04.2023",
  "-config. +tree_B2_R4_17.04.2023"="MINUSconfig.PLUStree_B2_R4_17.04.2023",
  "-config. +tree_B2_R5_17.04.2023"="MINUSconfig.PLUStree_B2_R5_17.04.2023",
  "-config. +tree_B3_R1_17.04.2023"="MINUSconfig.PLUStree_B3_R1_17.04.2023",
  "-config. +tree_B3_R2_17.04.2023"="MINUSconfig.PLUStree_B3_R2_17.04.2023",
  "-config. +tree_B3_R3_17.04.2023"="MINUSconfig.PLUStree_B3_R3_17.04.2023",
  "-config. +tree_B3_R4_17.04.2023"="MINUSconfig.PLUStree_B3_R4_17.04.2023",
  "-config. +tree_B3_R5_17.04.2023"="MINUSconfig.PLUStree_B3_R5_17.04.2023")

alpha_table <- estimate_richness(PO_modlevelnames)
#write.table(alpha_table, "analyses/alpha_all_stand_filterdate_2024-11-28.csv", sep = ",")
```


```{r}
PO_alpha <- merge(PO_modlevelnames@sam_data, alpha_table, by = 0)

quickanova <- aov(Observed ~ config, PO_alpha)
summary(quickanova)
quickanova <- aov(Shannon ~ config, PO_alpha)
summary(quickanova)
quickanova <- aov(InvSimpson ~ config, PO_alpha)
summary(quickanova)

quickanova <- aov(Observed ~ plant_cover, PO_alpha)
summary(quickanova)
quickanova <- aov(Shannon ~ plant_cover, PO_alpha)
summary(quickanova)
quickanova <- aov(InvSimpson ~ plant_cover, PO_alpha)
summary(quickanova)

quickanova <- aov(Observed ~ config*plant_cover, PO_alpha)
summary(quickanova)
quickanova <- aov(Shannon ~ config*plant_cover, PO_alpha)
summary(quickanova)
quickanova <- aov(InvSimpson ~ config*plant_cover, PO_alpha)
summary(quickanova)

quickanova <- aov(Observed ~ block, PO_alpha)
summary(quickanova)
quickanova <- aov(Shannon ~ block, PO_alpha)
summary(quickanova)
quickanova <- aov(InvSimpson ~ block, PO_alpha)
summary(quickanova)

quickanova <- aov(Observed ~ config*plant_cover+block, PO_alpha)
summary(quickanova)
quickanova <- aov(Shannon ~ config*plant_cover+block, PO_alpha)
summary(quickanova)
quickanova <- aov(InvSimpson ~ config*plant_cover+block, PO_alpha)
summary(quickanova)

quickanova <- aov(Observed ~ config*plant_cover + (config/plant_cover) + block, PO_alpha)
summary(quickanova)
quickanova <- aov(Shannon ~ config*plant_cover + (config/plant_cover) + block, PO_alpha)
summary(quickanova)
quickanova <- aov(InvSimpson ~ config*plant_cover + (config/plant_cover) + block, PO_alpha)
summary(quickanova)
```

```{r}
H <- hill_tuckey_pq(PO_modlevelnames, "config")
H
#ggsave("analyses/alpha_macrofauna_surface_stand_filterdate_H_config_2024-10-01.png", width=6.1, height=2)
ggsave("analyses/alpha_all_stand_filterdate_H_config_2024-11-28.png", width=6.1, height=2)
#ggsave("analyses/alpha_all_auxil_stand_filterdate_H_config_2024-10-03.png", width=6.1, height=2)
#ggsave("analyses/alpha_all_bioag+auxil_stand_filterdate_H_config_2024-10-01.png", width=6.1, height=2)

H <- hill_tuckey_pq(PO, "plant_cover")
H
#ggsave("analyses/alpha_macrofauna_surface_stand_filterdate_H_plant_cover_2024-10-01.png", width=6, height=2)
ggsave("analyses/alpha_all_stand_filterdate_H_plant_cover_2024-11-28.png", width=6, height=2)
#ggsave("analyses/alpha_all_auxil_stand_filterdate_H_plant_cover_2024-10-03.png", width=6, height=2)
#ggsave("analyses/alpha_all_bioag+auxil_stand_filterdate_H_plant_cover_2024-10-01.png", width=6, height=2)

H <- hill_tuckey_pq(PO, "code_cp")
H
#ggsave("analyses/alpha_macrofauna_surface_stand_filterdate_H_cp_2024-10-01.png", width=7, height=6)
ggsave("analyses/alpha_all_stand_filterdate_H_cp_2024-11-28.png", width=7, height=6)
#ggsave("analyses/alpha_all_auxil_stand_filterdate_H_cp_2024-10-03.png", width=7, height=6)
#ggsave("analyses/alpha_all_bioag+auxil_stand_filterdate_H_cp_2024-10-01.png", width=7, height=6)

H <- hill_tuckey_pq(PO, "block")
H
#ggsave("analyses/alpha_macrofauna_surface_stand_filterdate_H_block_2024-10-01.png", width=6, height=4)
ggsave("analyses/alpha_all_stand_filterdate_H_block_2024-11-28.png", width=6, height=4)
#ggsave("analyses/alpha_all_auxil_stand_filterdate_H_block_2024-10-03.png", width=6, height=4)
#ggsave("analyses/alpha_all_bioag+auxil_stand_filterdate_H_block_2024-10-01.png", width=6, height=4)
```

#### beta diversity
(with stand_prop)

```{r}
PO_ord <- ordinate(PO, "PCoA", distance = "bray")
ord <- plot_ordination(PO, PO_ord, color = "code_cp", shape = "block") + theme_bw() + labs(title="Beta diversity") + color_manual_cp + guides(color=guide_legend(title="Config. heterogeneity and plant cover")) + scale_color_manual(values = cp_color)
ord

#ggsave("analyses/beta1_all_stand_prop_filterdate_cp_2024-11-28.png", width=6.5, height=4)
#svglite(file="analyses/beta1_all_stand_prop_filterdate_cp_2024-11-28.svg", width = 6.5, height = 4, bg = "white", pointsize = 16)
ord
dev.off()
```

ord_explore(PO)

```{r}
ordviz_cp <- PO %>%
  tax_transform(rank = "unique", trans = "identity") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>% 
  ord_plot(axes = c(1, 2), colour = "code_cp", fill = "code_cp", shape = "block", alpha = 0.5, size = 2) + 
  scale_shape_girafe_filled() +
  ggplot2::stat_ellipse(ggplot2::aes(colour = code_cp)) +
  color_manual_cp + fill_manual_cp +
  labs(title="Beta diversity") + guides(fill = F, color=guide_legend(title="Config. heterogeneity and plant cover"), shape=guide_legend(title="Block")) + scale_color_manual(values = cp_color)
ordviz_cp

#ggsave("analyses/beta2_all_stand_prop_filterdate_cp_2024-11-28.png", width=6.5, height=4, bg = "white")
#svglite(file="analyses/beta2_all_stand_prop_filterdate_cp_2024-11-28.svg", width = 6.5, height = 4, bg = "white", pointsize = 16)
ordviz_cp
dev.off()
```

```{r}
ordviz_config <- PO %>%
  tax_transform(rank = "unique", trans = "identity") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>% 
  ord_plot(axes = c(1, 2), colour = "config", fill = "config", shape = "block", alpha = 0.5, size = 2) + 
  scale_shape_girafe_filled() +
  ggplot2::stat_ellipse(ggplot2::aes(colour = config)) +
  color_manual_config + fill_manual_config +
  labs(title="Beta diversity") + guides(fill = F, color=guide_legend(title="Config. heterogeneity"), shape=guide_legend(title="Block")) + scale_color_manual(values = config_color)
ordviz_config

#ggsave("analyses/beta2_all_stand_prop_filterdate_config_2024-11-28.png", width=5.5, height=4, bg = "white")
#svglite(file="analyses/beta2_all_stand_prop_filterdate_config_2024-11-28.svg", width = 6.5, height = 4, bg = "white", pointsize = 16)
ordviz_config
dev.off()
```

```{r}
ordviz_plant_cover <- PO %>%
  tax_transform(rank = "unique", trans = "identity") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>% 
  ord_plot(axes = c(1, 2), colour = "plant_cover", fill = "plant_cover", shape = "block", alpha = 0.5, size = 2) + 
  scale_shape_girafe_filled() +
  ggplot2::stat_ellipse(ggplot2::aes(colour = plant_cover)) +
  color_manual_plant_cover + fill_manual_plant_cover +
  labs(title="Beta diversity") + guides(fill = F, color=guide_legend(title="Plant cover"), shape=guide_legend(title="Block")) + scale_color_manual(values = plantcover_color)
ordviz_plant_cover

#ggsave("analyses/beta2_all_stand_prop_filterdate_plant_cover_2024-11-28.png", width=5, height=4, bg = "white")
#svglite(file="analyses/beta2_all_stand_prop_filterdate_plant_cover_2024-11-28.svg", width = 5, height = 4, bg = "white", pointsize = 16)
ordviz_plant_cover
dev.off()
```

```{r}
ordviz_block <- PO %>%
  tax_transform(rank = "unique", trans = "identity") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>% 
  ord_plot(axes = c(1, 2), shape = "block", fill = "block", alpha = 0.5, size = 2) + 
  scale_shape_girafe_filled() +
  ggplot2::stat_ellipse(ggplot2::aes(colour = block)) +
  labs(title="Beta diversity") + guides(fill=F, color=guide_legend(title="Block"), shape=guide_legend(title="Block"))
ordviz_block

#ggsave("analyses/beta2_all_stand_prop_filterdate_block_2024-11-28.png", width=5, height=4, bg = "white")
#svglite(file="analyses/beta2_all_stand_prop_filterdate_block_2024-11-28.svg", width = 5, height = 4, bg = "white", pointsize = 16)
ordviz_block
dev.off()
```

##### full plot

```{r}
ordviz_cp <- PO %>%
  tax_transform(rank = "unique", trans = "identity") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>% 
  ord_plot(axes = c(1, 2), colour = "code_cp", fill = "code_cp", shape = "block", alpha = 0.5, size = 2) + 
  scale_shape_girafe_filled() +
  ggplot2::stat_ellipse(ggplot2::aes(colour = code_cp)) +
  color_manual_cp + fill_manual_cp +
  labs(title="Beta diversity") + guides(fill = F, shape = F, color=guide_legend(title="Config. heterogeneity and plant cover")) + theme(legend.title=element_text(size=12), legend.text=element_text(size=11))
ordviz_cp

ordviz_config <- PO %>%
  tax_transform(rank = "unique", trans = "identity") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>% 
  ord_plot(axes = c(1, 2), colour = "config", fill = "config", shape = "block", alpha = 0.5, size = 2) + 
  scale_shape_girafe_filled() +
  ggplot2::stat_ellipse(ggplot2::aes(colour = config)) +
  color_manual_config + fill_manual_config +
  labs(title="") + guides(fill = F, shape = F, color=guide_legend(title="Config. heterogeneity")) + theme(legend.title=element_text(size=12), legend.text=element_text(size=11))
ordviz_config

ordviz_plant_cover <- PO %>%
  tax_transform(rank = "unique", trans = "identity") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>% 
  ord_plot(axes = c(1, 2), colour = "plant_cover", fill = "plant_cover", shape = "block", alpha = 0.5, size = 2) + 
  scale_shape_girafe_filled() +
  ggplot2::stat_ellipse(ggplot2::aes(colour = plant_cover)) +
  color_manual_plant_cover + fill_manual_plant_cover +
  labs(title="") + guides(fill = F, shape = F, color=guide_legend(title="Plant cover")) + theme(legend.title=element_text(size=12), legend.text=element_text(size=11))

ordviz_block <- PO %>%
  tax_transform(rank = "unique", trans = "identity") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>% 
  ord_plot(axes = c(1, 2), shape = "block", fill = "block", alpha = 0.5, size = 2) + 
  scale_shape_girafe_filled() +
  ggplot2::stat_ellipse(ggplot2::aes(colour = block)) +
  labs(title="") + guides(fill=F, color=guide_legend(title="Block"), shape=guide_legend(title="Block")) + theme(legend.title=element_text(size=12), legend.text=element_text(size=11))

beta_graph_all <- plot_grid(ordviz_cp + theme(legend.justification = c(0,1)), ordviz_config + theme(legend.justification = c(0,1)), ordviz_plant_cover + theme(legend.justification = c(0,1)), ordviz_block + theme(legend.justification = c(0,1)), ncol=1, align="v")
beta_graph_all

#ggsave("analyses/beta2_macrofauna_surface_stand_prop_filterdate_all_2024-10-01.png", width=7, height=15, bg = "white")
#ggsave("analyses/beta2_all_stand_prop_filterdate_all_2024-10-01.png", width=7, height=15, bg = "white")
ggsave("analyses/beta2_all_stand_prop_filterdate_auxil_2024-11-28.png", width=7, height=15, bg = "white")
#ggsave("analyses/beta2_all_stand_prop_filterdate_bioag+auxil_2024-10-01.png", width=7, height=15, bg = "white")

#svglite(file="analyses/beta2_macrofauna_surface_stand_prop_filterdate_all_2024-10-01.svg", width = 7, height = 10, bg = "white", pointsize = 16)
#svglite(file="analyses/beta2_all_stand_prop_filterdate_all_2024-10-01.svg", width = 7, height = 10, bg = "white", pointsize = 16)
svglite(file="analyses/beta2_all_stand_prop_filterdate_auxil_2024-11-28.svg", width = 7, height = 10, bg = "white", pointsize = 16)
#svglite(file="analyses/beta2_all_stand_prop_filterdate_bioag+auxil_2024-10-01.svg", width = 7, height = 10, bg = "white", pointsize = 16)
beta_graph_all
dev.off()
```

```{r}
adonis_pq(PO, "config", na_remove = TRUE)
adonis_pq(PO, "plant_cover", na_remove = TRUE)
adonis_pq(PO, "config*plant_cover", na_remove = TRUE)
adonis_pq(PO, "config*plant_cover+block", na_remove = TRUE)
adonis_pq(PO, "block", na_remove = TRUE)
adonis_pq(PO, "config*plant_cover + (config/plant_cover) + block", na_remove = TRUE)
```

#### Sankey graphs
(with norm_prop)

```{r}
p <- sankey_pq(PO, taxa = c(1:3))
p
#saveNetwork(p, "analyses/sankey_macrofauna_surface_norm_prop_filterdate_KPC_2024-10-01.html")
#webshot("analyses/sankey_macrofauna_surface_norm_prop_filterdate_KPC_2024-10-01.html", "analyses/sankey_macrofauna_surface_norm_prop_filterdate_KPC_2024-10-01.png", vwidth = 400, vheight = 400)

saveNetwork(p, "analyses/sankey_all_norm_prop_filterdate_KPC_2024-11-28.html")
webshot("analyses/sankey_all_norm_prop_filterdate_KPC_2024-11-28.html", "analyses/sankey_all_norm_prop_filterdate_KPC_2024-11-28.png", vwidth = 600, vheight = 1000)

p <- sankey_pq(PO, taxa = c(1:5))
p
#saveNetwork(p, "analyses/sankey_macrofauna_surface_norm_prop_filterdate_KPCOF_2024-10-01.html")
#webshot("analyses/sankey_macrofauna_surface_norm_prop_filterdate_KPCOF_2024-10-01.html", "analyses/sankey_macrofauna_surface_norm_prop_filterdate_KPCOF_2024-10-01.png", vwidth = 500, vheight = 500)

p <- sankey_pq(PO, taxa = c(1,8:9))
p
#saveNetwork(p, "analyses/sankey_macrofauna_surface_norm_prop_filterdate_L2L3_2024-10-01.html")
#webshot("analyses/sankey_macrofauna_surface_norm_prop_filterdate_L2L3_2024-10-01.html", "analyses/sankey_macrofauna_surface_norm_prop_filterdate_L2L3_2024-10-01.png", vwidth = 500, vheight = 500)

saveNetwork(p, "analyses/sankey_all_norm_prop_filterdate_L2L3_2024-11-28.html")
webshot("analyses/sankey_all_norm_prop_filterdate_L2L3_2024-11-28.html", "analyses/sankey_all_norm_prop_filterdate_L2L3_2024-11-28.png", vwidth = 500, vheight = 500)

p <- sankey_pq(PO, taxa = c(1,2,13:15))
p
#saveNetwork(p, "analyses/sankey_macrofauna_surface_norm_prop_filterdate_KPconspotinter_2024-10-01.html")
#webshot("analyses/sankey_macrofauna_surface_norm_prop_filterdate_KPconspotinter_2024-10-01.html", "analyses/sankey_macrofauna_surface_norm_prop_filterdate_KPconspotinter_2024-10-01.png", vwidth = 500, vheight = 400)

saveNetwork(p, "analyses/sankey_all_norm_prop_filterdate_KPconspotinter_2024-11-28.html")
webshot("analyses/sankey_all_norm_prop_filterdate_KPconspotinter_2024-11-28.html", "analyses/sankey_all_norm_prop_filterdate_KPconspotinter_2024-11-28.png", vwidth = 500, vheight = 400)

p <- sankey_pq(PO, taxa = c(1,13:15))
p
saveNetwork(p, "analyses/sankey_all_norm_prop_filterdate_Kconspotinter_2024-11-28.html")
webshot("analyses/sankey_all_norm_prop_filterdate_Kconspotinter_2024-11-28.html", "analyses/sankey_all_norm_prop_filterdate_Kconspotinter_2024-11-28.png", vwidth = 500, vheight = 400)
```

#### upset diagrams
(with norm_prop)

```{r}
# replace code_cp/config/plant_cover
upset_cp_K <- upset_pq(PO, fact = "code_cp", taxa_fill = "kingdom")
#svglite(file="analyses/upset_macrofauna_surface_norm_prop_filterdate_code_cp_K_2024-10-01.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
svglite(file="analyses/upset_all_norm_prop_filterdate_code_cp_K_2024-11-28.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
upset_cp_K
dev.off()

upset_cp_P <- upset_pq(PO, fact = "code_cp", taxa_fill = "phylum")
#svglite(file="analyses/upset_macrofauna_surface_norm_prop_filterdate_code_cp_P_2024-10-01.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
svglite(file="analyses/upset_all_norm_prop_filterdate_code_cp_P_2024-11-28.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
upset_cp_P
dev.off()

upset_cp_O <- upset_pq(PO, fact = "code_cp", taxa_fill = "order")
#svglite(file="analyses/upset_macrofauna_surface_norm_prop_filterdate_code_cp_O_2024-10-01.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
upset_cp_O
dev.off()

upset_cp_F <- upset_pq(PO, fact = "code_cp", taxa_fill = "family")
#svglite(file="analyses/upset_macrofauna_surface_norm_prop_filterdate_code_cp_F_2024-10-01.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
upset_cp_F
dev.off()

upset_cp_L2 <- upset_pq(PO, fact = "code_cp", taxa_fill = "abr_1_guild_level_2_AND")
#svglite(file="analyses/upset_macrofauna_surface_norm_prop_filterdate_code_cp_L2_2024-10-01.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
upset_cp_L2
dev.off()

upset_cp_L3 <- upset_pq(PO, fact = "code_cp", taxa_fill = "abr_2_guild_level_3_AND")
#svglite(file="analyses/upset_macrofauna_surface_norm_prop_filterdate_code_cp_L3_2024-10-01.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
upset_cp_L3
dev.off()

upset_cp_L4 <- upset_pq(PO, fact = "code_cp", taxa_fill = "abr_3_guild_level_4_AND")
#svglite(file="analyses/upset_macrofauna_surface_norm_prop_filterdate_code_cp_L4_2024-10-01.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
upset_cp_L4
dev.off()

upset_cp_L5 <- upset_pq(PO, fact = "code_cp", taxa_fill = "abr_4_guild_level_5_AND")
#svglite(file="analyses/upset_macrofauna_surface_norm_prop_filterdate_code_cp_L5_2024-10-01.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
upset_cp_L5
dev.off()

upset_cp_potential <- upset_pq(PO, fact = "code_cp", taxa_fill = "consumer")
#svglite(file="analyses/upset_macrofauna_surface_norm_prop_filterdate_code_cp_consumer_2024-10-01.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
svglite(file="analyses/upset_all_norm_prop_filterdate_code_cp_consumer_2024-11-28.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
upset_cp_potential
dev.off()

upset_cp_potential <- upset_pq(PO, fact = "code_cp", taxa_fill = "potential")
#svglite(file="analyses/upset_macrofauna_surface_norm_prop_filterdate_code_cp_potential_2024-10-01.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
svglite(file="analyses/upset_all_norm_prop_filterdate_code_cp_potential_2024-11-28.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
upset_cp_potential
dev.off()

upset_cp_interaction_matchName <- upset_pq(PO, fact = "code_cp", taxa_fill = "interaction_matchName")
#svglite(file="analyses/upset_macrofauna_surface_norm_prop_filterdate_code_cp_interaction_matchName_2024-10-01.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
svglite(file="analyses/upset_all_norm_prop_filterdate_code_cp_interaction_matchName_2024-11-28.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
upset_cp_interaction_matchName
dev.off()

upset_cp_resource_matchName <- upset_pq(PO, fact = "code_cp", taxa_fill = "resource_matchName")
#svglite(file="analyses/upset_macrofauna_surface_norm_prop_filterdate_code_cp_resource_matchName_2024-10-01.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
svglite(file="analyses/upset_all_norm_prop_filterdate_code_cp_resource_matchName_2024-11-28.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
upset_cp_resource_matchName
dev.off()

upset_cp_interaction_queryName <- upset_pq(PO, fact = "code_cp", taxa_fill = "interaction_queryName")
#svglite(file="analyses/upset_macrofauna_surface_norm_prop_filterdate_code_cp_interaction_queryName_2024-10-01.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
upset_cp_interaction_queryName
dev.off()

upset_cp_resource_queryName <- upset_pq(PO, fact = "code_cp", taxa_fill = "resource_queryName")
#svglite(file="analyses/upset_macrofauna_surface_norm_prop_filterdate_code_cp_resource_queryName_2024-10-01.svg", width = 10, height = 4.5, bg = "white", pointsize = 16)
upset_cp_resource_queryName
dev.off()
```

#### Venn diagrams
(with norm_prop)

```{r}
V_cp_P <- ggvenn_pq(PO, fact = "code_cp", min_nb_seq = 0, taxonomic_rank = "phylum", add_nb_samples = F, set_size = 3) + labs(title = "phylum") # split_by = "date" # label = "count"
V_cp_P
#ggsave("analyses/venn_macrofauna_surface_norm_prop_filterdate_code_cp_P_2024-10-01.png", width=7, height=6)
ggsave("analyses/venn_all_norm_prop_filterdate_code_cp_P_2024-10-01.png", width=7, height=6, bg = "white")
#svglite(file="analyses/venn_macrofauna_surface_norm_prop_filterdate_code_cp_P_2024-10-01.svg", width = 7, height = 5, bg = "white", pointsize = 16)
svglite(file="analyses/venn_all_norm_prop_filterdate_code_cp_P_2024-10-01.svg", width = 7, height = 5, bg = "white", pointsize = 16)
V_cp_P
dev.off()

V_cp_potential <- ggvenn_pq(PO, fact = "code_cp", min_nb_seq = 0, taxonomic_rank = "potential", add_nb_samples = F, set_size = 3) + labs(title = "potential") # split_by = "date" # label = "count"
V_cp_potential
#ggsave("analyses/venn_macrofauna_surface_norm_prop_filterdate_code_cp_potential_2024-10-01.png", width=7, height=6)
ggsave("analyses/venn_all_norm_prop_filterdate_code_cp_potential_2024-10-01.png", width=7, height=6, bg = "white")
#svglite(file="analyses/venn_macrofauna_surface_norm_prop_filterdate_code_cp_potential_2024-10-01.svg", width = 7, height = 5, bg = "white", pointsize = 16)
svglite(file="analyses/venn_all_norm_prop_filterdate_code_cp_potential_2024-10-01.svg", width = 7, height = 5, bg = "white", pointsize = 16)
V_cp_potential
dev.off()
```

#### abundance graphs
(with norm_prop)

```{r}
tax_table_PO <- PO@tax_table
#write.csv(tax_table_PO, "analyses/tax_table_all_norm_prop_2024-11-28.csv", row.names = T)
#write.csv(tax_table_PO, "analyses/tax_table_all_raw_filterdate_2024-10-02.csv", row.names = T)

tidy_table_PO <- PO@otu_table
#write.csv(tidy_table_PO, "analyses/tidy_table_all_raw_filterdate_2024-11-28.csv", row.names = T)
```

##### kingdom

```{r}
PO_top <- PO # if no pruning

# code_cp
PO_top_cp = merge_samples(PO_top, "code_cp")
PO_top_cp_kingdom = tax_glom(PO_top_cp, "kingdom")

kingdom_tot_cp <- plot_bar(PO_top_cp_kingdom, fill="kingdom") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Config. heterogeneity and plant cover", y="Total abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_kingdom + scale_x_discrete(labels = label_wrap(10))
kingdom_tot_cp

PO_top_cp_kingdom_relabun = transform_sample_counts(PO_top_cp_kingdom, function(x) x/sum(x) * 100)

kingdom_rel_cp <- plot_bar(PO_top_cp_kingdom_relabun, fill="kingdom") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="Relative abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_kingdom + scale_x_discrete(labels = label_wrap(10))
kingdom_rel_cp

# config
PO_top_config = merge_samples(PO_top, "config")
PO_top_config_kingdom = tax_glom(PO_top_config, "kingdom")

kingdom_tot_config <- plot_bar(PO_top_config_kingdom, fill="kingdom") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Config. heterogeneity", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_kingdom
kingdom_tot_config

PO_top_config_kingdom_relabun = transform_sample_counts(PO_top_config_kingdom, function(x) x/sum(x) * 100)

kingdom_rel_config <- plot_bar(PO_top_config_kingdom_relabun, fill="kingdom") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_kingdom
kingdom_rel_config

# plant_cover
PO_top_plant_cover = merge_samples(PO_top, "plant_cover")
PO_top_plant_cover_kingdom = tax_glom(PO_top_plant_cover, "kingdom")

kingdom_tot_plant_cover <- plot_bar(PO_top_plant_cover_kingdom, fill="kingdom") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Plant cover", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_kingdom
kingdom_tot_plant_cover

PO_top_plant_cover_kingdom_relabun = transform_sample_counts(PO_top_plant_cover_kingdom, function(x) x/sum(x) * 100)

kingdom_rel_plant_cover <- plot_bar(PO_top_plant_cover_kingdom_relabun, fill="kingdom") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_kingdom
kingdom_rel_plant_cover

kingdom <- plot_grid(kingdom_rel_cp, kingdom_rel_config, kingdom_rel_plant_cover, kingdom_tot_cp, kingdom_tot_config, kingdom_tot_plant_cover, nrow=2, rel_widths = c(0.95, 0.55, 0.55))
kingdom

#ggsave("analyses/abund_macrofauna_surface_norm_prop_filterdate_all_K_2024-10-01.png", width=7, height=6)
#svglite(file="analyses/abund_macrofauna_surface_norm_prop_filterdate_all_K_2024-10-01.svg", width = 4, height = 8, bg = "white", pointsize = 16)

#ggsave("analyses/abund_all_norm_prop_filterdate_all_K_2024-11-28.png", width=7, height=6)
#svglite(file="analyses/abund_all_norm_prop_filterdate_all_K_2024-11-28.svg", width = 4, height = 8, bg = "white", pointsize = 16)
kingdom
dev.off()
```

```{r}
legend <- get_legend(plot_bar(PO_top_cp_kingdom, fill="kingdom") + geom_col(stat="identity", position="stack") + frame_bigger + guides(fill=guide_legend(ncol=1)) + fill_manual_kingdom)
legend <- as_ggplot(legend)
legend

#ggsave("analyses/abund_macrofauna_surface_norm_prop_filterdate_all_K_legend_2024-10-01.png", width=4.5, height=4.5)
#svglite(file="analyses/abund_macrofauna_surface_norm_prop_filterdate_all_K_legend_2024-10-01.svg", width = 4.5, height = 4.5, bg = "white", pointsize = 16)

#ggsave("analyses/abund_all_norm_prop_filterdate_all_K_legend_2024-11-28.png", width=4.5, height=4.5)
#svglite(file="analyses/abund_all_norm_prop_filterdate_all_K_legend_2024-11-28.svg", width = 4.5, height = 4.5, bg = "white", pointsize = 16)
legend
dev.off()
```

##### phylum

```{r}
PO_top <- PO # if no pruning

# code_cp
PO_top_cp = merge_samples(PO_top, "code_cp")
PO_top_cp_phylum = tax_glom(PO_top_cp, "phylum")

phylum_tot_cp <- plot_bar(PO_top_cp_phylum, fill="phylum") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Config. heterogeneity and plant cover", y="Total abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_phylum + scale_x_discrete(labels = label_wrap(10))
phylum_tot_cp

PO_top_cp_phylum_relabun = transform_sample_counts(PO_top_cp_phylum, function(x) x/sum(x) * 100)

phylum_rel_cp <- plot_bar(PO_top_cp_phylum_relabun, fill="phylum") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="Relative abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_phylum + scale_x_discrete(labels = label_wrap(10))
phylum_rel_cp

# config
PO_top_config = merge_samples(PO_top, "config")
PO_top_config_phylum = tax_glom(PO_top_config, "phylum")

phylum_tot_config <- plot_bar(PO_top_config_phylum, fill="phylum") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Config. heterogeneity", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_phylum
phylum_tot_config

PO_top_config_phylum_relabun = transform_sample_counts(PO_top_config_phylum, function(x) x/sum(x) * 100)

phylum_rel_config <- plot_bar(PO_top_config_phylum_relabun, fill="phylum") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_phylum
phylum_rel_config

# plant_cover
PO_top_plant_cover = merge_samples(PO_top, "plant_cover")
PO_top_plant_cover_phylum = tax_glom(PO_top_plant_cover, "phylum")

phylum_tot_plant_cover <- plot_bar(PO_top_plant_cover_phylum, fill="phylum") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Plant cover", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_phylum
phylum_tot_plant_cover

PO_top_plant_cover_phylum_relabun = transform_sample_counts(PO_top_plant_cover_phylum, function(x) x/sum(x) * 100)

phylum_rel_plant_cover <- plot_bar(PO_top_plant_cover_phylum_relabun, fill="phylum") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_phylum
phylum_rel_plant_cover

phylum <- plot_grid(phylum_rel_cp, phylum_rel_config, phylum_rel_plant_cover, phylum_tot_cp, phylum_tot_config, phylum_tot_plant_cover, nrow=2, rel_widths = c(0.95, 0.55, 0.55))
phylum

#ggsave("analyses/abund_macrofauna_surface_norm_prop_filterdate_all_P_2024-10-01.png", width=7, height=6)
#svglite(file="analyses/abund_macrofauna_surface_norm_prop_filterdate_all_P_2024-10-01.svg", width = 7, height = 6, bg = "white", pointsize = 16)

ggsave("analyses/abund_all_norm_prop_filterdate_all_P_2024-11_28.png", width=7, height=6)
svglite(file="analyses/abund_all_norm_prop_filterdate_all_P_2024-11_28.svg", width = 7, height = 6, bg = "white", pointsize = 16)

#ggsave("analyses/abund_all_norm_prop_filterdate_auxil_P_2024-10-01.png", width=7, height=6)
#svglite(file="analyses/abund_all_norm_prop_filterdate_auxil_P_2024-10-01.svg", width = 7, height = 6, bg = "white", pointsize = 16)
phylum
dev.off()
```

```{r}
legend <- get_legend(plot_bar(PO_top_cp_phylum, fill="phylum") + geom_col(stat="identity", position="stack") + frame_bigger + guides(fill=guide_legend(ncol=2)) + fill_manual_phylum)
legend <- as_ggplot(legend)
legend

#ggsave("analyses/abund_macrofauna_surface_norm_prop_filterdate_all_P_legend_2024-10-01.png", width=4.5, height=4.5)
#svglite(file="analyses/abund_macrofauna_surface_norm_prop_filterdate_all_P_legend_2024-10-01.svg", width = 4.5, height = 4.5, bg = "white", pointsize = 16)

ggsave("analyses/abund_all_norm_prop_filterdate_all_P_legend_2024-11-28.png", width=4.5, height=4.5)
svglite(file="analyses/abund_all_norm_prop_filterdate_all_P_legend_2024-11-28.svg", width = 4.5, height = 4.5, bg = "white", pointsize = 16)

#ggsave("analyses/abund_all_norm_prop_filterdate_auxil_P_legend_2024-10-01.png", width=4.5, height=4.5)
#svglite(file="analyses/abund_all_norm_prop_filterdate_auxil_P_legend_2024-10-01.svg", width = 4.5, height = 4.5, bg = "white", pointsize = 16)
legend
dev.off()
```

##### order

```{r}
PO_top <- PO # if no pruning

# code_cp
PO_top_cp = merge_samples(PO_top, "code_cp")
PO_top_cp_order = tax_glom(PO_top_cp, "order")

order_tot_cp <- plot_bar(PO_top_cp_order, fill="order") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Config. heterogeneity and plant cover", y="Total abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_order + scale_x_discrete(labels = label_wrap(10))
order_tot_cp

PO_top_cp_order_relabun = transform_sample_counts(PO_top_cp_order, function(x) x/sum(x) * 100)

order_rel_cp <- plot_bar(PO_top_cp_order_relabun, fill="order") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="Relative abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_order + scale_x_discrete(labels = label_wrap(10))
order_rel_cp

# config
PO_top_config = merge_samples(PO_top, "config")
PO_top_config_order = tax_glom(PO_top_config, "order")

order_tot_config <- plot_bar(PO_top_config_order, fill="order") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Config. heterogeneity", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_order
order_tot_config

PO_top_config_order_relabun = transform_sample_counts(PO_top_config_order, function(x) x/sum(x) * 100)

order_rel_config <- plot_bar(PO_top_config_order_relabun, fill="order") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_order
order_rel_config

# plant_cover
PO_top_plant_cover = merge_samples(PO_top, "plant_cover")
PO_top_plant_cover_order = tax_glom(PO_top_plant_cover, "order")

order_tot_plant_cover <- plot_bar(PO_top_plant_cover_order, fill="order") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Plant cover", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_order
order_tot_plant_cover

PO_top_plant_cover_order_relabun = transform_sample_counts(PO_top_plant_cover_order, function(x) x/sum(x) * 100)

order_rel_plant_cover <- plot_bar(PO_top_plant_cover_order_relabun, fill="order") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_order
order_rel_plant_cover

order <- plot_grid(order_rel_cp, order_rel_config, order_rel_plant_cover, order_tot_cp, order_tot_config, order_tot_plant_cover, nrow=2, rel_widths = c(0.95, 0.55, 0.55))
order

#ggsave("analyses/abund_macrofauna_surface_norm_prop_filterdate_all_O_2024-10-01.png", width=7, height=6)
#svglite(file="analyses/abund_macrofauna_surface_norm_prop_filterdate_all_O_2024-10-01.svg", width = 7, height = 6, bg = "white", pointsize = 16)
order
dev.off()
```

```{r}
legend <- get_legend(plot_bar(PO_top_cp_order, fill="order") + geom_col(stat="identity", position="stack") + frame_bigger + guides(fill=guide_legend(ncol=2)) + fill_manual_order)
legend <- as_ggplot(legend)
legend

#ggsave("analyses/abund_macrofauna_surface_norm_prop_filterdate_all_O_legend_2024-10-01.png", width=4.5, height=4.5)
#svglite(file="analyses/abund_macrofauna_surface_norm_prop_filterdate_all_O_legend_2024-10-01.svg", width = 4.5, height = 4.5, bg = "white", pointsize = 16)
legend
dev.off()
```

##### consumer

```{r}
PO_top <- PO # if no pruning

# code_cp
PO_top_cp = merge_samples(PO_top, "code_cp")
PO_top_cp_consumer = tax_glom(PO_top_cp, "consumer")

consumer_tot_cp <- plot_bar(PO_top_cp_consumer, fill="consumer") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Config. heterogeneity and plant cover", y="Total abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_consumer + scale_x_discrete(labels = label_wrap(10))
consumer_tot_cp

PO_top_cp_consumer_relabun = transform_sample_counts(PO_top_cp_consumer, function(x) x/sum(x) * 100)

consumer_rel_cp <- plot_bar(PO_top_cp_consumer_relabun, fill="consumer") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="Relative abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_consumer + scale_x_discrete(labels = label_wrap(10))
consumer_rel_cp

# config
PO_top_config = merge_samples(PO_top, "config")
PO_top_config_consumer = tax_glom(PO_top_config, "consumer")

consumer_tot_config <- plot_bar(PO_top_config_consumer, fill="consumer") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Config. heterogeneity", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_consumer
consumer_tot_config

PO_top_config_consumer_relabun = transform_sample_counts(PO_top_config_consumer, function(x) x/sum(x) * 100)

consumer_rel_config <- plot_bar(PO_top_config_consumer_relabun, fill="consumer") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_consumer
consumer_rel_config

# plant_cover
PO_top_plant_cover = merge_samples(PO_top, "plant_cover")
PO_top_plant_cover_consumer = tax_glom(PO_top_plant_cover, "consumer")

consumer_tot_plant_cover <- plot_bar(PO_top_plant_cover_consumer, fill="consumer") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Plant cover", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_consumer
consumer_tot_plant_cover

PO_top_plant_cover_consumer_relabun = transform_sample_counts(PO_top_plant_cover_consumer, function(x) x/sum(x) * 100)

consumer_rel_plant_cover <- plot_bar(PO_top_plant_cover_consumer_relabun, fill="consumer") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_consumer
consumer_rel_plant_cover

consumer <- plot_grid(consumer_rel_cp, consumer_rel_config, consumer_rel_plant_cover, consumer_tot_cp, consumer_tot_config, consumer_tot_plant_cover, nrow=2, rel_widths = c(0.95, 0.55, 0.55))
consumer

#ggsave("analyses/abund_macrofauna_surface_norm_prop_filterdate_all_consumer_2024-10-01.png", width=7, height=6)
#svglite(file="analyses/abund_macrofauna_surface_norm_prop_filterdate_all_consumer_2024-10-01.svg", width = 7, height = 6, bg = "white", pointsize = 16)

ggsave("analyses/abund_all_norm_prop_filterdate_all_consumer_2024-11-28.png", width=7, height=6)
svglite(file="analyses/abund_all_norm_prop_filterdate_all_consumer_2024-11-28.svg", width = 7, height = 6, bg = "white", pointsize = 16)
consumer
dev.off()
```

```{r}
legend <- get_legend(plot_bar(PO_top_cp_consumer, fill="consumer") + geom_col(stat="identity", position="stack") + frame_bigger + guides(fill=guide_legend(ncol=1)) + fill_manual_consumer)
legend <- as_ggplot(legend)
legend

#ggsave("analyses/abund_all_norm_prop_filterdate_all_consumer_legend_2024-11-28.png", width=4.5, height=4.5)
#svglite(file="analyses/abund_all_norm_prop_filterdate_all_consumer_legend_2024-11-28.svg", width = 4.5, height = 4.5, bg = "white", pointsize = 16)
legend
dev.off()
```

##### potential

```{r}
PO_top <- PO # if no pruning

# code_cp
PO_top_cp = merge_samples(PO_top, "code_cp")
PO_top_cp_potential = tax_glom(PO_top_cp, "potential")

potential_tot_cp <- plot_bar(PO_top_cp_potential, fill="potential") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Config. heterogeneity and plant cover", y="Total abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_potential + scale_x_discrete(labels = label_wrap(10))
potential_tot_cp

PO_top_cp_potential_relabun = transform_sample_counts(PO_top_cp_potential, function(x) x/sum(x) * 100)

potential_rel_cp <- plot_bar(PO_top_cp_potential_relabun, fill="potential") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="Relative abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_potential + scale_x_discrete(labels = label_wrap(10))
potential_rel_cp

# config
PO_top_config = merge_samples(PO_top, "config")
PO_top_config_potential = tax_glom(PO_top_config, "potential")

potential_tot_config <- plot_bar(PO_top_config_potential, fill="potential") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Config. heterogeneity", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_potential
potential_tot_config

PO_top_config_potential_relabun = transform_sample_counts(PO_top_config_potential, function(x) x/sum(x) * 100)

potential_rel_config <- plot_bar(PO_top_config_potential_relabun, fill="potential") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_potential
potential_rel_config

# plant_cover
PO_top_plant_cover = merge_samples(PO_top, "plant_cover")
PO_top_plant_cover_potential = tax_glom(PO_top_plant_cover, "potential")

potential_tot_plant_cover <- plot_bar(PO_top_plant_cover_potential, fill="potential") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Plant cover", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_potential
potential_tot_plant_cover

PO_top_plant_cover_potential_relabun = transform_sample_counts(PO_top_plant_cover_potential, function(x) x/sum(x) * 100)

potential_rel_plant_cover <- plot_bar(PO_top_plant_cover_potential_relabun, fill="potential") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_potential
potential_rel_plant_cover

potential <- plot_grid(potential_rel_cp, potential_rel_config, potential_rel_plant_cover, potential_tot_cp, potential_tot_config, potential_tot_plant_cover, nrow=2, rel_widths = c(0.95, 0.55, 0.55))
potential

#ggsave("analyses/abund_macrofauna_surface_norm_prop_filterdate_all_potential_2024-10-01.png", width=7, height=6)
#svglite(file="analyses/abund_macrofauna_surface_norm_prop_filterdate_all_potential_2024-10-01.svg", width = 7, height = 6, bg = "white", pointsize = 16)

ggsave("analyses/abund_all_norm_prop_filterdate_all_potential_2024-11_28.png", width=7, height=6)
svglite(file="analyses/abund_all_norm_prop_filterdate_all_potential_2024-11-28.svg", width = 7, height = 6, bg = "white", pointsize = 16)
potential
dev.off()
```

```{r}
legend <- get_legend(plot_bar(PO_top_cp_potential, fill="potential") + geom_col(stat="identity", position="stack") + frame_bigger + guides(fill=guide_legend(ncol=1)) + fill_manual_potential)
legend <- as_ggplot(legend)
legend

#ggsave("analyses/abund_macrofauna_surface_norm_prop_filterdate_all_potential_legend_2024-10-01.png", width=4.5, height=4.5)
#svglite(file="analyses/abund_macrofauna_surface_norm_prop_filterdate_all_potential_legend_2024-10-01.svg", width = 4.5, height = 4.5, bg = "white", pointsize = 16)

ggsave("analyses/abund_all_norm_prop_filterdate_all_potential_legend_2024-11-28.png", width=4.5, height=4.5)
svglite(file="analyses/abund_all_norm_prop_filterdate_all_potential_legend_2024-11-28.svg", width = 4.5, height = 4.5, bg = "white", pointsize = 16)
legend
dev.off()
```

##### interaction_matchName 

```{r}
PO_top <- PO # if no pruning

# code_cp
PO_top_cp = merge_samples(PO_top, "code_cp")
PO_top_cp_interaction_matchName  = tax_glom(PO_top_cp, "interaction_matchName")

interaction_matchName_tot_cp <- plot_bar(PO_top_cp_interaction_matchName, fill="interaction_matchName") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Config. heterogeneity and plant cover", y="Total abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_interaction + scale_x_discrete(labels = label_wrap(10))
interaction_matchName_tot_cp

PO_top_cp_interaction_matchName_relabun = transform_sample_counts(PO_top_cp_interaction_matchName, function(x) x/sum(x) * 100)

interaction_matchName_rel_cp <- plot_bar(PO_top_cp_interaction_matchName_relabun, fill="interaction_matchName") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="Relative abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_interaction + scale_x_discrete(labels = label_wrap(10))
interaction_matchName_rel_cp

# config
PO_top_config = merge_samples(PO_top, "config")
PO_top_config_interaction_matchName = tax_glom(PO_top_config, "interaction_matchName")

interaction_matchName_tot_config <- plot_bar(PO_top_config_interaction_matchName, fill="interaction_matchName") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Config. heterogeneity", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_interaction
interaction_matchName_tot_config

PO_top_config_interaction_matchName_relabun = transform_sample_counts(PO_top_config_interaction_matchName, function(x) x/sum(x) * 100)

interaction_matchName_rel_config <- plot_bar(PO_top_config_interaction_matchName_relabun, fill="interaction_matchName") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_interaction
interaction_matchName_rel_config

# plant_cover
PO_top_plant_cover = merge_samples(PO_top, "plant_cover")
PO_top_plant_cover_interaction_matchName = tax_glom(PO_top_plant_cover, "interaction_matchName")

interaction_matchName_tot_plant_cover <- plot_bar(PO_top_plant_cover_interaction_matchName, fill="interaction_matchName") + geom_col(stat="identity", position="stack") + frame_bigger + labs(title="", subtitle="", x ="Plant cover", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_interaction
interaction_matchName_tot_plant_cover

PO_top_plant_cover_interaction_matchName_relabun = transform_sample_counts(PO_top_plant_cover_interaction_matchName, function(x) x/sum(x) * 100)

interaction_matchName_rel_plant_cover <- plot_bar(PO_top_plant_cover_interaction_matchName_relabun, fill="interaction_matchName") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_interaction
interaction_matchName_rel_plant_cover

interaction_matchName <- plot_grid(interaction_matchName_rel_cp, interaction_matchName_rel_config, interaction_matchName_rel_plant_cover, interaction_matchName_tot_cp, interaction_matchName_tot_config, interaction_matchName_tot_plant_cover, nrow=2, rel_widths = c(0.95, 0.55, 0.55))
interaction_matchName

#ggsave("analyses/abund_macrofauna_surface_norm_prop_filterdate_all_interaction_matchName_2024-10-01.png", width=7, height=6)
#svglite(file="analyses/abund_macrofauna_surface_norm_prop_filterdate_all_interaction_matchName_2024-10-01.svg", width = 7, height = 6, bg = "white", pointsize = 16)

ggsave("analyses/abund_all_norm_prop_filterdate_all_interaction_matchName_2024-11-28.png", width=7, height=6)
svglite(file="analyses/abund_all_norm_prop_filterdate_all_interaction_matchName_2024-11-28.svg", width = 7, height = 6, bg = "white", pointsize = 16)
interaction_matchName
dev.off()
```

```{r}
legend <- get_legend(plot_bar(PO_top_cp_interaction_matchName, fill="interaction_matchName") + geom_col(stat="identity", position="stack") + frame_bigger + guides(fill=guide_legend(ncol=1)) + fill_manual_interaction)
legend <- as_ggplot(legend)
legend

#ggsave("analyses/abund_macrofauna_surface_norm_prop_filterdate_all_interaction_matchName_legend_2024-10-01.png", width=4.5, height=4.5)
#svglite(file="analyses/abund_macrofauna_surface_norm_prop_filterdate_all_interaction_matchName_legend_2024-10-01.svg", width = 4.5, height = 4.5, bg = "white", pointsize = 16)

ggsave("analyses/abund_all_norm_prop_filterdate_all_interaction_matchName_legend_2024-11-28.png", width=4.5, height=4.5)
svglite(file="analyses/abund_all_norm_prop_filterdate_all_interaction_matchName_legend_2024-11-28.svg", width = 4.5, height = 4.5, bg = "white", pointsize = 16)
legend
dev.off()
```

##### K+P+pot+inter

```{r}
PO_top <- PO # if no pruning

# K
## code_cp
PO_top_cp = merge_samples(PO_top, "code_cp")
PO_top_cp_kingdom = tax_glom(PO_top_cp, "kingdom")
PO_top_cp_kingdom_relabun = transform_sample_counts(PO_top_cp_kingdom, function(x) x/sum(x) * 100)

kingdom_rel_cp <- plot_bar(PO_top_cp_kingdom_relabun, fill="kingdom") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="Relative abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_kingdom + scale_x_discrete(labels = label_wrap(10))
kingdom_rel_cp

## config
PO_top_config = merge_samples(PO_top, "config")
PO_top_config_kingdom = tax_glom(PO_top_config, "kingdom")
PO_top_config_kingdom_relabun = transform_sample_counts(PO_top_config_kingdom, function(x) x/sum(x) * 100)

kingdom_rel_config <- plot_bar(PO_top_config_kingdom_relabun, fill="kingdom") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_kingdom
kingdom_rel_config

## plant_cover
PO_top_plant_cover = merge_samples(PO_top, "plant_cover")
PO_top_plant_cover_kingdom = tax_glom(PO_top_plant_cover, "kingdom")
PO_top_plant_cover_kingdom_relabun = transform_sample_counts(PO_top_plant_cover_kingdom, function(x) x/sum(x) * 100)

kingdom_rel_plant_cover <- plot_bar(PO_top_plant_cover_kingdom_relabun, fill="kingdom") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_kingdom
kingdom_rel_plant_cover

kingdom <- plot_grid(kingdom_rel_cp, kingdom_rel_config, kingdom_rel_plant_cover, nrow=1, rel_widths = c(0.95, 0.55, 0.55))
kingdom

# P
## code_cp
PO_top_cp = merge_samples(PO_top, "code_cp")
PO_top_cp_phylum = tax_glom(PO_top_cp, "phylum")
PO_top_cp_phylum_relabun = transform_sample_counts(PO_top_cp_phylum, function(x) x/sum(x) * 100)

phylum_rel_cp <- plot_bar(PO_top_cp_phylum_relabun, fill="phylum") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="Relative abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_phylum + scale_x_discrete(labels = label_wrap(10))
phylum_rel_cp

## config
PO_top_config = merge_samples(PO_top, "config")
PO_top_config_phylum = tax_glom(PO_top_config, "phylum")
PO_top_config_phylum_relabun = transform_sample_counts(PO_top_config_phylum, function(x) x/sum(x) * 100)

phylum_rel_config <- plot_bar(PO_top_config_phylum_relabun, fill="phylum") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_phylum
phylum_rel_config

## plant_cover
PO_top_plant_cover = merge_samples(PO_top, "plant_cover")
PO_top_plant_cover_phylum = tax_glom(PO_top_plant_cover, "phylum")
PO_top_plant_cover_phylum_relabun = transform_sample_counts(PO_top_plant_cover_phylum, function(x) x/sum(x) * 100)

phylum_rel_plant_cover <- plot_bar(PO_top_plant_cover_phylum_relabun, fill="phylum") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_phylum
phylum_rel_plant_cover

phylum <- plot_grid(phylum_rel_cp, phylum_rel_config, phylum_rel_plant_cover, nrow=1, rel_widths = c(0.95, 0.55, 0.55))
phylum

# potential
## code_cp
PO_top_cp = merge_samples(PO_top, "code_cp")
PO_top_cp_potential = tax_glom(PO_top_cp, "potential")
PO_top_cp_potential_relabun = transform_sample_counts(PO_top_cp_potential, function(x) x/sum(x) * 100)

potential_rel_cp <- plot_bar(PO_top_cp_potential_relabun, fill="potential") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="Relative abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_potential + scale_x_discrete(labels = label_wrap(10))
potential_rel_cp

## config
PO_top_config = merge_samples(PO_top, "config")
PO_top_config_potential = tax_glom(PO_top_config, "potential")
PO_top_config_potential_relabun = transform_sample_counts(PO_top_config_potential, function(x) x/sum(x) * 100)

potential_rel_config <- plot_bar(PO_top_config_potential_relabun, fill="potential") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_potential
potential_rel_config

## plant_cover
PO_top_plant_cover = merge_samples(PO_top, "plant_cover")
PO_top_plant_cover_potential = tax_glom(PO_top_plant_cover, "potential")
PO_top_plant_cover_potential_relabun = transform_sample_counts(PO_top_plant_cover_potential, function(x) x/sum(x) * 100)

potential_rel_plant_cover <- plot_bar(PO_top_plant_cover_potential_relabun, fill="potential") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_potential
potential_rel_plant_cover

potential <- plot_grid(potential_rel_cp, potential_rel_config, potential_rel_plant_cover, nrow=1, rel_widths = c(0.95, 0.55, 0.55))
potential

# interaction_matchName
## code_cp
PO_top_cp = merge_samples(PO_top, "code_cp")
PO_top_cp_interaction_matchName = tax_glom(PO_top_cp, "interaction_matchName")
PO_top_cp_interaction_matchName_relabun = transform_sample_counts(PO_top_cp_interaction_matchName, function(x) x/sum(x) * 100)

interaction_matchName_rel_cp <- plot_bar(PO_top_cp_interaction_matchName_relabun, fill="interaction_matchName") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="Config. heterogeneity and plant cover", y="Relative abundance") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_interaction + scale_x_discrete(labels = label_wrap(10))
interaction_matchName_rel_cp

## config
PO_top_config = merge_samples(PO_top, "config")
PO_top_config_interaction_matchName = tax_glom(PO_top_config, "interaction_matchName")
PO_top_config_interaction_matchName_relabun = transform_sample_counts(PO_top_config_interaction_matchName, function(x) x/sum(x) * 100)

interaction_matchName_rel_config <- plot_bar(PO_top_config_interaction_matchName_relabun, fill="interaction_matchName") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="Config. heterogeneity", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_interaction
interaction_matchName_rel_config

## plant_cover
PO_top_plant_cover = merge_samples(PO_top, "plant_cover")
PO_top_plant_cover_interaction_matchName = tax_glom(PO_top_plant_cover, "interaction_matchName")
PO_top_plant_cover_interaction_matchName_relabun = transform_sample_counts(PO_top_plant_cover_interaction_matchName, function(x) x/sum(x) * 100)

interaction_matchName_rel_plant_cover <- plot_bar(PO_top_plant_cover_interaction_matchName_relabun, fill="interaction_matchName") + geom_col(stat="identity", position="stack") + frame_simple + labs(title="", subtitle="", x ="Plant cover", y="") + scale_y_continuous(labels = scales::comma) + guides(fill=guide_legend(nrow=11)) + theme(axis.text.x=element_text(angle = -90, hjust = 0, vjust=0.2)) + theme(legend.position = "none") + fill_manual_interaction
interaction_matchName_rel_plant_cover

interaction_matchName <- plot_grid(interaction_matchName_rel_cp, interaction_matchName_rel_config, interaction_matchName_rel_plant_cover, nrow=1, rel_widths = c(0.95, 0.55, 0.55))
interaction_matchName

# KPpotinter
KPpotinter <- plot_grid(kingdom, phylum, potential, interaction_matchName, nrow=4)
KPpotinter

#ggsave("analyses/abund_macrofauna_surface_norm_prop_filterdate_all_KPpotinter_2024-10-01.png", width=7, height=10)
#svglite(file="analyses/abund_macrofauna_surface_norm_prop_filterdate_all_KPpotinter_2024-10-01.svg", width = 7, height = 10, bg = "white", pointsize = 16)

ggsave("analyses/abund_all_norm_prop_filterdate_all_KPpotinter_2024-11-28.png", width=7, height=10)
svglite(file="analyses/abund_all_norm_prop_filterdate_all_KPpotinter_2024-11-28.svg", width = 7, height = 10, bg = "white", pointsize = 16)
KPpotinter
dev.off()
```